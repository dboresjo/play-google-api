package com.boresjo.play.api.google.toolresults

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, AuthToken, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putListSchemaSuggestionClusterProto: Conversion[List[Schema.SuggestionClusterProto], Option[List[Schema.SuggestionClusterProto]]] = (fun: List[Schema.SuggestionClusterProto]) => Option(fun)
		given putSchemaSuggestionClusterProtoCategoryEnum: Conversion[Schema.SuggestionClusterProto.CategoryEnum, Option[Schema.SuggestionClusterProto.CategoryEnum]] = (fun: Schema.SuggestionClusterProto.CategoryEnum) => Option(fun)
		given putListSchemaSuggestionProto: Conversion[List[Schema.SuggestionProto], Option[List[Schema.SuggestionProto]]] = (fun: List[Schema.SuggestionProto]) => Option(fun)
		given putSchemaSafeHtmlProto: Conversion[Schema.SafeHtmlProto, Option[Schema.SafeHtmlProto]] = (fun: Schema.SafeHtmlProto) => Option(fun)
		given putSchemaSuggestionProtoPriorityEnum: Conversion[Schema.SuggestionProto.PriorityEnum, Option[Schema.SuggestionProto.PriorityEnum]] = (fun: Schema.SuggestionProto.PriorityEnum) => Option(fun)
		given putSchemaRegionProto: Conversion[Schema.RegionProto, Option[Schema.RegionProto]] = (fun: Schema.RegionProto) => Option(fun)
		given putBigDecimal: Conversion[BigDecimal, Option[BigDecimal]] = (fun: BigDecimal) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putSchemaTestExecutionStep: Conversion[Schema.TestExecutionStep, Option[Schema.TestExecutionStep]] = (fun: Schema.TestExecutionStep) => Option(fun)
		given putSchemaToolExecutionStep: Conversion[Schema.ToolExecutionStep, Option[Schema.ToolExecutionStep]] = (fun: Schema.ToolExecutionStep) => Option(fun)
		given putSchemaTimestamp: Conversion[Schema.Timestamp, Option[Schema.Timestamp]] = (fun: Schema.Timestamp) => Option(fun)
		given putSchemaStepStateEnum: Conversion[Schema.Step.StateEnum, Option[Schema.Step.StateEnum]] = (fun: Schema.Step.StateEnum) => Option(fun)
		given putSchemaOutcome: Conversion[Schema.Outcome, Option[Schema.Outcome]] = (fun: Schema.Outcome) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putListSchemaStepLabelsEntry: Conversion[List[Schema.StepLabelsEntry], Option[List[Schema.StepLabelsEntry]]] = (fun: List[Schema.StepLabelsEntry]) => Option(fun)
		given putListSchemaStepDimensionValueEntry: Conversion[List[Schema.StepDimensionValueEntry], Option[List[Schema.StepDimensionValueEntry]]] = (fun: List[Schema.StepDimensionValueEntry]) => Option(fun)
		given putSchemaDuration: Conversion[Schema.Duration, Option[Schema.Duration]] = (fun: Schema.Duration) => Option(fun)
		given putSchemaMultiStep: Conversion[Schema.MultiStep, Option[Schema.MultiStep]] = (fun: Schema.MultiStep) => Option(fun)
		given putListSchemaTestSuiteOverview: Conversion[List[Schema.TestSuiteOverview], Option[List[Schema.TestSuiteOverview]]] = (fun: List[Schema.TestSuiteOverview]) => Option(fun)
		given putSchemaToolExecution: Conversion[Schema.ToolExecution, Option[Schema.ToolExecution]] = (fun: Schema.ToolExecution) => Option(fun)
		given putListSchemaTestIssue: Conversion[List[Schema.TestIssue], Option[List[Schema.TestIssue]]] = (fun: List[Schema.TestIssue]) => Option(fun)
		given putSchemaTestTiming: Conversion[Schema.TestTiming, Option[Schema.TestTiming]] = (fun: Schema.TestTiming) => Option(fun)
		given putSchemaFileReference: Conversion[Schema.FileReference, Option[Schema.FileReference]] = (fun: Schema.FileReference) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putListSchemaFileReference: Conversion[List[Schema.FileReference], Option[List[Schema.FileReference]]] = (fun: List[Schema.FileReference]) => Option(fun)
		given putSchemaToolExitCode: Conversion[Schema.ToolExitCode, Option[Schema.ToolExitCode]] = (fun: Schema.ToolExitCode) => Option(fun)
		given putListSchemaToolOutputReference: Conversion[List[Schema.ToolOutputReference], Option[List[Schema.ToolOutputReference]]] = (fun: List[Schema.ToolOutputReference]) => Option(fun)
		given putSchemaTestCaseReference: Conversion[Schema.TestCaseReference, Option[Schema.TestCaseReference]] = (fun: Schema.TestCaseReference) => Option(fun)
		given putSchemaStackTrace: Conversion[Schema.StackTrace, Option[Schema.StackTrace]] = (fun: Schema.StackTrace) => Option(fun)
		given putSchemaAny: Conversion[Schema.Any, Option[Schema.Any]] = (fun: Schema.Any) => Option(fun)
		given putSchemaTestIssueSeverityEnum: Conversion[Schema.TestIssue.SeverityEnum, Option[Schema.TestIssue.SeverityEnum]] = (fun: Schema.TestIssue.SeverityEnum) => Option(fun)
		given putSchemaTestIssueTypeEnum: Conversion[Schema.TestIssue.TypeEnum, Option[Schema.TestIssue.TypeEnum]] = (fun: Schema.TestIssue.TypeEnum) => Option(fun)
		given putSchemaTestIssueCategoryEnum: Conversion[Schema.TestIssue.CategoryEnum, Option[Schema.TestIssue.CategoryEnum]] = (fun: Schema.TestIssue.CategoryEnum) => Option(fun)
		given putSchemaOutcomeSummaryEnum: Conversion[Schema.Outcome.SummaryEnum, Option[Schema.Outcome.SummaryEnum]] = (fun: Schema.Outcome.SummaryEnum) => Option(fun)
		given putSchemaSuccessDetail: Conversion[Schema.SuccessDetail, Option[Schema.SuccessDetail]] = (fun: Schema.SuccessDetail) => Option(fun)
		given putSchemaFailureDetail: Conversion[Schema.FailureDetail, Option[Schema.FailureDetail]] = (fun: Schema.FailureDetail) => Option(fun)
		given putSchemaInconclusiveDetail: Conversion[Schema.InconclusiveDetail, Option[Schema.InconclusiveDetail]] = (fun: Schema.InconclusiveDetail) => Option(fun)
		given putSchemaSkippedDetail: Conversion[Schema.SkippedDetail, Option[Schema.SkippedDetail]] = (fun: Schema.SkippedDetail) => Option(fun)
		given putSchemaPrimaryStep: Conversion[Schema.PrimaryStep, Option[Schema.PrimaryStep]] = (fun: Schema.PrimaryStep) => Option(fun)
		given putSchemaPrimaryStepRollUpEnum: Conversion[Schema.PrimaryStep.RollUpEnum, Option[Schema.PrimaryStep.RollUpEnum]] = (fun: Schema.PrimaryStep.RollUpEnum) => Option(fun)
		given putListSchemaIndividualOutcome: Conversion[List[Schema.IndividualOutcome], Option[List[Schema.IndividualOutcome]]] = (fun: List[Schema.IndividualOutcome]) => Option(fun)
		given putSchemaIndividualOutcomeOutcomeSummaryEnum: Conversion[Schema.IndividualOutcome.OutcomeSummaryEnum, Option[Schema.IndividualOutcome.OutcomeSummaryEnum]] = (fun: Schema.IndividualOutcome.OutcomeSummaryEnum) => Option(fun)
		given putListSchemaStep: Conversion[List[Schema.Step], Option[List[Schema.Step]]] = (fun: List[Schema.Step]) => Option(fun)
		given putListSchemaStackTrace: Conversion[List[Schema.StackTrace], Option[List[Schema.StackTrace]]] = (fun: List[Schema.StackTrace]) => Option(fun)
		given putSchemaTestCaseStatusEnum: Conversion[Schema.TestCase.StatusEnum, Option[Schema.TestCase.StatusEnum]] = (fun: Schema.TestCase.StatusEnum) => Option(fun)
		given putListSchemaTestCase: Conversion[List[Schema.TestCase], Option[List[Schema.TestCase]]] = (fun: List[Schema.TestCase]) => Option(fun)
		given putListSchemaImage: Conversion[List[Schema.Image], Option[List[Schema.Image]]] = (fun: List[Schema.Image]) => Option(fun)
		given putSchemaToolOutputReference: Conversion[Schema.ToolOutputReference, Option[Schema.ToolOutputReference]] = (fun: Schema.ToolOutputReference) => Option(fun)
		given putSchemaThumbnail: Conversion[Schema.Thumbnail, Option[Schema.Thumbnail]] = (fun: Schema.Thumbnail) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putSchemaExecutionStateEnum: Conversion[Schema.Execution.StateEnum, Option[Schema.Execution.StateEnum]] = (fun: Schema.Execution.StateEnum) => Option(fun)
		given putListSchemaMatrixDimensionDefinition: Conversion[List[Schema.MatrixDimensionDefinition], Option[List[Schema.MatrixDimensionDefinition]]] = (fun: List[Schema.MatrixDimensionDefinition]) => Option(fun)
		given putSchemaSpecification: Conversion[Schema.Specification, Option[Schema.Specification]] = (fun: Schema.Specification) => Option(fun)
		given putSchemaAndroidTest: Conversion[Schema.AndroidTest, Option[Schema.AndroidTest]] = (fun: Schema.AndroidTest) => Option(fun)
		given putSchemaIosTest: Conversion[Schema.IosTest, Option[Schema.IosTest]] = (fun: Schema.IosTest) => Option(fun)
		given putSchemaAndroidAppInfo: Conversion[Schema.AndroidAppInfo, Option[Schema.AndroidAppInfo]] = (fun: Schema.AndroidAppInfo) => Option(fun)
		given putSchemaAndroidInstrumentationTest: Conversion[Schema.AndroidInstrumentationTest, Option[Schema.AndroidInstrumentationTest]] = (fun: Schema.AndroidInstrumentationTest) => Option(fun)
		given putSchemaAndroidRoboTest: Conversion[Schema.AndroidRoboTest, Option[Schema.AndroidRoboTest]] = (fun: Schema.AndroidRoboTest) => Option(fun)
		given putSchemaAndroidTestLoop: Conversion[Schema.AndroidTestLoop, Option[Schema.AndroidTestLoop]] = (fun: Schema.AndroidTestLoop) => Option(fun)
		given putSchemaIosAppInfo: Conversion[Schema.IosAppInfo, Option[Schema.IosAppInfo]] = (fun: Schema.IosAppInfo) => Option(fun)
		given putSchemaIosXcTest: Conversion[Schema.IosXcTest, Option[Schema.IosXcTest]] = (fun: Schema.IosXcTest) => Option(fun)
		given putSchemaIosTestLoop: Conversion[Schema.IosTestLoop, Option[Schema.IosTestLoop]] = (fun: Schema.IosTestLoop) => Option(fun)
		given putSchemaIosRoboTest: Conversion[Schema.IosRoboTest, Option[Schema.IosRoboTest]] = (fun: Schema.IosRoboTest) => Option(fun)
		given putListSchemaExecution: Conversion[List[Schema.Execution], Option[List[Schema.Execution]]] = (fun: List[Schema.Execution]) => Option(fun)
		given putSchemaScreen: Conversion[Schema.Screen, Option[Schema.Screen]] = (fun: Schema.Screen) => Option(fun)
		given putListSchemaScreen: Conversion[List[Schema.Screen], Option[List[Schema.Screen]]] = (fun: List[Schema.Screen]) => Option(fun)
		given putListSchemaScreenshotCluster: Conversion[List[Schema.ScreenshotCluster], Option[List[Schema.ScreenshotCluster]]] = (fun: List[Schema.ScreenshotCluster]) => Option(fun)
		given putListSchemaEnvironmentDimensionValueEntry: Conversion[List[Schema.EnvironmentDimensionValueEntry], Option[List[Schema.EnvironmentDimensionValueEntry]]] = (fun: List[Schema.EnvironmentDimensionValueEntry]) => Option(fun)
		given putListSchemaShardSummary: Conversion[List[Schema.ShardSummary], Option[List[Schema.ShardSummary]]] = (fun: List[Schema.ShardSummary]) => Option(fun)
		given putSchemaMergedResult: Conversion[Schema.MergedResult, Option[Schema.MergedResult]] = (fun: Schema.MergedResult) => Option(fun)
		given putSchemaResultsStorage: Conversion[Schema.ResultsStorage, Option[Schema.ResultsStorage]] = (fun: Schema.ResultsStorage) => Option(fun)
		given putListSchemaStepSummary: Conversion[List[Schema.StepSummary], Option[List[Schema.StepSummary]]] = (fun: List[Schema.StepSummary]) => Option(fun)
		given putSchemaMergedResultStateEnum: Conversion[Schema.MergedResult.StateEnum, Option[Schema.MergedResult.StateEnum]] = (fun: Schema.MergedResult.StateEnum) => Option(fun)
		given putListSchemaEnvironment: Conversion[List[Schema.Environment], Option[List[Schema.Environment]]] = (fun: List[Schema.Environment]) => Option(fun)
		given putSchemaHistoryTestPlatformEnum: Conversion[Schema.History.TestPlatformEnum, Option[Schema.History.TestPlatformEnum]] = (fun: Schema.History.TestPlatformEnum) => Option(fun)
		given putListSchemaHistory: Conversion[List[Schema.History], Option[List[Schema.History]]] = (fun: List[Schema.History]) => Option(fun)
		given putListSchemaPerfMetricsSummaryPerfMetricsEnum: Conversion[List[Schema.PerfMetricsSummary.PerfMetricsEnum], Option[List[Schema.PerfMetricsSummary.PerfMetricsEnum]]] = (fun: List[Schema.PerfMetricsSummary.PerfMetricsEnum]) => Option(fun)
		given putSchemaPerfEnvironment: Conversion[Schema.PerfEnvironment, Option[Schema.PerfEnvironment]] = (fun: Schema.PerfEnvironment) => Option(fun)
		given putSchemaAppStartTime: Conversion[Schema.AppStartTime, Option[Schema.AppStartTime]] = (fun: Schema.AppStartTime) => Option(fun)
		given putSchemaGraphicsStats: Conversion[Schema.GraphicsStats, Option[Schema.GraphicsStats]] = (fun: Schema.GraphicsStats) => Option(fun)
		given putSchemaCPUInfo: Conversion[Schema.CPUInfo, Option[Schema.CPUInfo]] = (fun: Schema.CPUInfo) => Option(fun)
		given putSchemaMemoryInfo: Conversion[Schema.MemoryInfo, Option[Schema.MemoryInfo]] = (fun: Schema.MemoryInfo) => Option(fun)
		given putListSchemaGraphicsStatsBucket: Conversion[List[Schema.GraphicsStatsBucket], Option[List[Schema.GraphicsStatsBucket]]] = (fun: List[Schema.GraphicsStatsBucket]) => Option(fun)
		given putSchemaBasicPerfSampleSeries: Conversion[Schema.BasicPerfSampleSeries, Option[Schema.BasicPerfSampleSeries]] = (fun: Schema.BasicPerfSampleSeries) => Option(fun)
		given putSchemaBasicPerfSampleSeriesPerfMetricTypeEnum: Conversion[Schema.BasicPerfSampleSeries.PerfMetricTypeEnum, Option[Schema.BasicPerfSampleSeries.PerfMetricTypeEnum]] = (fun: Schema.BasicPerfSampleSeries.PerfMetricTypeEnum) => Option(fun)
		given putSchemaBasicPerfSampleSeriesPerfUnitEnum: Conversion[Schema.BasicPerfSampleSeries.PerfUnitEnum, Option[Schema.BasicPerfSampleSeries.PerfUnitEnum]] = (fun: Schema.BasicPerfSampleSeries.PerfUnitEnum) => Option(fun)
		given putSchemaBasicPerfSampleSeriesSampleSeriesLabelEnum: Conversion[Schema.BasicPerfSampleSeries.SampleSeriesLabelEnum, Option[Schema.BasicPerfSampleSeries.SampleSeriesLabelEnum]] = (fun: Schema.BasicPerfSampleSeries.SampleSeriesLabelEnum) => Option(fun)
		given putListSchemaPerfSampleSeries: Conversion[List[Schema.PerfSampleSeries], Option[List[Schema.PerfSampleSeries]]] = (fun: List[Schema.PerfSampleSeries]) => Option(fun)
		given putListSchemaPerfSample: Conversion[List[Schema.PerfSample], Option[List[Schema.PerfSample]]] = (fun: List[Schema.PerfSample]) => Option(fun)
		given putListSchemaNonSdkApi: Conversion[List[Schema.NonSdkApi], Option[List[Schema.NonSdkApi]]] = (fun: List[Schema.NonSdkApi]) => Option(fun)
		given putSchemaNonSdkApiListEnum: Conversion[Schema.NonSdkApi.ListEnum, Option[Schema.NonSdkApi.ListEnum]] = (fun: Schema.NonSdkApi.ListEnum) => Option(fun)
		given putListSchemaNonSdkApiInsight: Conversion[List[Schema.NonSdkApiInsight], Option[List[Schema.NonSdkApiInsight]]] = (fun: List[Schema.NonSdkApiInsight]) => Option(fun)
		given putSchemaUpgradeInsight: Conversion[Schema.UpgradeInsight, Option[Schema.UpgradeInsight]] = (fun: Schema.UpgradeInsight) => Option(fun)
		given putSchemaPendingGoogleUpdateInsight: Conversion[Schema.PendingGoogleUpdateInsight, Option[Schema.PendingGoogleUpdateInsight]] = (fun: Schema.PendingGoogleUpdateInsight) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
