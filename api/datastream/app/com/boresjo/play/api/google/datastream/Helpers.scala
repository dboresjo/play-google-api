package com.boresjo.play.api.google.datastream

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, AuthToken, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaOperation: Conversion[List[Schema.Operation], Option[List[Schema.Operation]]] = (fun: List[Schema.Operation]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putMapStringJsValue: Conversion[Map[String, JsValue], Option[Map[String, JsValue]]] = (fun: Map[String, JsValue]) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putListSchemaConnectionProfile: Conversion[List[Schema.ConnectionProfile], Option[List[Schema.ConnectionProfile]]] = (fun: List[Schema.ConnectionProfile]) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putSchemaOracleProfile: Conversion[Schema.OracleProfile, Option[Schema.OracleProfile]] = (fun: Schema.OracleProfile) => Option(fun)
		given putSchemaGcsProfile: Conversion[Schema.GcsProfile, Option[Schema.GcsProfile]] = (fun: Schema.GcsProfile) => Option(fun)
		given putSchemaMysqlProfile: Conversion[Schema.MysqlProfile, Option[Schema.MysqlProfile]] = (fun: Schema.MysqlProfile) => Option(fun)
		given putSchemaBigQueryProfile: Conversion[Schema.BigQueryProfile, Option[Schema.BigQueryProfile]] = (fun: Schema.BigQueryProfile) => Option(fun)
		given putSchemaPostgresqlProfile: Conversion[Schema.PostgresqlProfile, Option[Schema.PostgresqlProfile]] = (fun: Schema.PostgresqlProfile) => Option(fun)
		given putSchemaSqlServerProfile: Conversion[Schema.SqlServerProfile, Option[Schema.SqlServerProfile]] = (fun: Schema.SqlServerProfile) => Option(fun)
		given putSchemaStaticServiceIpConnectivity: Conversion[Schema.StaticServiceIpConnectivity, Option[Schema.StaticServiceIpConnectivity]] = (fun: Schema.StaticServiceIpConnectivity) => Option(fun)
		given putSchemaForwardSshTunnelConnectivity: Conversion[Schema.ForwardSshTunnelConnectivity, Option[Schema.ForwardSshTunnelConnectivity]] = (fun: Schema.ForwardSshTunnelConnectivity) => Option(fun)
		given putSchemaPrivateConnectivity: Conversion[Schema.PrivateConnectivity, Option[Schema.PrivateConnectivity]] = (fun: Schema.PrivateConnectivity) => Option(fun)
		given putSchemaOracleSslConfig: Conversion[Schema.OracleSslConfig, Option[Schema.OracleSslConfig]] = (fun: Schema.OracleSslConfig) => Option(fun)
		given putSchemaOracleAsmConfig: Conversion[Schema.OracleAsmConfig, Option[Schema.OracleAsmConfig]] = (fun: Schema.OracleAsmConfig) => Option(fun)
		given putSchemaMysqlSslConfig: Conversion[Schema.MysqlSslConfig, Option[Schema.MysqlSslConfig]] = (fun: Schema.MysqlSslConfig) => Option(fun)
		given putSchemaConnectionProfile: Conversion[Schema.ConnectionProfile, Option[Schema.ConnectionProfile]] = (fun: Schema.ConnectionProfile) => Option(fun)
		given putSchemaOracleRdbms: Conversion[Schema.OracleRdbms, Option[Schema.OracleRdbms]] = (fun: Schema.OracleRdbms) => Option(fun)
		given putSchemaMysqlRdbms: Conversion[Schema.MysqlRdbms, Option[Schema.MysqlRdbms]] = (fun: Schema.MysqlRdbms) => Option(fun)
		given putSchemaPostgresqlRdbms: Conversion[Schema.PostgresqlRdbms, Option[Schema.PostgresqlRdbms]] = (fun: Schema.PostgresqlRdbms) => Option(fun)
		given putSchemaSqlServerRdbms: Conversion[Schema.SqlServerRdbms, Option[Schema.SqlServerRdbms]] = (fun: Schema.SqlServerRdbms) => Option(fun)
		given putListSchemaOracleSchema: Conversion[List[Schema.OracleSchema], Option[List[Schema.OracleSchema]]] = (fun: List[Schema.OracleSchema]) => Option(fun)
		given putListSchemaOracleTable: Conversion[List[Schema.OracleTable], Option[List[Schema.OracleTable]]] = (fun: List[Schema.OracleTable]) => Option(fun)
		given putListSchemaOracleColumn: Conversion[List[Schema.OracleColumn], Option[List[Schema.OracleColumn]]] = (fun: List[Schema.OracleColumn]) => Option(fun)
		given putListSchemaMysqlDatabase: Conversion[List[Schema.MysqlDatabase], Option[List[Schema.MysqlDatabase]]] = (fun: List[Schema.MysqlDatabase]) => Option(fun)
		given putListSchemaMysqlTable: Conversion[List[Schema.MysqlTable], Option[List[Schema.MysqlTable]]] = (fun: List[Schema.MysqlTable]) => Option(fun)
		given putListSchemaMysqlColumn: Conversion[List[Schema.MysqlColumn], Option[List[Schema.MysqlColumn]]] = (fun: List[Schema.MysqlColumn]) => Option(fun)
		given putListSchemaPostgresqlSchema: Conversion[List[Schema.PostgresqlSchema], Option[List[Schema.PostgresqlSchema]]] = (fun: List[Schema.PostgresqlSchema]) => Option(fun)
		given putListSchemaPostgresqlTable: Conversion[List[Schema.PostgresqlTable], Option[List[Schema.PostgresqlTable]]] = (fun: List[Schema.PostgresqlTable]) => Option(fun)
		given putListSchemaPostgresqlColumn: Conversion[List[Schema.PostgresqlColumn], Option[List[Schema.PostgresqlColumn]]] = (fun: List[Schema.PostgresqlColumn]) => Option(fun)
		given putListSchemaSqlServerSchema: Conversion[List[Schema.SqlServerSchema], Option[List[Schema.SqlServerSchema]]] = (fun: List[Schema.SqlServerSchema]) => Option(fun)
		given putListSchemaSqlServerTable: Conversion[List[Schema.SqlServerTable], Option[List[Schema.SqlServerTable]]] = (fun: List[Schema.SqlServerTable]) => Option(fun)
		given putListSchemaSqlServerColumn: Conversion[List[Schema.SqlServerColumn], Option[List[Schema.SqlServerColumn]]] = (fun: List[Schema.SqlServerColumn]) => Option(fun)
		given putListSchemaStream: Conversion[List[Schema.Stream], Option[List[Schema.Stream]]] = (fun: List[Schema.Stream]) => Option(fun)
		given putSchemaSourceConfig: Conversion[Schema.SourceConfig, Option[Schema.SourceConfig]] = (fun: Schema.SourceConfig) => Option(fun)
		given putSchemaDestinationConfig: Conversion[Schema.DestinationConfig, Option[Schema.DestinationConfig]] = (fun: Schema.DestinationConfig) => Option(fun)
		given putSchemaStreamStateEnum: Conversion[Schema.Stream.StateEnum, Option[Schema.Stream.StateEnum]] = (fun: Schema.Stream.StateEnum) => Option(fun)
		given putSchemaBackfillAllStrategy: Conversion[Schema.BackfillAllStrategy, Option[Schema.BackfillAllStrategy]] = (fun: Schema.BackfillAllStrategy) => Option(fun)
		given putSchemaBackfillNoneStrategy: Conversion[Schema.BackfillNoneStrategy, Option[Schema.BackfillNoneStrategy]] = (fun: Schema.BackfillNoneStrategy) => Option(fun)
		given putListSchemaError: Conversion[List[Schema.Error], Option[List[Schema.Error]]] = (fun: List[Schema.Error]) => Option(fun)
		given putSchemaOracleSourceConfig: Conversion[Schema.OracleSourceConfig, Option[Schema.OracleSourceConfig]] = (fun: Schema.OracleSourceConfig) => Option(fun)
		given putSchemaMysqlSourceConfig: Conversion[Schema.MysqlSourceConfig, Option[Schema.MysqlSourceConfig]] = (fun: Schema.MysqlSourceConfig) => Option(fun)
		given putSchemaPostgresqlSourceConfig: Conversion[Schema.PostgresqlSourceConfig, Option[Schema.PostgresqlSourceConfig]] = (fun: Schema.PostgresqlSourceConfig) => Option(fun)
		given putSchemaSqlServerSourceConfig: Conversion[Schema.SqlServerSourceConfig, Option[Schema.SqlServerSourceConfig]] = (fun: Schema.SqlServerSourceConfig) => Option(fun)
		given putSchemaDropLargeObjects: Conversion[Schema.DropLargeObjects, Option[Schema.DropLargeObjects]] = (fun: Schema.DropLargeObjects) => Option(fun)
		given putSchemaStreamLargeObjects: Conversion[Schema.StreamLargeObjects, Option[Schema.StreamLargeObjects]] = (fun: Schema.StreamLargeObjects) => Option(fun)
		given putSchemaLogMiner: Conversion[Schema.LogMiner, Option[Schema.LogMiner]] = (fun: Schema.LogMiner) => Option(fun)
		given putSchemaBinaryLogParser: Conversion[Schema.BinaryLogParser, Option[Schema.BinaryLogParser]] = (fun: Schema.BinaryLogParser) => Option(fun)
		given putSchemaOracleAsmLogFileAccess: Conversion[Schema.OracleAsmLogFileAccess, Option[Schema.OracleAsmLogFileAccess]] = (fun: Schema.OracleAsmLogFileAccess) => Option(fun)
		given putSchemaLogFileDirectories: Conversion[Schema.LogFileDirectories, Option[Schema.LogFileDirectories]] = (fun: Schema.LogFileDirectories) => Option(fun)
		given putSchemaBinaryLogPosition: Conversion[Schema.BinaryLogPosition, Option[Schema.BinaryLogPosition]] = (fun: Schema.BinaryLogPosition) => Option(fun)
		given putSchemaGtid: Conversion[Schema.Gtid, Option[Schema.Gtid]] = (fun: Schema.Gtid) => Option(fun)
		given putSchemaSqlServerTransactionLogs: Conversion[Schema.SqlServerTransactionLogs, Option[Schema.SqlServerTransactionLogs]] = (fun: Schema.SqlServerTransactionLogs) => Option(fun)
		given putSchemaSqlServerChangeTables: Conversion[Schema.SqlServerChangeTables, Option[Schema.SqlServerChangeTables]] = (fun: Schema.SqlServerChangeTables) => Option(fun)
		given putSchemaGcsDestinationConfig: Conversion[Schema.GcsDestinationConfig, Option[Schema.GcsDestinationConfig]] = (fun: Schema.GcsDestinationConfig) => Option(fun)
		given putSchemaBigQueryDestinationConfig: Conversion[Schema.BigQueryDestinationConfig, Option[Schema.BigQueryDestinationConfig]] = (fun: Schema.BigQueryDestinationConfig) => Option(fun)
		given putSchemaAvroFileFormat: Conversion[Schema.AvroFileFormat, Option[Schema.AvroFileFormat]] = (fun: Schema.AvroFileFormat) => Option(fun)
		given putSchemaJsonFileFormat: Conversion[Schema.JsonFileFormat, Option[Schema.JsonFileFormat]] = (fun: Schema.JsonFileFormat) => Option(fun)
		given putSchemaJsonFileFormatSchemaFileFormatEnum: Conversion[Schema.JsonFileFormat.SchemaFileFormatEnum, Option[Schema.JsonFileFormat.SchemaFileFormatEnum]] = (fun: Schema.JsonFileFormat.SchemaFileFormatEnum) => Option(fun)
		given putSchemaJsonFileFormatCompressionEnum: Conversion[Schema.JsonFileFormat.CompressionEnum, Option[Schema.JsonFileFormat.CompressionEnum]] = (fun: Schema.JsonFileFormat.CompressionEnum) => Option(fun)
		given putSchemaSingleTargetDataset: Conversion[Schema.SingleTargetDataset, Option[Schema.SingleTargetDataset]] = (fun: Schema.SingleTargetDataset) => Option(fun)
		given putSchemaSourceHierarchyDatasets: Conversion[Schema.SourceHierarchyDatasets, Option[Schema.SourceHierarchyDatasets]] = (fun: Schema.SourceHierarchyDatasets) => Option(fun)
		given putSchemaMerge: Conversion[Schema.Merge, Option[Schema.Merge]] = (fun: Schema.Merge) => Option(fun)
		given putSchemaAppendOnly: Conversion[Schema.AppendOnly, Option[Schema.AppendOnly]] = (fun: Schema.AppendOnly) => Option(fun)
		given putSchemaDatasetTemplate: Conversion[Schema.DatasetTemplate, Option[Schema.DatasetTemplate]] = (fun: Schema.DatasetTemplate) => Option(fun)
		given putSchemaCdcStrategy: Conversion[Schema.CdcStrategy, Option[Schema.CdcStrategy]] = (fun: Schema.CdcStrategy) => Option(fun)
		given putSchemaMostRecentStartPosition: Conversion[Schema.MostRecentStartPosition, Option[Schema.MostRecentStartPosition]] = (fun: Schema.MostRecentStartPosition) => Option(fun)
		given putSchemaNextAvailableStartPosition: Conversion[Schema.NextAvailableStartPosition, Option[Schema.NextAvailableStartPosition]] = (fun: Schema.NextAvailableStartPosition) => Option(fun)
		given putSchemaSpecificStartPosition: Conversion[Schema.SpecificStartPosition, Option[Schema.SpecificStartPosition]] = (fun: Schema.SpecificStartPosition) => Option(fun)
		given putSchemaMysqlLogPosition: Conversion[Schema.MysqlLogPosition, Option[Schema.MysqlLogPosition]] = (fun: Schema.MysqlLogPosition) => Option(fun)
		given putSchemaOracleScnPosition: Conversion[Schema.OracleScnPosition, Option[Schema.OracleScnPosition]] = (fun: Schema.OracleScnPosition) => Option(fun)
		given putSchemaBackfillJob: Conversion[Schema.BackfillJob, Option[Schema.BackfillJob]] = (fun: Schema.BackfillJob) => Option(fun)
		given putSchemaSourceObjectIdentifier: Conversion[Schema.SourceObjectIdentifier, Option[Schema.SourceObjectIdentifier]] = (fun: Schema.SourceObjectIdentifier) => Option(fun)
		given putSchemaBackfillJobStateEnum: Conversion[Schema.BackfillJob.StateEnum, Option[Schema.BackfillJob.StateEnum]] = (fun: Schema.BackfillJob.StateEnum) => Option(fun)
		given putSchemaBackfillJobTriggerEnum: Conversion[Schema.BackfillJob.TriggerEnum, Option[Schema.BackfillJob.TriggerEnum]] = (fun: Schema.BackfillJob.TriggerEnum) => Option(fun)
		given putSchemaOracleObjectIdentifier: Conversion[Schema.OracleObjectIdentifier, Option[Schema.OracleObjectIdentifier]] = (fun: Schema.OracleObjectIdentifier) => Option(fun)
		given putSchemaMysqlObjectIdentifier: Conversion[Schema.MysqlObjectIdentifier, Option[Schema.MysqlObjectIdentifier]] = (fun: Schema.MysqlObjectIdentifier) => Option(fun)
		given putSchemaPostgresqlObjectIdentifier: Conversion[Schema.PostgresqlObjectIdentifier, Option[Schema.PostgresqlObjectIdentifier]] = (fun: Schema.PostgresqlObjectIdentifier) => Option(fun)
		given putSchemaSqlServerObjectIdentifier: Conversion[Schema.SqlServerObjectIdentifier, Option[Schema.SqlServerObjectIdentifier]] = (fun: Schema.SqlServerObjectIdentifier) => Option(fun)
		given putListSchemaStreamObject: Conversion[List[Schema.StreamObject], Option[List[Schema.StreamObject]]] = (fun: List[Schema.StreamObject]) => Option(fun)
		given putSchemaStreamObject: Conversion[Schema.StreamObject, Option[Schema.StreamObject]] = (fun: Schema.StreamObject) => Option(fun)
		given putSchemaPrivateConnectionStateEnum: Conversion[Schema.PrivateConnection.StateEnum, Option[Schema.PrivateConnection.StateEnum]] = (fun: Schema.PrivateConnection.StateEnum) => Option(fun)
		given putSchemaError: Conversion[Schema.Error, Option[Schema.Error]] = (fun: Schema.Error) => Option(fun)
		given putSchemaVpcPeeringConfig: Conversion[Schema.VpcPeeringConfig, Option[Schema.VpcPeeringConfig]] = (fun: Schema.VpcPeeringConfig) => Option(fun)
		given putListSchemaPrivateConnection: Conversion[List[Schema.PrivateConnection], Option[List[Schema.PrivateConnection]]] = (fun: List[Schema.PrivateConnection]) => Option(fun)
		given putListSchemaRoute: Conversion[List[Schema.Route], Option[List[Schema.Route]]] = (fun: List[Schema.Route]) => Option(fun)
		given putListSchemaLocation: Conversion[List[Schema.Location], Option[List[Schema.Location]]] = (fun: List[Schema.Location]) => Option(fun)
		given putSchemaValidationResult: Conversion[Schema.ValidationResult, Option[Schema.ValidationResult]] = (fun: Schema.ValidationResult) => Option(fun)
		given putListSchemaValidation: Conversion[List[Schema.Validation], Option[List[Schema.Validation]]] = (fun: List[Schema.Validation]) => Option(fun)
		given putSchemaValidationStateEnum: Conversion[Schema.Validation.StateEnum, Option[Schema.Validation.StateEnum]] = (fun: Schema.Validation.StateEnum) => Option(fun)
		given putListSchemaValidationMessage: Conversion[List[Schema.ValidationMessage], Option[List[Schema.ValidationMessage]]] = (fun: List[Schema.ValidationMessage]) => Option(fun)
		given putSchemaValidationMessageLevelEnum: Conversion[Schema.ValidationMessage.LevelEnum, Option[Schema.ValidationMessage.LevelEnum]] = (fun: Schema.ValidationMessage.LevelEnum) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
