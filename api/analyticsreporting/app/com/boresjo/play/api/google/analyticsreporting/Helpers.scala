package com.boresjo.play.api.google.analyticsreporting

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaReportRequest: Conversion[List[Schema.ReportRequest], Option[List[Schema.ReportRequest]]] = (fun: List[Schema.ReportRequest]) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putListSchemaDateRange: Conversion[List[Schema.DateRange], Option[List[Schema.DateRange]]] = (fun: List[Schema.DateRange]) => Option(fun)
		given putSchemaReportRequestSamplingLevelEnum: Conversion[Schema.ReportRequest.SamplingLevelEnum, Option[Schema.ReportRequest.SamplingLevelEnum]] = (fun: Schema.ReportRequest.SamplingLevelEnum) => Option(fun)
		given putListSchemaDimension: Conversion[List[Schema.Dimension], Option[List[Schema.Dimension]]] = (fun: List[Schema.Dimension]) => Option(fun)
		given putListSchemaDimensionFilterClause: Conversion[List[Schema.DimensionFilterClause], Option[List[Schema.DimensionFilterClause]]] = (fun: List[Schema.DimensionFilterClause]) => Option(fun)
		given putListSchemaMetric: Conversion[List[Schema.Metric], Option[List[Schema.Metric]]] = (fun: List[Schema.Metric]) => Option(fun)
		given putListSchemaMetricFilterClause: Conversion[List[Schema.MetricFilterClause], Option[List[Schema.MetricFilterClause]]] = (fun: List[Schema.MetricFilterClause]) => Option(fun)
		given putListSchemaOrderBy: Conversion[List[Schema.OrderBy], Option[List[Schema.OrderBy]]] = (fun: List[Schema.OrderBy]) => Option(fun)
		given putListSchemaSegment: Conversion[List[Schema.Segment], Option[List[Schema.Segment]]] = (fun: List[Schema.Segment]) => Option(fun)
		given putListSchemaPivot: Conversion[List[Schema.Pivot], Option[List[Schema.Pivot]]] = (fun: List[Schema.Pivot]) => Option(fun)
		given putSchemaCohortGroup: Conversion[Schema.CohortGroup, Option[Schema.CohortGroup]] = (fun: Schema.CohortGroup) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putSchemaDimensionFilterClauseOperatorEnum: Conversion[Schema.DimensionFilterClause.OperatorEnum, Option[Schema.DimensionFilterClause.OperatorEnum]] = (fun: Schema.DimensionFilterClause.OperatorEnum) => Option(fun)
		given putListSchemaDimensionFilter: Conversion[List[Schema.DimensionFilter], Option[List[Schema.DimensionFilter]]] = (fun: List[Schema.DimensionFilter]) => Option(fun)
		given putSchemaDimensionFilterOperatorEnum: Conversion[Schema.DimensionFilter.OperatorEnum, Option[Schema.DimensionFilter.OperatorEnum]] = (fun: Schema.DimensionFilter.OperatorEnum) => Option(fun)
		given putSchemaMetricFormattingTypeEnum: Conversion[Schema.Metric.FormattingTypeEnum, Option[Schema.Metric.FormattingTypeEnum]] = (fun: Schema.Metric.FormattingTypeEnum) => Option(fun)
		given putSchemaMetricFilterClauseOperatorEnum: Conversion[Schema.MetricFilterClause.OperatorEnum, Option[Schema.MetricFilterClause.OperatorEnum]] = (fun: Schema.MetricFilterClause.OperatorEnum) => Option(fun)
		given putListSchemaMetricFilter: Conversion[List[Schema.MetricFilter], Option[List[Schema.MetricFilter]]] = (fun: List[Schema.MetricFilter]) => Option(fun)
		given putSchemaMetricFilterOperatorEnum: Conversion[Schema.MetricFilter.OperatorEnum, Option[Schema.MetricFilter.OperatorEnum]] = (fun: Schema.MetricFilter.OperatorEnum) => Option(fun)
		given putSchemaOrderByOrderTypeEnum: Conversion[Schema.OrderBy.OrderTypeEnum, Option[Schema.OrderBy.OrderTypeEnum]] = (fun: Schema.OrderBy.OrderTypeEnum) => Option(fun)
		given putSchemaOrderBySortOrderEnum: Conversion[Schema.OrderBy.SortOrderEnum, Option[Schema.OrderBy.SortOrderEnum]] = (fun: Schema.OrderBy.SortOrderEnum) => Option(fun)
		given putSchemaDynamicSegment: Conversion[Schema.DynamicSegment, Option[Schema.DynamicSegment]] = (fun: Schema.DynamicSegment) => Option(fun)
		given putSchemaSegmentDefinition: Conversion[Schema.SegmentDefinition, Option[Schema.SegmentDefinition]] = (fun: Schema.SegmentDefinition) => Option(fun)
		given putListSchemaSegmentFilter: Conversion[List[Schema.SegmentFilter], Option[List[Schema.SegmentFilter]]] = (fun: List[Schema.SegmentFilter]) => Option(fun)
		given putSchemaSimpleSegment: Conversion[Schema.SimpleSegment, Option[Schema.SimpleSegment]] = (fun: Schema.SimpleSegment) => Option(fun)
		given putSchemaSequenceSegment: Conversion[Schema.SequenceSegment, Option[Schema.SequenceSegment]] = (fun: Schema.SequenceSegment) => Option(fun)
		given putListSchemaOrFiltersForSegment: Conversion[List[Schema.OrFiltersForSegment], Option[List[Schema.OrFiltersForSegment]]] = (fun: List[Schema.OrFiltersForSegment]) => Option(fun)
		given putListSchemaSegmentFilterClause: Conversion[List[Schema.SegmentFilterClause], Option[List[Schema.SegmentFilterClause]]] = (fun: List[Schema.SegmentFilterClause]) => Option(fun)
		given putSchemaSegmentDimensionFilter: Conversion[Schema.SegmentDimensionFilter, Option[Schema.SegmentDimensionFilter]] = (fun: Schema.SegmentDimensionFilter) => Option(fun)
		given putSchemaSegmentMetricFilter: Conversion[Schema.SegmentMetricFilter, Option[Schema.SegmentMetricFilter]] = (fun: Schema.SegmentMetricFilter) => Option(fun)
		given putSchemaSegmentDimensionFilterOperatorEnum: Conversion[Schema.SegmentDimensionFilter.OperatorEnum, Option[Schema.SegmentDimensionFilter.OperatorEnum]] = (fun: Schema.SegmentDimensionFilter.OperatorEnum) => Option(fun)
		given putSchemaSegmentMetricFilterScopeEnum: Conversion[Schema.SegmentMetricFilter.ScopeEnum, Option[Schema.SegmentMetricFilter.ScopeEnum]] = (fun: Schema.SegmentMetricFilter.ScopeEnum) => Option(fun)
		given putSchemaSegmentMetricFilterOperatorEnum: Conversion[Schema.SegmentMetricFilter.OperatorEnum, Option[Schema.SegmentMetricFilter.OperatorEnum]] = (fun: Schema.SegmentMetricFilter.OperatorEnum) => Option(fun)
		given putListSchemaSegmentSequenceStep: Conversion[List[Schema.SegmentSequenceStep], Option[List[Schema.SegmentSequenceStep]]] = (fun: List[Schema.SegmentSequenceStep]) => Option(fun)
		given putSchemaSegmentSequenceStepMatchTypeEnum: Conversion[Schema.SegmentSequenceStep.MatchTypeEnum, Option[Schema.SegmentSequenceStep.MatchTypeEnum]] = (fun: Schema.SegmentSequenceStep.MatchTypeEnum) => Option(fun)
		given putListSchemaCohort: Conversion[List[Schema.Cohort], Option[List[Schema.Cohort]]] = (fun: List[Schema.Cohort]) => Option(fun)
		given putSchemaCohortTypeEnum: Conversion[Schema.Cohort.TypeEnum, Option[Schema.Cohort.TypeEnum]] = (fun: Schema.Cohort.TypeEnum) => Option(fun)
		given putSchemaDateRange: Conversion[Schema.DateRange, Option[Schema.DateRange]] = (fun: Schema.DateRange) => Option(fun)
		given putListSchemaReport: Conversion[List[Schema.Report], Option[List[Schema.Report]]] = (fun: List[Schema.Report]) => Option(fun)
		given putSchemaResourceQuotasRemaining: Conversion[Schema.ResourceQuotasRemaining, Option[Schema.ResourceQuotasRemaining]] = (fun: Schema.ResourceQuotasRemaining) => Option(fun)
		given putSchemaColumnHeader: Conversion[Schema.ColumnHeader, Option[Schema.ColumnHeader]] = (fun: Schema.ColumnHeader) => Option(fun)
		given putSchemaReportData: Conversion[Schema.ReportData, Option[Schema.ReportData]] = (fun: Schema.ReportData) => Option(fun)
		given putSchemaMetricHeader: Conversion[Schema.MetricHeader, Option[Schema.MetricHeader]] = (fun: Schema.MetricHeader) => Option(fun)
		given putListSchemaMetricHeaderEntry: Conversion[List[Schema.MetricHeaderEntry], Option[List[Schema.MetricHeaderEntry]]] = (fun: List[Schema.MetricHeaderEntry]) => Option(fun)
		given putListSchemaPivotHeader: Conversion[List[Schema.PivotHeader], Option[List[Schema.PivotHeader]]] = (fun: List[Schema.PivotHeader]) => Option(fun)
		given putSchemaMetricHeaderEntryTypeEnum: Conversion[Schema.MetricHeaderEntry.TypeEnum, Option[Schema.MetricHeaderEntry.TypeEnum]] = (fun: Schema.MetricHeaderEntry.TypeEnum) => Option(fun)
		given putListSchemaPivotHeaderEntry: Conversion[List[Schema.PivotHeaderEntry], Option[List[Schema.PivotHeaderEntry]]] = (fun: List[Schema.PivotHeaderEntry]) => Option(fun)
		given putSchemaMetricHeaderEntry: Conversion[Schema.MetricHeaderEntry, Option[Schema.MetricHeaderEntry]] = (fun: Schema.MetricHeaderEntry) => Option(fun)
		given putListSchemaReportRow: Conversion[List[Schema.ReportRow], Option[List[Schema.ReportRow]]] = (fun: List[Schema.ReportRow]) => Option(fun)
		given putListSchemaDateRangeValues: Conversion[List[Schema.DateRangeValues], Option[List[Schema.DateRangeValues]]] = (fun: List[Schema.DateRangeValues]) => Option(fun)
		given putListSchemaPivotValueRegion: Conversion[List[Schema.PivotValueRegion], Option[List[Schema.PivotValueRegion]]] = (fun: List[Schema.PivotValueRegion]) => Option(fun)
		given putSchemaUser: Conversion[Schema.User, Option[Schema.User]] = (fun: Schema.User) => Option(fun)
		given putListSchemaSearchUserActivityRequestActivityTypesEnum: Conversion[List[Schema.SearchUserActivityRequest.ActivityTypesEnum], Option[List[Schema.SearchUserActivityRequest.ActivityTypesEnum]]] = (fun: List[Schema.SearchUserActivityRequest.ActivityTypesEnum]) => Option(fun)
		given putSchemaUserTypeEnum: Conversion[Schema.User.TypeEnum, Option[Schema.User.TypeEnum]] = (fun: Schema.User.TypeEnum) => Option(fun)
		given putListSchemaUserActivitySession: Conversion[List[Schema.UserActivitySession], Option[List[Schema.UserActivitySession]]] = (fun: List[Schema.UserActivitySession]) => Option(fun)
		given putBigDecimal: Conversion[BigDecimal, Option[BigDecimal]] = (fun: BigDecimal) => Option(fun)
		given putListSchemaActivity: Conversion[List[Schema.Activity], Option[List[Schema.Activity]]] = (fun: List[Schema.Activity]) => Option(fun)
		given putSchemaActivityActivityTypeEnum: Conversion[Schema.Activity.ActivityTypeEnum, Option[Schema.Activity.ActivityTypeEnum]] = (fun: Schema.Activity.ActivityTypeEnum) => Option(fun)
		given putListSchemaCustomDimension: Conversion[List[Schema.CustomDimension], Option[List[Schema.CustomDimension]]] = (fun: List[Schema.CustomDimension]) => Option(fun)
		given putSchemaPageviewData: Conversion[Schema.PageviewData, Option[Schema.PageviewData]] = (fun: Schema.PageviewData) => Option(fun)
		given putSchemaScreenviewData: Conversion[Schema.ScreenviewData, Option[Schema.ScreenviewData]] = (fun: Schema.ScreenviewData) => Option(fun)
		given putSchemaEcommerceData: Conversion[Schema.EcommerceData, Option[Schema.EcommerceData]] = (fun: Schema.EcommerceData) => Option(fun)
		given putSchemaGoalSetData: Conversion[Schema.GoalSetData, Option[Schema.GoalSetData]] = (fun: Schema.GoalSetData) => Option(fun)
		given putSchemaEventData: Conversion[Schema.EventData, Option[Schema.EventData]] = (fun: Schema.EventData) => Option(fun)
		given putSchemaEcommerceDataActionTypeEnum: Conversion[Schema.EcommerceData.ActionTypeEnum, Option[Schema.EcommerceData.ActionTypeEnum]] = (fun: Schema.EcommerceData.ActionTypeEnum) => Option(fun)
		given putSchemaTransactionData: Conversion[Schema.TransactionData, Option[Schema.TransactionData]] = (fun: Schema.TransactionData) => Option(fun)
		given putListSchemaProductData: Conversion[List[Schema.ProductData], Option[List[Schema.ProductData]]] = (fun: List[Schema.ProductData]) => Option(fun)
		given putSchemaEcommerceDataEcommerceTypeEnum: Conversion[Schema.EcommerceData.EcommerceTypeEnum, Option[Schema.EcommerceData.EcommerceTypeEnum]] = (fun: Schema.EcommerceData.EcommerceTypeEnum) => Option(fun)
		given putListSchemaGoalData: Conversion[List[Schema.GoalData], Option[List[Schema.GoalData]]] = (fun: List[Schema.GoalData]) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
