package com.boresjo.play.api.google.baremetalsolution

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Schema {
	case class ListInstancesResponse(
	  /** The list of servers. */
		instances: Option[List[Schema.Instance]] = None,
	  /** A token identifying a page of results from the server. */
		nextPageToken: Option[String] = None,
	  /** Locations that could not be reached. */
		unreachable: Option[List[String]] = None
	)
	
	object Instance {
		enum StateEnum extends Enum[StateEnum] { case STATE_UNSPECIFIED, PROVISIONING, RUNNING, DELETED, UPDATING, STARTING, STOPPING, SHUTDOWN }
		enum WorkloadProfileEnum extends Enum[WorkloadProfileEnum] { case WORKLOAD_PROFILE_UNSPECIFIED, WORKLOAD_PROFILE_GENERIC, WORKLOAD_PROFILE_HANA }
	}
	case class Instance(
	  /** Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}` */
		name: Option[String] = None,
	  /** Output only. An identifier for the `Instance`, generated by the backend. */
		id: Option[String] = None,
	  /** Output only. Create a time stamp. */
		createTime: Option[String] = None,
	  /** Output only. Update a time stamp. */
		updateTime: Option[String] = None,
	  /** Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations) */
		machineType: Option[String] = None,
	  /** Output only. The state of the server. */
		state: Option[Schema.Instance.StateEnum] = None,
	  /** True if you enable hyperthreading for the server, otherwise false. The default value is false. */
		hyperthreadingEnabled: Option[Boolean] = None,
	  /** Labels as key value pairs. */
		labels: Option[Map[String, String]] = None,
	  /** Immutable. List of LUNs associated with this server. */
		luns: Option[List[Schema.Lun]] = None,
	  /** Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses. */
		volumes: Option[List[Schema.Volume]] = None,
	  /** Output only. List of networks associated with this server. */
		networks: Option[List[Schema.Network]] = None,
	  /** Output only. True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false. */
		interactiveSerialConsoleEnabled: Option[Boolean] = None,
	  /** The OS image currently installed on the server. */
		osImage: Option[String] = None,
	  /** Immutable. Pod name. Pod is an independent part of infrastructure. Instance can only be connected to the assets (networks, volumes) allocated in the same pod. */
		pod: Option[String] = None,
	  /** Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic". */
		networkTemplate: Option[String] = None,
	  /** List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled. */
		logicalInterfaces: Option[List[Schema.GoogleCloudBaremetalsolutionV2LogicalInterface]] = None,
	  /** Output only. Text field about info for logging in. */
		loginInfo: Option[String] = None,
	  /** The workload profile for the instance. */
		workloadProfile: Option[Schema.Instance.WorkloadProfileEnum] = None,
	  /** Output only. The firmware version for the instance. */
		firmwareVersion: Option[String] = None,
	  /** Optional. List of SSH Keys used during instance provisioning. */
		sshKeys: Option[List[String]] = None,
	  /** Optional. Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose. Format is `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`. */
		kmsKeyVersion: Option[String] = None
	)
	
	object Lun {
		enum StateEnum extends Enum[StateEnum] { case STATE_UNSPECIFIED, CREATING, UPDATING, READY, DELETING, COOL_OFF }
		enum MultiprotocolTypeEnum extends Enum[MultiprotocolTypeEnum] { case MULTIPROTOCOL_TYPE_UNSPECIFIED, LINUX }
		enum StorageTypeEnum extends Enum[StorageTypeEnum] { case STORAGE_TYPE_UNSPECIFIED, SSD, HDD }
	}
	case class Lun(
	  /** Output only. The name of the LUN. */
		name: Option[String] = None,
	  /** An identifier for the LUN, generated by the backend. */
		id: Option[String] = None,
	  /** The state of this storage volume. */
		state: Option[Schema.Lun.StateEnum] = None,
	  /** The size of this LUN, in GiB. */
		sizeGb: Option[String] = None,
	  /** The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system. */
		multiprotocolType: Option[Schema.Lun.MultiprotocolTypeEnum] = None,
	  /** Display the storage volume for this LUN. */
		storageVolume: Option[String] = None,
	  /** Display if this LUN can be shared between multiple physical servers. */
		shareable: Option[Boolean] = None,
	  /** Display if this LUN is a boot LUN. */
		bootLun: Option[Boolean] = None,
	  /** The storage type for this LUN. */
		storageType: Option[Schema.Lun.StorageTypeEnum] = None,
	  /** The WWID for this LUN. */
		wwid: Option[String] = None,
	  /** Output only. Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state. */
		expireTime: Option[String] = None,
	  /** Output only. Instances this Lun is attached to. */
		instances: Option[List[String]] = None
	)
	
	object Volume {
		enum StorageTypeEnum extends Enum[StorageTypeEnum] { case STORAGE_TYPE_UNSPECIFIED, SSD, HDD }
		enum StateEnum extends Enum[StateEnum] { case STATE_UNSPECIFIED, CREATING, READY, DELETING, UPDATING, COOL_OFF }
		enum SnapshotAutoDeleteBehaviorEnum extends Enum[SnapshotAutoDeleteBehaviorEnum] { case SNAPSHOT_AUTO_DELETE_BEHAVIOR_UNSPECIFIED, DISABLED, OLDEST_FIRST, NEWEST_FIRST }
		enum ProtocolEnum extends Enum[ProtocolEnum] { case PROTOCOL_UNSPECIFIED, FIBRE_CHANNEL, NFS }
		enum PerformanceTierEnum extends Enum[PerformanceTierEnum] { case VOLUME_PERFORMANCE_TIER_UNSPECIFIED, VOLUME_PERFORMANCE_TIER_SHARED, VOLUME_PERFORMANCE_TIER_ASSIGNED, VOLUME_PERFORMANCE_TIER_HT, VOLUME_PERFORMANCE_TIER_QOS2_PERFORMANCE }
		enum WorkloadProfileEnum extends Enum[WorkloadProfileEnum] { case WORKLOAD_PROFILE_UNSPECIFIED, GENERIC, HANA }
	}
	case class Volume(
	  /** Output only. The resource name of this `Volume`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/volumes/{volume}` */
		name: Option[String] = None,
	  /** An identifier for the `Volume`, generated by the backend. */
		id: Option[String] = None,
	  /** The storage type for this volume. */
		storageType: Option[Schema.Volume.StorageTypeEnum] = None,
	  /** The state of this storage volume. */
		state: Option[Schema.Volume.StateEnum] = None,
	  /** The requested size of this storage volume, in GiB. */
		requestedSizeGib: Option[String] = None,
	  /** Originally requested size, in GiB. */
		originallyRequestedSizeGib: Option[String] = None,
	  /** The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink. */
		currentSizeGib: Option[String] = None,
	  /** Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value. */
		emergencySizeGib: Option[String] = None,
	  /** Maximum size volume can be expanded to in case of evergency, in GiB. */
		maxSizeGib: Option[String] = None,
	  /** The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0. */
		autoGrownSizeGib: Option[String] = None,
	  /** The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots. */
		remainingSpaceGib: Option[String] = None,
	  /** Details about snapshot space reservation and usage on the storage volume. */
		snapshotReservationDetail: Option[Schema.SnapshotReservationDetail] = None,
	  /** The behavior to use when snapshot reserved space is full. */
		snapshotAutoDeleteBehavior: Option[Schema.Volume.SnapshotAutoDeleteBehaviorEnum] = None,
	  /** Labels as key value pairs. */
		labels: Option[Map[String, String]] = None,
	  /** Whether snapshots are enabled. */
		snapshotEnabled: Option[Boolean] = None,
	  /** Immutable. Pod name. Pod is an independent part of infrastructure. Volume can only be connected to the instances allocated in the same pod. */
		pod: Option[String] = None,
	  /** Output only. Storage protocol for the Volume. */
		protocol: Option[Schema.Volume.ProtocolEnum] = None,
	  /** Output only. Whether this volume is a boot volume. A boot volume is one which contains a boot LUN. */
		bootVolume: Option[Boolean] = None,
	  /** Immutable. Performance tier of the Volume. Default is SHARED. */
		performanceTier: Option[Schema.Volume.PerformanceTierEnum] = None,
	  /** Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention. */
		notes: Option[String] = None,
	  /** The workload profile for the volume. */
		workloadProfile: Option[Schema.Volume.WorkloadProfileEnum] = None,
	  /** Output only. Time after which volume will be fully deleted. It is filled only for volumes in COOLOFF state. */
		expireTime: Option[String] = None,
	  /** Output only. Instances this Volume is attached to. This field is set only in Get requests. */
		instances: Option[List[String]] = None,
	  /** Output only. Is the Volume attached at at least one instance. This field is a lightweight counterpart of `instances` field. It is filled in List responses as well. */
		attached: Option[Boolean] = None
	)
	
	case class SnapshotReservationDetail(
	  /** The space on this storage volume reserved for snapshots, shown in GiB. */
		reservedSpaceGib: Option[String] = None,
	  /** The percent of snapshot space on this storage volume actually being used by the snapshot copies. This value might be higher than 100% if the snapshot copies have overflowed into the data portion of the storage volume. */
		reservedSpaceUsedPercent: Option[Int] = None,
	  /** The amount, in GiB, of available space in this storage volume's reserved snapshot space. */
		reservedSpaceRemainingGib: Option[String] = None,
	  /** Percent of the total Volume size reserved for snapshot copies. Enabling snapshots requires reserving 20% or more of the storage volume space for snapshots. Maximum reserved space for snapshots is 40%. Setting this field will effectively set snapshot_enabled to true. */
		reservedSpacePercent: Option[Int] = None
	)
	
	object Network {
		enum TypeEnum extends Enum[TypeEnum] { case TYPE_UNSPECIFIED, CLIENT, PRIVATE }
		enum StateEnum extends Enum[StateEnum] { case STATE_UNSPECIFIED, PROVISIONING, PROVISIONED, DEPROVISIONING, UPDATING }
	}
	case class Network(
	  /** Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}` */
		name: Option[String] = None,
	  /** An identifier for the `Network`, generated by the backend. */
		id: Option[String] = None,
	  /** The type of this network. */
		`type`: Option[Schema.Network.TypeEnum] = None,
	  /** IP address configured. */
		ipAddress: Option[String] = None,
	  /** List of physical interfaces. */
		macAddress: Option[List[String]] = None,
	  /** The Network state. */
		state: Option[Schema.Network.StateEnum] = None,
	  /** The vlan id of the Network. */
		vlanId: Option[String] = None,
	  /** The cidr of the Network. */
		cidr: Option[String] = None,
	  /** The Vrf for the Network. Use this only if a new Vrf needs to be created. */
		vrf: Option[Schema.VRF] = None,
	  /** Optional. The name of a pre-existing Vrf that the network should be attached to. Format is `vrfs/{vrf}`. */
		vrfAttachment: Option[String] = None,
	  /** Labels as key value pairs. */
		labels: Option[Map[String, String]] = None,
	  /** IP range for reserved for services (e.g. NFS). */
		servicesCidr: Option[String] = None,
	  /** List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server. */
		reservations: Option[List[Schema.NetworkAddressReservation]] = None,
	  /** Immutable. Pod name. Pod is an independent part of infrastructure. Network can only be connected to the assets (instances, nfsshares) allocated in the same pod. */
		pod: Option[String] = None,
	  /** Input only. List of mount points to attach the network to. */
		mountPoints: Option[List[Schema.NetworkMountPoint]] = None,
	  /** Whether network uses standard frames or jumbo ones. */
		jumboFramesEnabled: Option[Boolean] = None,
	  /** Output only. Gateway ip address. */
		gatewayIp: Option[String] = None
	)
	
	object VRF {
		enum StateEnum extends Enum[StateEnum] { case STATE_UNSPECIFIED, PROVISIONING, PROVISIONED }
	}
	case class VRF(
	  /** The name of the VRF. */
		name: Option[String] = None,
	  /** The possible state of VRF. */
		state: Option[Schema.VRF.StateEnum] = None,
	  /** The QOS policy applied to this VRF. The value is only meaningful when all the vlan attachments have the same QoS. This field should not be used for new integrations, use vlan attachment level qos instead. The field is left for backward-compatibility. */
		qosPolicy: Option[Schema.QosPolicy] = None,
	  /** The list of VLAN attachments for the VRF. */
		vlanAttachments: Option[List[Schema.VlanAttachment]] = None
	)
	
	case class QosPolicy(
	  /** The bandwidth permitted by the QOS policy, in gbps. */
		bandwidthGbps: Option[BigDecimal] = None
	)
	
	case class VlanAttachment(
	  /** The peer vlan ID of the attachment. */
		peerVlanId: Option[String] = None,
	  /** The peer IP of the attachment. */
		peerIp: Option[String] = None,
	  /** The router IP of the attachment. */
		routerIp: Option[String] = None,
	  /** Input only. Pairing key. */
		pairingKey: Option[String] = None,
	  /** The QOS policy applied to this VLAN attachment. This value should be preferred to using qos at vrf level. */
		qosPolicy: Option[Schema.QosPolicy] = None,
	  /** Immutable. The identifier of the attachment within vrf. */
		id: Option[String] = None,
	  /** Optional. The name of the vlan attachment within vrf. This is of the form projects/{project_number}/regions/{region}/interconnectAttachments/{interconnect_attachment} */
		interconnectAttachment: Option[String] = None
	)
	
	case class NetworkAddressReservation(
	  /** The first address of this reservation block. Must be specified as a single IPv4 address, e.g. 10.1.2.2. */
		startAddress: Option[String] = None,
	  /** The last address of this reservation block, inclusive. I.e., for cases when reservations are only single addresses, end_address and start_address will be the same. Must be specified as a single IPv4 address, e.g. 10.1.2.2. */
		endAddress: Option[String] = None,
	  /** A note about this reservation, intended for human consumption. */
		note: Option[String] = None
	)
	
	case class NetworkMountPoint(
	  /** Instance to attach network to. */
		instance: Option[String] = None,
	  /** Logical interface to detach from. */
		logicalInterface: Option[String] = None,
	  /** Network should be a default gateway. */
		defaultGateway: Option[Boolean] = None,
	  /** Ip address of the server. */
		ipAddress: Option[String] = None
	)
	
	case class GoogleCloudBaremetalsolutionV2LogicalInterface(
	  /** List of logical network interfaces within a logical interface. */
		logicalNetworkInterfaces: Option[List[Schema.LogicalNetworkInterface]] = None,
	  /** Interface name. This is of syntax or and forms part of the network template name. */
		name: Option[String] = None,
	  /** The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated. */
		interfaceIndex: Option[Int] = None
	)
	
	object LogicalNetworkInterface {
		enum NetworkTypeEnum extends Enum[NetworkTypeEnum] { case TYPE_UNSPECIFIED, CLIENT, PRIVATE }
	}
	case class LogicalNetworkInterface(
	  /** Name of the network */
		network: Option[String] = None,
	  /** IP address in the network */
		ipAddress: Option[String] = None,
	  /** Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance. */
		defaultGateway: Option[Boolean] = None,
	  /** Type of network. */
		networkType: Option[Schema.LogicalNetworkInterface.NetworkTypeEnum] = None,
	  /** An identifier for the `Network`, generated by the backend. */
		id: Option[String] = None
	)
	
	case class LoadInstanceAuthInfoResponse(
	  /** Map of username to the user account info. */
		userAccounts: Option[Map[String, Schema.UserAccount]] = None,
	  /** List of ssh keys. */
		sshKeys: Option[List[Schema.SSHKey]] = None
	)
	
	case class UserAccount(
	  /** Encrypted initial password value. */
		encryptedPassword: Option[String] = None,
	  /** KMS CryptoKey Version used to encrypt the password. */
		kmsKeyVersion: Option[String] = None
	)
	
	case class SSHKey(
	  /** Output only. The name of this SSH key. Currently, the only valid value for the location is "global". */
		name: Option[String] = None,
	  /** The public SSH key. This must be in OpenSSH .authorized_keys format. */
		publicKey: Option[String] = None
	)
	
	case class Operation(
	  /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */
		name: Option[String] = None,
	  /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
		metadata: Option[Map[String, JsValue]] = None,
	  /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
		done: Option[Boolean] = None,
	  /** The error result of the operation in case of failure or cancellation. */
		error: Option[Schema.Status] = None,
	  /** The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`. */
		response: Option[Map[String, JsValue]] = None
	)
	
	case class Status(
	  /** The status code, which should be an enum value of google.rpc.Code. */
		code: Option[Int] = None,
	  /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
		message: Option[String] = None,
	  /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
		details: Option[List[Map[String, JsValue]]] = None
	)
	
	case class ReimageInstanceRequest(
	  /** Required. The OS image code of the image which will be used in the reimage operation. */
		osImage: Option[String] = None,
	  /** Optional. Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose. Format is `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`. */
		kmsKeyVersion: Option[String] = None,
	  /** Optional. List of SSH Keys used during reimaging an instance. */
		sshKeys: Option[List[String]] = None
	)
	
	case class EnableHyperthreadingRequest(
	
	)
	
	case class DisableHyperthreadingRequest(
	
	)
	
	case class RenameInstanceRequest(
	  /** Required. The new `id` of the instance. */
		newInstanceId: Option[String] = None
	)
	
	case class ResetInstanceRequest(
	
	)
	
	case class StartInstanceRequest(
	
	)
	
	case class StopInstanceRequest(
	
	)
	
	case class EnableInteractiveSerialConsoleRequest(
	
	)
	
	case class DisableInteractiveSerialConsoleRequest(
	
	)
	
	case class DetachLunRequest(
	  /** Required. Name of the Lun to detach. */
		lun: Option[String] = None,
	  /** If true, performs lun unmapping without instance reboot. */
		skipReboot: Option[Boolean] = None
	)
	
	case class ListSSHKeysResponse(
	  /** The SSH keys registered in the project. */
		sshKeys: Option[List[Schema.SSHKey]] = None,
	  /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: Option[String] = None
	)
	
	case class Empty(
	
	)
	
	case class ListVolumesResponse(
	  /** The list of storage volumes. */
		volumes: Option[List[Schema.Volume]] = None,
	  /** A token identifying a page of results from the server. */
		nextPageToken: Option[String] = None,
	  /** Locations that could not be reached. */
		unreachable: Option[List[String]] = None
	)
	
	case class RenameVolumeRequest(
	  /** Required. The new `id` of the volume. */
		newVolumeId: Option[String] = None
	)
	
	case class EvictVolumeRequest(
	
	)
	
	case class ResizeVolumeRequest(
	  /** New Volume size, in GiB. */
		sizeGib: Option[String] = None
	)
	
	case class ListNetworksResponse(
	  /** The list of networks. */
		networks: Option[List[Schema.Network]] = None,
	  /** A token identifying a page of results from the server. */
		nextPageToken: Option[String] = None,
	  /** Locations that could not be reached. */
		unreachable: Option[List[String]] = None
	)
	
	case class ListNetworkUsageResponse(
	  /** Networks with IPs. */
		networks: Option[List[Schema.NetworkUsage]] = None
	)
	
	case class NetworkUsage(
	  /** Network. */
		network: Option[Schema.Network] = None,
	  /** All used IP addresses in this network. */
		usedIps: Option[List[String]] = None
	)
	
	object VolumeSnapshot {
		enum TypeEnum extends Enum[TypeEnum] { case SNAPSHOT_TYPE_UNSPECIFIED, AD_HOC, SCHEDULED }
	}
	case class VolumeSnapshot(
	  /** The name of the snapshot. */
		name: Option[String] = None,
	  /** Output only. An identifier for the snapshot, generated by the backend. */
		id: Option[String] = None,
	  /** The description of the snapshot. */
		description: Option[String] = None,
	  /** Output only. The creation time of the snapshot. */
		createTime: Option[String] = None,
	  /** Output only. The name of the volume which this snapshot belongs to. */
		storageVolume: Option[String] = None,
	  /** Output only. The type of the snapshot which indicates whether it was scheduled or manual/ad-hoc. */
		`type`: Option[Schema.VolumeSnapshot.TypeEnum] = None
	)
	
	case class RestoreVolumeSnapshotRequest(
	
	)
	
	case class ListVolumeSnapshotsResponse(
	  /** The list of snapshots. */
		volumeSnapshots: Option[List[Schema.VolumeSnapshot]] = None,
	  /** A token identifying a page of results from the server. */
		nextPageToken: Option[String] = None,
	  /** Locations that could not be reached. */
		unreachable: Option[List[String]] = None
	)
	
	case class ListLunsResponse(
	  /** The list of luns. */
		luns: Option[List[Schema.Lun]] = None,
	  /** A token identifying a page of results from the server. */
		nextPageToken: Option[String] = None,
	  /** Locations that could not be reached. */
		unreachable: Option[List[String]] = None
	)
	
	case class EvictLunRequest(
	
	)
	
	object NfsShare {
		enum StateEnum extends Enum[StateEnum] { case STATE_UNSPECIFIED, PROVISIONED, CREATING, UPDATING, DELETING }
		enum StorageTypeEnum extends Enum[StorageTypeEnum] { case STORAGE_TYPE_UNSPECIFIED, SSD, HDD }
	}
	case class NfsShare(
	  /** Immutable. The name of the NFS share. */
		name: Option[String] = None,
	  /** Output only. An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use `id` instead. */
		nfsShareId: Option[String] = None,
	  /** Output only. An identifier for the NFS share, generated by the backend. This is the same value as nfs_share_id and will replace it in the future. */
		id: Option[String] = None,
	  /** Output only. The state of the NFS share. */
		state: Option[Schema.NfsShare.StateEnum] = None,
	  /** Output only. The underlying volume of the share. Created automatically during provisioning. */
		volume: Option[String] = None,
	  /** List of allowed access points. */
		allowedClients: Option[List[Schema.AllowedClient]] = None,
	  /** Labels as key value pairs. */
		labels: Option[Map[String, String]] = None,
	  /** The requested size, in GiB. */
		requestedSizeGib: Option[String] = None,
	  /** Immutable. The storage type of the underlying volume. */
		storageType: Option[Schema.NfsShare.StorageTypeEnum] = None,
	  /** Immutable. Pod name. Pod is an independent part of infrastructure. NFSShare can only be connected to the assets (networks, instances) allocated in the same pod. */
		pod: Option[String] = None
	)
	
	object AllowedClient {
		enum MountPermissionsEnum extends Enum[MountPermissionsEnum] { case MOUNT_PERMISSIONS_UNSPECIFIED, READ, READ_WRITE }
	}
	case class AllowedClient(
	  /** The network the access point sits on. */
		network: Option[String] = None,
	  /** Output only. The IP address of the share on this network. Assigned automatically during provisioning based on the network's services_cidr. */
		shareIp: Option[String] = None,
	  /** The subnet of IP addresses permitted to access the share. */
		allowedClientsCidr: Option[String] = None,
	  /** Mount permissions. */
		mountPermissions: Option[Schema.AllowedClient.MountPermissionsEnum] = None,
	  /** Allow dev flag. Which controls whether to allow creation of devices. */
		allowDev: Option[Boolean] = None,
	  /** Allow the setuid flag. */
		allowSuid: Option[Boolean] = None,
	  /** Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication. */
		noRootSquash: Option[Boolean] = None,
	  /** Output only. The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated ID instead of customer provided name. example like "10.0.0.0:/g123456789-nfs001" */
		nfsPath: Option[String] = None
	)
	
	case class ListNfsSharesResponse(
	  /** The list of NFS shares. */
		nfsShares: Option[List[Schema.NfsShare]] = None,
	  /** A token identifying a page of results from the server. */
		nextPageToken: Option[String] = None,
	  /** Locations that could not be reached. */
		unreachable: Option[List[String]] = None
	)
	
	case class RenameNfsShareRequest(
	  /** Required. The new `id` of the nfsshare. */
		newNfsshareId: Option[String] = None
	)
	
	case class ListProvisioningQuotasResponse(
	  /** The provisioning quotas registered in this project. */
		provisioningQuotas: Option[List[Schema.ProvisioningQuota]] = None,
	  /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: Option[String] = None
	)
	
	object ProvisioningQuota {
		enum AssetTypeEnum extends Enum[AssetTypeEnum] { case ASSET_TYPE_UNSPECIFIED, ASSET_TYPE_SERVER, ASSET_TYPE_STORAGE, ASSET_TYPE_NETWORK }
	}
	case class ProvisioningQuota(
	  /** Output only. The name of the provisioning quota. */
		name: Option[String] = None,
	  /** The asset type of this provisioning quota. */
		assetType: Option[Schema.ProvisioningQuota.AssetTypeEnum] = None,
	  /** The gcp service of the provisioning quota. */
		gcpService: Option[String] = None,
	  /** The specific location of the provisioining quota. */
		location: Option[String] = None,
	  /** The available count of the provisioning quota. */
		availableCount: Option[Int] = None,
	  /** Instance quota. */
		instanceQuota: Option[Schema.InstanceQuota] = None,
	  /** Server count. */
		serverCount: Option[String] = None,
	  /** Network bandwidth, Gbps */
		networkBandwidth: Option[String] = None,
	  /** Storage size (GB). */
		storageGib: Option[String] = None
	)
	
	case class InstanceQuota(
	  /** Output only. The name of the instance quota. */
		name: Option[String] = None,
	  /** Instance type. Deprecated: use gcp_service. */
		instanceType: Option[String] = None,
	  /** The gcp service of the provisioning quota. */
		gcpService: Option[String] = None,
	  /** Location where the quota applies. */
		location: Option[String] = None,
	  /** Number of machines than can be created for the given location and instance_type. */
		availableMachineCount: Option[Int] = None
	)
	
	case class SubmitProvisioningConfigRequest(
	  /** Required. The ProvisioningConfig to create. */
		provisioningConfig: Option[Schema.ProvisioningConfig] = None,
	  /** Optional. Email provided to send a confirmation with provisioning config to. */
		email: Option[String] = None
	)
	
	object ProvisioningConfig {
		enum StateEnum extends Enum[StateEnum] { case STATE_UNSPECIFIED, DRAFT, SUBMITTED, PROVISIONING, PROVISIONED, VALIDATED, CANCELLED, FAILED }
	}
	case class ProvisioningConfig(
	  /** Output only. The system-generated name of the provisioning config. This follows the UUID format. */
		name: Option[String] = None,
	  /** Instances to be created. */
		instances: Option[List[Schema.InstanceConfig]] = None,
	  /** Networks to be created. */
		networks: Option[List[Schema.NetworkConfig]] = None,
	  /** Volumes to be created. */
		volumes: Option[List[Schema.VolumeConfig]] = None,
	  /** A generated ticket id to track provisioning request. */
		ticketId: Option[String] = None,
	  /** A service account to enable customers to access instance credentials upon handover. */
		handoverServiceAccount: Option[String] = None,
	  /** Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages. */
		email: Option[String] = None,
	  /** Output only. State of ProvisioningConfig. */
		state: Option[Schema.ProvisioningConfig.StateEnum] = None,
	  /** Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period. */
		location: Option[String] = None,
	  /** Output only. Last update timestamp. */
		updateTime: Option[String] = None,
	  /** Output only. URI to Cloud Console UI view of this provisioning config. */
		cloudConsoleUri: Option[String] = None,
	  /** If true, VPC SC is enabled for the cluster. */
		vpcScEnabled: Option[Boolean] = None,
	  /** Optional status messages associated with the FAILED state. */
		statusMessage: Option[String] = None,
	  /** Optional. The user-defined identifier of the provisioning config. */
		customId: Option[String] = None,
	  /** Optional. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes, nfsshares) allocated in the same pod only. */
		pod: Option[String] = None
	)
	
	object InstanceConfig {
		enum NetworkConfigEnum extends Enum[NetworkConfigEnum] { case NETWORKCONFIG_UNSPECIFIED, SINGLE_VLAN, MULTI_VLAN }
	}
	case class InstanceConfig(
	  /** The name of the instance config. */
		name: Option[String] = None,
	  /** A transient unique identifier to idenfity an instance within an ProvisioningConfig request. */
		id: Option[String] = None,
	  /** Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations) */
		instanceType: Option[String] = None,
	  /** Whether the instance should be provisioned with Hyperthreading enabled. */
		hyperthreading: Option[Boolean] = None,
	  /** OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations) */
		osImage: Option[String] = None,
	  /** Client network address. Filled if InstanceConfig.multivlan_config is false. */
		clientNetwork: Option[Schema.NetworkAddress] = None,
	  /** Private network address, if any. Filled if InstanceConfig.multivlan_config is false. */
		privateNetwork: Option[Schema.NetworkAddress] = None,
	  /** User note field, it can be used by customers to add additional information for the BMS Ops team . */
		userNote: Option[String] = None,
	  /** If true networks can be from different projects of the same vendor account. */
		accountNetworksEnabled: Option[Boolean] = None,
	  /** The type of network configuration on the instance. */
		networkConfig: Option[Schema.InstanceConfig.NetworkConfigEnum] = None,
	  /** Server network template name. Filled if InstanceConfig.multivlan_config is true. */
		networkTemplate: Option[String] = None,
	  /** List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true. */
		logicalInterfaces: Option[List[Schema.GoogleCloudBaremetalsolutionV2LogicalInterface]] = None,
	  /** Optional. List of names of ssh keys used to provision the instance. */
		sshKeyNames: Option[List[String]] = None,
	  /** Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose. */
		kmsKeyVersion: Option[String] = None
	)
	
	case class NetworkAddress(
	  /** Id of the network to use, within the same ProvisioningConfig request. */
		networkId: Option[String] = None,
	  /** IPv4 address to be assigned to the server. */
		address: Option[String] = None,
	  /** Name of the existing network to use. */
		existingNetworkId: Option[String] = None
	)
	
	object NetworkConfig {
		enum TypeEnum extends Enum[TypeEnum] { case TYPE_UNSPECIFIED, CLIENT, PRIVATE }
		enum BandwidthEnum extends Enum[BandwidthEnum] { case BANDWIDTH_UNSPECIFIED, BW_1_GBPS, BW_2_GBPS, BW_5_GBPS, BW_10_GBPS }
		enum ServiceCidrEnum extends Enum[ServiceCidrEnum] { case SERVICE_CIDR_UNSPECIFIED, DISABLED, HIGH_26, HIGH_27, HIGH_28 }
	}
	case class NetworkConfig(
	  /** Output only. The name of the network config. */
		name: Option[String] = None,
	  /** A transient unique identifier to identify a volume within an ProvisioningConfig request. */
		id: Option[String] = None,
	  /** The type of this network, either Client or Private. */
		`type`: Option[Schema.NetworkConfig.TypeEnum] = None,
	  /** Interconnect bandwidth. Set only when type is CLIENT. */
		bandwidth: Option[Schema.NetworkConfig.BandwidthEnum] = None,
	  /** List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan). Use only one of vlan_attachments or vrf */
		vlanAttachments: Option[List[Schema.IntakeVlanAttachment]] = None,
	  /** Optional. The name of a pre-existing Vrf that the network should be attached to. Format is `vrfs/{vrf}`. If vrf is specified, vlan_attachments must be empty. */
		vrf: Option[String] = None,
	  /** CIDR range of the network. */
		cidr: Option[String] = None,
	  /** Service CIDR, if any. */
		serviceCidr: Option[Schema.NetworkConfig.ServiceCidrEnum] = None,
	  /** User note field, it can be used by customers to add additional information for the BMS Ops team . */
		userNote: Option[String] = None,
	  /** The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning. */
		gcpService: Option[String] = None,
	  /** Whether the VLAN attachment pair is located in the same project. */
		vlanSameProject: Option[Boolean] = None,
	  /** The JumboFramesEnabled option for customer to set. */
		jumboFramesEnabled: Option[Boolean] = None
	)
	
	case class IntakeVlanAttachment(
	  /** Identifier of the VLAN attachment. */
		id: Option[String] = None,
	  /** Attachment pairing key. */
		pairingKey: Option[String] = None
	)
	
	object VolumeConfig {
		enum TypeEnum extends Enum[TypeEnum] { case TYPE_UNSPECIFIED, FLASH, DISK }
		enum ProtocolEnum extends Enum[ProtocolEnum] { case PROTOCOL_UNSPECIFIED, PROTOCOL_FC, PROTOCOL_NFS }
		enum PerformanceTierEnum extends Enum[PerformanceTierEnum] { case VOLUME_PERFORMANCE_TIER_UNSPECIFIED, VOLUME_PERFORMANCE_TIER_SHARED, VOLUME_PERFORMANCE_TIER_ASSIGNED, VOLUME_PERFORMANCE_TIER_HT, VOLUME_PERFORMANCE_TIER_QOS2_PERFORMANCE }
	}
	case class VolumeConfig(
	  /** Output only. The name of the volume config. */
		name: Option[String] = None,
	  /** A transient unique identifier to identify a volume within an ProvisioningConfig request. */
		id: Option[String] = None,
	  /** Whether snapshots should be enabled. */
		snapshotsEnabled: Option[Boolean] = None,
	  /** The type of this Volume. */
		`type`: Option[Schema.VolumeConfig.TypeEnum] = None,
	  /** Volume protocol. */
		protocol: Option[Schema.VolumeConfig.ProtocolEnum] = None,
	  /** The requested size of this volume, in GB. */
		sizeGb: Option[Int] = None,
	  /** LUN ranges to be configured. Set only when protocol is PROTOCOL_FC. */
		lunRanges: Option[List[Schema.LunRange]] = None,
	  /** Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC. */
		machineIds: Option[List[String]] = None,
	  /** NFS exports. Set only when protocol is PROTOCOL_NFS. */
		nfsExports: Option[List[Schema.NfsExport]] = None,
	  /** User note field, it can be used by customers to add additional information for the BMS Ops team . */
		userNote: Option[String] = None,
	  /** The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning. */
		gcpService: Option[String] = None,
	  /** Performance tier of the Volume. Default is SHARED. */
		performanceTier: Option[Schema.VolumeConfig.PerformanceTierEnum] = None
	)
	
	case class LunRange(
	  /** Number of LUNs to create. */
		quantity: Option[Int] = None,
	  /** The requested size of each LUN, in GB. */
		sizeGb: Option[Int] = None
	)
	
	object NfsExport {
		enum PermissionsEnum extends Enum[PermissionsEnum] { case PERMISSIONS_UNSPECIFIED, READ_ONLY, READ_WRITE }
	}
	case class NfsExport(
	  /** Network to use to publish the export. */
		networkId: Option[String] = None,
	  /** Either a single machine, identified by an ID, or a comma-separated list of machine IDs. */
		machineId: Option[String] = None,
	  /** A CIDR range. */
		cidr: Option[String] = None,
	  /** Export permissions. */
		permissions: Option[Schema.NfsExport.PermissionsEnum] = None,
	  /** Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication. */
		noRootSquash: Option[Boolean] = None,
	  /** Allow the setuid flag. */
		allowSuid: Option[Boolean] = None,
	  /** Allow dev flag in NfsShare AllowedClientsRequest. */
		allowDev: Option[Boolean] = None
	)
	
	case class SubmitProvisioningConfigResponse(
	  /** The submitted provisioning config. */
		provisioningConfig: Option[Schema.ProvisioningConfig] = None
	)
	
	case class RenameNetworkRequest(
	  /** Required. The new `id` of the network. */
		newNetworkId: Option[String] = None
	)
	
	case class ListOSImagesResponse(
	  /** The OS images available. */
		osImages: Option[List[Schema.OSImage]] = None,
	  /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
		nextPageToken: Option[String] = None
	)
	
	case class OSImage(
	  /** Output only. OS Image's unique name. */
		name: Option[String] = None,
	  /** OS Image code. */
		code: Option[String] = None,
	  /** OS Image description. */
		description: Option[String] = None,
	  /** Instance types this image is applicable to. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations) */
		applicableInstanceTypes: Option[List[String]] = None,
	  /** Network templates that can be used with this OS Image. */
		supportedNetworkTemplates: Option[List[String]] = None
	)
	
	case class ListLocationsResponse(
	  /** A list of locations that matches the specified filter in the request. */
		locations: Option[List[Schema.Location]] = None,
	  /** The standard List next-page token. */
		nextPageToken: Option[String] = None
	)
	
	case class Location(
	  /** Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"` */
		name: Option[String] = None,
	  /** The canonical id for this location. For example: `"us-east1"`. */
		locationId: Option[String] = None,
	  /** The friendly name for this location, typically a nearby city name. For example, "Tokyo". */
		displayName: Option[String] = None,
	  /** Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} */
		labels: Option[Map[String, String]] = None,
	  /** Service-specific metadata. For example the available capacity at the given location. */
		metadata: Option[Map[String, JsValue]] = None
	)
	
	case class ResetInstanceResponse(
	
	)
	
	case class ServerNetworkTemplate(
	  /** Output only. Template's unique name. The full resource name follows the pattern: `projects/{project}/locations/{location}/serverNetworkTemplate/{server_network_template}` Generally, the {server_network_template} follows the syntax of "bond" or "nic". */
		name: Option[String] = None,
	  /** Instance types this template is applicable to. */
		applicableInstanceTypes: Option[List[String]] = None,
	  /** Logical interfaces. */
		logicalInterfaces: Option[List[Schema.GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface]] = None
	)
	
	object GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface {
		enum TypeEnum extends Enum[TypeEnum] { case INTERFACE_TYPE_UNSPECIFIED, BOND, NIC }
	}
	case class GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface(
	  /** Interface name. This is not a globally unique identifier. Name is unique only inside the ServerNetworkTemplate. This is of syntax or and forms part of the network template name. */
		name: Option[String] = None,
	  /** Interface type. */
		`type`: Option[Schema.GoogleCloudBaremetalsolutionV2ServerNetworkTemplateLogicalInterface.TypeEnum] = None,
	  /** If true, interface must have network connected. */
		required: Option[Boolean] = None
	)
	
	case class StartInstanceResponse(
	
	)
	
	case class StopInstanceResponse(
	
	)
	
	case class EnableInteractiveSerialConsoleResponse(
	
	)
	
	case class DisableInteractiveSerialConsoleResponse(
	
	)
}
