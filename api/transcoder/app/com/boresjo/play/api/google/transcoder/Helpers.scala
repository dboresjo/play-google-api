package com.boresjo.play.api.google.transcoder

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putSchemaJobConfig: Conversion[Schema.JobConfig, Option[Schema.JobConfig]] = (fun: Schema.JobConfig) => Option(fun)
		given putSchemaJobStateEnum: Conversion[Schema.Job.StateEnum, Option[Schema.Job.StateEnum]] = (fun: Schema.Job.StateEnum) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putSchemaJobModeEnum: Conversion[Schema.Job.ModeEnum, Option[Schema.Job.ModeEnum]] = (fun: Schema.Job.ModeEnum) => Option(fun)
		given putSchemaJobOptimizationEnum: Conversion[Schema.Job.OptimizationEnum, Option[Schema.Job.OptimizationEnum]] = (fun: Schema.Job.OptimizationEnum) => Option(fun)
		given putListSchemaInput: Conversion[List[Schema.Input], Option[List[Schema.Input]]] = (fun: List[Schema.Input]) => Option(fun)
		given putListSchemaEditAtom: Conversion[List[Schema.EditAtom], Option[List[Schema.EditAtom]]] = (fun: List[Schema.EditAtom]) => Option(fun)
		given putListSchemaElementaryStream: Conversion[List[Schema.ElementaryStream], Option[List[Schema.ElementaryStream]]] = (fun: List[Schema.ElementaryStream]) => Option(fun)
		given putListSchemaMuxStream: Conversion[List[Schema.MuxStream], Option[List[Schema.MuxStream]]] = (fun: List[Schema.MuxStream]) => Option(fun)
		given putListSchemaManifest: Conversion[List[Schema.Manifest], Option[List[Schema.Manifest]]] = (fun: List[Schema.Manifest]) => Option(fun)
		given putSchemaOutput: Conversion[Schema.Output, Option[Schema.Output]] = (fun: Schema.Output) => Option(fun)
		given putListSchemaAdBreak: Conversion[List[Schema.AdBreak], Option[List[Schema.AdBreak]]] = (fun: List[Schema.AdBreak]) => Option(fun)
		given putSchemaPubsubDestination: Conversion[Schema.PubsubDestination, Option[Schema.PubsubDestination]] = (fun: Schema.PubsubDestination) => Option(fun)
		given putListSchemaSpriteSheet: Conversion[List[Schema.SpriteSheet], Option[List[Schema.SpriteSheet]]] = (fun: List[Schema.SpriteSheet]) => Option(fun)
		given putListSchemaOverlay: Conversion[List[Schema.Overlay], Option[List[Schema.Overlay]]] = (fun: List[Schema.Overlay]) => Option(fun)
		given putListSchemaEncryption: Conversion[List[Schema.Encryption], Option[List[Schema.Encryption]]] = (fun: List[Schema.Encryption]) => Option(fun)
		given putSchemaPreprocessingConfig: Conversion[Schema.PreprocessingConfig, Option[Schema.PreprocessingConfig]] = (fun: Schema.PreprocessingConfig) => Option(fun)
		given putSchemaColor: Conversion[Schema.Color, Option[Schema.Color]] = (fun: Schema.Color) => Option(fun)
		given putSchemaDenoise: Conversion[Schema.Denoise, Option[Schema.Denoise]] = (fun: Schema.Denoise) => Option(fun)
		given putSchemaDeblock: Conversion[Schema.Deblock, Option[Schema.Deblock]] = (fun: Schema.Deblock) => Option(fun)
		given putSchemaAudio: Conversion[Schema.Audio, Option[Schema.Audio]] = (fun: Schema.Audio) => Option(fun)
		given putSchemaCrop: Conversion[Schema.Crop, Option[Schema.Crop]] = (fun: Schema.Crop) => Option(fun)
		given putSchemaPad: Conversion[Schema.Pad, Option[Schema.Pad]] = (fun: Schema.Pad) => Option(fun)
		given putSchemaDeinterlace: Conversion[Schema.Deinterlace, Option[Schema.Deinterlace]] = (fun: Schema.Deinterlace) => Option(fun)
		given putBigDecimal: Conversion[BigDecimal, Option[BigDecimal]] = (fun: BigDecimal) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaYadifConfig: Conversion[Schema.YadifConfig, Option[Schema.YadifConfig]] = (fun: Schema.YadifConfig) => Option(fun)
		given putSchemaBwdifConfig: Conversion[Schema.BwdifConfig, Option[Schema.BwdifConfig]] = (fun: Schema.BwdifConfig) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putSchemaVideoStream: Conversion[Schema.VideoStream, Option[Schema.VideoStream]] = (fun: Schema.VideoStream) => Option(fun)
		given putSchemaAudioStream: Conversion[Schema.AudioStream, Option[Schema.AudioStream]] = (fun: Schema.AudioStream) => Option(fun)
		given putSchemaTextStream: Conversion[Schema.TextStream, Option[Schema.TextStream]] = (fun: Schema.TextStream) => Option(fun)
		given putSchemaH264CodecSettings: Conversion[Schema.H264CodecSettings, Option[Schema.H264CodecSettings]] = (fun: Schema.H264CodecSettings) => Option(fun)
		given putSchemaH265CodecSettings: Conversion[Schema.H265CodecSettings, Option[Schema.H265CodecSettings]] = (fun: Schema.H265CodecSettings) => Option(fun)
		given putSchemaVp9CodecSettings: Conversion[Schema.Vp9CodecSettings, Option[Schema.Vp9CodecSettings]] = (fun: Schema.Vp9CodecSettings) => Option(fun)
		given putSchemaH264CodecSettingsFrameRateConversionStrategyEnum: Conversion[Schema.H264CodecSettings.FrameRateConversionStrategyEnum, Option[Schema.H264CodecSettings.FrameRateConversionStrategyEnum]] = (fun: Schema.H264CodecSettings.FrameRateConversionStrategyEnum) => Option(fun)
		given putSchemaH264ColorFormatSDR: Conversion[Schema.H264ColorFormatSDR, Option[Schema.H264ColorFormatSDR]] = (fun: Schema.H264ColorFormatSDR) => Option(fun)
		given putSchemaH264ColorFormatHLG: Conversion[Schema.H264ColorFormatHLG, Option[Schema.H264ColorFormatHLG]] = (fun: Schema.H264ColorFormatHLG) => Option(fun)
		given putSchemaH265CodecSettingsFrameRateConversionStrategyEnum: Conversion[Schema.H265CodecSettings.FrameRateConversionStrategyEnum, Option[Schema.H265CodecSettings.FrameRateConversionStrategyEnum]] = (fun: Schema.H265CodecSettings.FrameRateConversionStrategyEnum) => Option(fun)
		given putSchemaH265ColorFormatSDR: Conversion[Schema.H265ColorFormatSDR, Option[Schema.H265ColorFormatSDR]] = (fun: Schema.H265ColorFormatSDR) => Option(fun)
		given putSchemaH265ColorFormatHLG: Conversion[Schema.H265ColorFormatHLG, Option[Schema.H265ColorFormatHLG]] = (fun: Schema.H265ColorFormatHLG) => Option(fun)
		given putSchemaH265ColorFormatHDR10: Conversion[Schema.H265ColorFormatHDR10, Option[Schema.H265ColorFormatHDR10]] = (fun: Schema.H265ColorFormatHDR10) => Option(fun)
		given putSchemaVp9CodecSettingsFrameRateConversionStrategyEnum: Conversion[Schema.Vp9CodecSettings.FrameRateConversionStrategyEnum, Option[Schema.Vp9CodecSettings.FrameRateConversionStrategyEnum]] = (fun: Schema.Vp9CodecSettings.FrameRateConversionStrategyEnum) => Option(fun)
		given putSchemaVp9ColorFormatSDR: Conversion[Schema.Vp9ColorFormatSDR, Option[Schema.Vp9ColorFormatSDR]] = (fun: Schema.Vp9ColorFormatSDR) => Option(fun)
		given putSchemaVp9ColorFormatHLG: Conversion[Schema.Vp9ColorFormatHLG, Option[Schema.Vp9ColorFormatHLG]] = (fun: Schema.Vp9ColorFormatHLG) => Option(fun)
		given putListSchemaAudioMapping: Conversion[List[Schema.AudioMapping], Option[List[Schema.AudioMapping]]] = (fun: List[Schema.AudioMapping]) => Option(fun)
		given putListSchemaTextMapping: Conversion[List[Schema.TextMapping], Option[List[Schema.TextMapping]]] = (fun: List[Schema.TextMapping]) => Option(fun)
		given putSchemaSegmentSettings: Conversion[Schema.SegmentSettings, Option[Schema.SegmentSettings]] = (fun: Schema.SegmentSettings) => Option(fun)
		given putSchemaFmp4Config: Conversion[Schema.Fmp4Config, Option[Schema.Fmp4Config]] = (fun: Schema.Fmp4Config) => Option(fun)
		given putSchemaManifestTypeEnum: Conversion[Schema.Manifest.TypeEnum, Option[Schema.Manifest.TypeEnum]] = (fun: Schema.Manifest.TypeEnum) => Option(fun)
		given putSchemaDashConfig: Conversion[Schema.DashConfig, Option[Schema.DashConfig]] = (fun: Schema.DashConfig) => Option(fun)
		given putSchemaDashConfigSegmentReferenceSchemeEnum: Conversion[Schema.DashConfig.SegmentReferenceSchemeEnum, Option[Schema.DashConfig.SegmentReferenceSchemeEnum]] = (fun: Schema.DashConfig.SegmentReferenceSchemeEnum) => Option(fun)
		given putSchemaImage: Conversion[Schema.Image, Option[Schema.Image]] = (fun: Schema.Image) => Option(fun)
		given putListSchemaAnimation: Conversion[List[Schema.Animation], Option[List[Schema.Animation]]] = (fun: List[Schema.Animation]) => Option(fun)
		given putSchemaNormalizedCoordinate: Conversion[Schema.NormalizedCoordinate, Option[Schema.NormalizedCoordinate]] = (fun: Schema.NormalizedCoordinate) => Option(fun)
		given putSchemaAnimationStatic: Conversion[Schema.AnimationStatic, Option[Schema.AnimationStatic]] = (fun: Schema.AnimationStatic) => Option(fun)
		given putSchemaAnimationFade: Conversion[Schema.AnimationFade, Option[Schema.AnimationFade]] = (fun: Schema.AnimationFade) => Option(fun)
		given putSchemaAnimationEnd: Conversion[Schema.AnimationEnd, Option[Schema.AnimationEnd]] = (fun: Schema.AnimationEnd) => Option(fun)
		given putSchemaAnimationFadeFadeTypeEnum: Conversion[Schema.AnimationFade.FadeTypeEnum, Option[Schema.AnimationFade.FadeTypeEnum]] = (fun: Schema.AnimationFade.FadeTypeEnum) => Option(fun)
		given putSchemaAes128Encryption: Conversion[Schema.Aes128Encryption, Option[Schema.Aes128Encryption]] = (fun: Schema.Aes128Encryption) => Option(fun)
		given putSchemaSampleAesEncryption: Conversion[Schema.SampleAesEncryption, Option[Schema.SampleAesEncryption]] = (fun: Schema.SampleAesEncryption) => Option(fun)
		given putSchemaMpegCommonEncryption: Conversion[Schema.MpegCommonEncryption, Option[Schema.MpegCommonEncryption]] = (fun: Schema.MpegCommonEncryption) => Option(fun)
		given putSchemaSecretManagerSource: Conversion[Schema.SecretManagerSource, Option[Schema.SecretManagerSource]] = (fun: Schema.SecretManagerSource) => Option(fun)
		given putSchemaDrmSystems: Conversion[Schema.DrmSystems, Option[Schema.DrmSystems]] = (fun: Schema.DrmSystems) => Option(fun)
		given putSchemaWidevine: Conversion[Schema.Widevine, Option[Schema.Widevine]] = (fun: Schema.Widevine) => Option(fun)
		given putSchemaFairplay: Conversion[Schema.Fairplay, Option[Schema.Fairplay]] = (fun: Schema.Fairplay) => Option(fun)
		given putSchemaPlayready: Conversion[Schema.Playready, Option[Schema.Playready]] = (fun: Schema.Playready) => Option(fun)
		given putSchemaClearkey: Conversion[Schema.Clearkey, Option[Schema.Clearkey]] = (fun: Schema.Clearkey) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putListSchemaJob: Conversion[List[Schema.Job], Option[List[Schema.Job]]] = (fun: List[Schema.Job]) => Option(fun)
		given putListSchemaJobTemplate: Conversion[List[Schema.JobTemplate], Option[List[Schema.JobTemplate]]] = (fun: List[Schema.JobTemplate]) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
