package com.boresjo.play.api.google.networkmanagement

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, AuthToken, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaLocation: Conversion[List[Schema.Location], Option[List[Schema.Location]]] = (fun: List[Schema.Location]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putMapStringJsValue: Conversion[Map[String, JsValue], Option[Map[String, JsValue]]] = (fun: Map[String, JsValue]) => Option(fun)
		given putListSchemaOperation: Conversion[List[Schema.Operation], Option[List[Schema.Operation]]] = (fun: List[Schema.Operation]) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putListSchemaConnectivityTest: Conversion[List[Schema.ConnectivityTest], Option[List[Schema.ConnectivityTest]]] = (fun: List[Schema.ConnectivityTest]) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putSchemaEndpoint: Conversion[Schema.Endpoint, Option[Schema.Endpoint]] = (fun: Schema.Endpoint) => Option(fun)
		given putSchemaReachabilityDetails: Conversion[Schema.ReachabilityDetails, Option[Schema.ReachabilityDetails]] = (fun: Schema.ReachabilityDetails) => Option(fun)
		given putSchemaProbingDetails: Conversion[Schema.ProbingDetails, Option[Schema.ProbingDetails]] = (fun: Schema.ProbingDetails) => Option(fun)
		given putSchemaEndpointForwardingRuleTargetEnum: Conversion[Schema.Endpoint.ForwardingRuleTargetEnum, Option[Schema.Endpoint.ForwardingRuleTargetEnum]] = (fun: Schema.Endpoint.ForwardingRuleTargetEnum) => Option(fun)
		given putSchemaEndpointLoadBalancerTypeEnum: Conversion[Schema.Endpoint.LoadBalancerTypeEnum, Option[Schema.Endpoint.LoadBalancerTypeEnum]] = (fun: Schema.Endpoint.LoadBalancerTypeEnum) => Option(fun)
		given putSchemaCloudFunctionEndpoint: Conversion[Schema.CloudFunctionEndpoint, Option[Schema.CloudFunctionEndpoint]] = (fun: Schema.CloudFunctionEndpoint) => Option(fun)
		given putSchemaAppEngineVersionEndpoint: Conversion[Schema.AppEngineVersionEndpoint, Option[Schema.AppEngineVersionEndpoint]] = (fun: Schema.AppEngineVersionEndpoint) => Option(fun)
		given putSchemaCloudRunRevisionEndpoint: Conversion[Schema.CloudRunRevisionEndpoint, Option[Schema.CloudRunRevisionEndpoint]] = (fun: Schema.CloudRunRevisionEndpoint) => Option(fun)
		given putSchemaEndpointNetworkTypeEnum: Conversion[Schema.Endpoint.NetworkTypeEnum, Option[Schema.Endpoint.NetworkTypeEnum]] = (fun: Schema.Endpoint.NetworkTypeEnum) => Option(fun)
		given putSchemaReachabilityDetailsResultEnum: Conversion[Schema.ReachabilityDetails.ResultEnum, Option[Schema.ReachabilityDetails.ResultEnum]] = (fun: Schema.ReachabilityDetails.ResultEnum) => Option(fun)
		given putListSchemaTrace: Conversion[List[Schema.Trace], Option[List[Schema.Trace]]] = (fun: List[Schema.Trace]) => Option(fun)
		given putSchemaEndpointInfo: Conversion[Schema.EndpointInfo, Option[Schema.EndpointInfo]] = (fun: Schema.EndpointInfo) => Option(fun)
		given putListSchemaStep: Conversion[List[Schema.Step], Option[List[Schema.Step]]] = (fun: List[Schema.Step]) => Option(fun)
		given putSchemaStepStateEnum: Conversion[Schema.Step.StateEnum, Option[Schema.Step.StateEnum]] = (fun: Schema.Step.StateEnum) => Option(fun)
		given putSchemaInstanceInfo: Conversion[Schema.InstanceInfo, Option[Schema.InstanceInfo]] = (fun: Schema.InstanceInfo) => Option(fun)
		given putSchemaFirewallInfo: Conversion[Schema.FirewallInfo, Option[Schema.FirewallInfo]] = (fun: Schema.FirewallInfo) => Option(fun)
		given putSchemaRouteInfo: Conversion[Schema.RouteInfo, Option[Schema.RouteInfo]] = (fun: Schema.RouteInfo) => Option(fun)
		given putSchemaGoogleServiceInfo: Conversion[Schema.GoogleServiceInfo, Option[Schema.GoogleServiceInfo]] = (fun: Schema.GoogleServiceInfo) => Option(fun)
		given putSchemaForwardingRuleInfo: Conversion[Schema.ForwardingRuleInfo, Option[Schema.ForwardingRuleInfo]] = (fun: Schema.ForwardingRuleInfo) => Option(fun)
		given putSchemaVpnGatewayInfo: Conversion[Schema.VpnGatewayInfo, Option[Schema.VpnGatewayInfo]] = (fun: Schema.VpnGatewayInfo) => Option(fun)
		given putSchemaVpnTunnelInfo: Conversion[Schema.VpnTunnelInfo, Option[Schema.VpnTunnelInfo]] = (fun: Schema.VpnTunnelInfo) => Option(fun)
		given putSchemaVpcConnectorInfo: Conversion[Schema.VpcConnectorInfo, Option[Schema.VpcConnectorInfo]] = (fun: Schema.VpcConnectorInfo) => Option(fun)
		given putSchemaDeliverInfo: Conversion[Schema.DeliverInfo, Option[Schema.DeliverInfo]] = (fun: Schema.DeliverInfo) => Option(fun)
		given putSchemaForwardInfo: Conversion[Schema.ForwardInfo, Option[Schema.ForwardInfo]] = (fun: Schema.ForwardInfo) => Option(fun)
		given putSchemaAbortInfo: Conversion[Schema.AbortInfo, Option[Schema.AbortInfo]] = (fun: Schema.AbortInfo) => Option(fun)
		given putSchemaDropInfo: Conversion[Schema.DropInfo, Option[Schema.DropInfo]] = (fun: Schema.DropInfo) => Option(fun)
		given putSchemaLoadBalancerInfo: Conversion[Schema.LoadBalancerInfo, Option[Schema.LoadBalancerInfo]] = (fun: Schema.LoadBalancerInfo) => Option(fun)
		given putSchemaNetworkInfo: Conversion[Schema.NetworkInfo, Option[Schema.NetworkInfo]] = (fun: Schema.NetworkInfo) => Option(fun)
		given putSchemaGKEMasterInfo: Conversion[Schema.GKEMasterInfo, Option[Schema.GKEMasterInfo]] = (fun: Schema.GKEMasterInfo) => Option(fun)
		given putSchemaCloudSQLInstanceInfo: Conversion[Schema.CloudSQLInstanceInfo, Option[Schema.CloudSQLInstanceInfo]] = (fun: Schema.CloudSQLInstanceInfo) => Option(fun)
		given putSchemaRedisInstanceInfo: Conversion[Schema.RedisInstanceInfo, Option[Schema.RedisInstanceInfo]] = (fun: Schema.RedisInstanceInfo) => Option(fun)
		given putSchemaRedisClusterInfo: Conversion[Schema.RedisClusterInfo, Option[Schema.RedisClusterInfo]] = (fun: Schema.RedisClusterInfo) => Option(fun)
		given putSchemaCloudFunctionInfo: Conversion[Schema.CloudFunctionInfo, Option[Schema.CloudFunctionInfo]] = (fun: Schema.CloudFunctionInfo) => Option(fun)
		given putSchemaAppEngineVersionInfo: Conversion[Schema.AppEngineVersionInfo, Option[Schema.AppEngineVersionInfo]] = (fun: Schema.AppEngineVersionInfo) => Option(fun)
		given putSchemaCloudRunRevisionInfo: Conversion[Schema.CloudRunRevisionInfo, Option[Schema.CloudRunRevisionInfo]] = (fun: Schema.CloudRunRevisionInfo) => Option(fun)
		given putSchemaNatInfo: Conversion[Schema.NatInfo, Option[Schema.NatInfo]] = (fun: Schema.NatInfo) => Option(fun)
		given putSchemaProxyConnectionInfo: Conversion[Schema.ProxyConnectionInfo, Option[Schema.ProxyConnectionInfo]] = (fun: Schema.ProxyConnectionInfo) => Option(fun)
		given putSchemaLoadBalancerBackendInfo: Conversion[Schema.LoadBalancerBackendInfo, Option[Schema.LoadBalancerBackendInfo]] = (fun: Schema.LoadBalancerBackendInfo) => Option(fun)
		given putSchemaStorageBucketInfo: Conversion[Schema.StorageBucketInfo, Option[Schema.StorageBucketInfo]] = (fun: Schema.StorageBucketInfo) => Option(fun)
		given putSchemaServerlessNegInfo: Conversion[Schema.ServerlessNegInfo, Option[Schema.ServerlessNegInfo]] = (fun: Schema.ServerlessNegInfo) => Option(fun)
		given putSchemaFirewallInfoFirewallRuleTypeEnum: Conversion[Schema.FirewallInfo.FirewallRuleTypeEnum, Option[Schema.FirewallInfo.FirewallRuleTypeEnum]] = (fun: Schema.FirewallInfo.FirewallRuleTypeEnum) => Option(fun)
		given putSchemaRouteInfoRouteTypeEnum: Conversion[Schema.RouteInfo.RouteTypeEnum, Option[Schema.RouteInfo.RouteTypeEnum]] = (fun: Schema.RouteInfo.RouteTypeEnum) => Option(fun)
		given putSchemaRouteInfoNextHopTypeEnum: Conversion[Schema.RouteInfo.NextHopTypeEnum, Option[Schema.RouteInfo.NextHopTypeEnum]] = (fun: Schema.RouteInfo.NextHopTypeEnum) => Option(fun)
		given putSchemaRouteInfoRouteScopeEnum: Conversion[Schema.RouteInfo.RouteScopeEnum, Option[Schema.RouteInfo.RouteScopeEnum]] = (fun: Schema.RouteInfo.RouteScopeEnum) => Option(fun)
		given putSchemaGoogleServiceInfoGoogleServiceTypeEnum: Conversion[Schema.GoogleServiceInfo.GoogleServiceTypeEnum, Option[Schema.GoogleServiceInfo.GoogleServiceTypeEnum]] = (fun: Schema.GoogleServiceInfo.GoogleServiceTypeEnum) => Option(fun)
		given putSchemaVpnTunnelInfoRoutingTypeEnum: Conversion[Schema.VpnTunnelInfo.RoutingTypeEnum, Option[Schema.VpnTunnelInfo.RoutingTypeEnum]] = (fun: Schema.VpnTunnelInfo.RoutingTypeEnum) => Option(fun)
		given putSchemaDeliverInfoTargetEnum: Conversion[Schema.DeliverInfo.TargetEnum, Option[Schema.DeliverInfo.TargetEnum]] = (fun: Schema.DeliverInfo.TargetEnum) => Option(fun)
		given putSchemaForwardInfoTargetEnum: Conversion[Schema.ForwardInfo.TargetEnum, Option[Schema.ForwardInfo.TargetEnum]] = (fun: Schema.ForwardInfo.TargetEnum) => Option(fun)
		given putSchemaAbortInfoCauseEnum: Conversion[Schema.AbortInfo.CauseEnum, Option[Schema.AbortInfo.CauseEnum]] = (fun: Schema.AbortInfo.CauseEnum) => Option(fun)
		given putSchemaDropInfoCauseEnum: Conversion[Schema.DropInfo.CauseEnum, Option[Schema.DropInfo.CauseEnum]] = (fun: Schema.DropInfo.CauseEnum) => Option(fun)
		given putSchemaLoadBalancerInfoLoadBalancerTypeEnum: Conversion[Schema.LoadBalancerInfo.LoadBalancerTypeEnum, Option[Schema.LoadBalancerInfo.LoadBalancerTypeEnum]] = (fun: Schema.LoadBalancerInfo.LoadBalancerTypeEnum) => Option(fun)
		given putListSchemaLoadBalancerBackend: Conversion[List[Schema.LoadBalancerBackend], Option[List[Schema.LoadBalancerBackend]]] = (fun: List[Schema.LoadBalancerBackend]) => Option(fun)
		given putSchemaLoadBalancerInfoBackendTypeEnum: Conversion[Schema.LoadBalancerInfo.BackendTypeEnum, Option[Schema.LoadBalancerInfo.BackendTypeEnum]] = (fun: Schema.LoadBalancerInfo.BackendTypeEnum) => Option(fun)
		given putSchemaLoadBalancerBackendHealthCheckFirewallStateEnum: Conversion[Schema.LoadBalancerBackend.HealthCheckFirewallStateEnum, Option[Schema.LoadBalancerBackend.HealthCheckFirewallStateEnum]] = (fun: Schema.LoadBalancerBackend.HealthCheckFirewallStateEnum) => Option(fun)
		given putSchemaNatInfoTypeEnum: Conversion[Schema.NatInfo.TypeEnum, Option[Schema.NatInfo.TypeEnum]] = (fun: Schema.NatInfo.TypeEnum) => Option(fun)
		given putSchemaLoadBalancerBackendInfoHealthCheckFirewallsConfigStateEnum: Conversion[Schema.LoadBalancerBackendInfo.HealthCheckFirewallsConfigStateEnum, Option[Schema.LoadBalancerBackendInfo.HealthCheckFirewallsConfigStateEnum]] = (fun: Schema.LoadBalancerBackendInfo.HealthCheckFirewallsConfigStateEnum) => Option(fun)
		given putSchemaProbingDetailsResultEnum: Conversion[Schema.ProbingDetails.ResultEnum, Option[Schema.ProbingDetails.ResultEnum]] = (fun: Schema.ProbingDetails.ResultEnum) => Option(fun)
		given putSchemaProbingDetailsAbortCauseEnum: Conversion[Schema.ProbingDetails.AbortCauseEnum, Option[Schema.ProbingDetails.AbortCauseEnum]] = (fun: Schema.ProbingDetails.AbortCauseEnum) => Option(fun)
		given putSchemaLatencyDistribution: Conversion[Schema.LatencyDistribution, Option[Schema.LatencyDistribution]] = (fun: Schema.LatencyDistribution) => Option(fun)
		given putSchemaEdgeLocation: Conversion[Schema.EdgeLocation, Option[Schema.EdgeLocation]] = (fun: Schema.EdgeLocation) => Option(fun)
		given putListSchemaLatencyPercentile: Conversion[List[Schema.LatencyPercentile], Option[List[Schema.LatencyPercentile]]] = (fun: List[Schema.LatencyPercentile]) => Option(fun)
		given putSchemaPolicy: Conversion[Schema.Policy, Option[Schema.Policy]] = (fun: Schema.Policy) => Option(fun)
		given putListSchemaBinding: Conversion[List[Schema.Binding], Option[List[Schema.Binding]]] = (fun: List[Schema.Binding]) => Option(fun)
		given putListSchemaAuditConfig: Conversion[List[Schema.AuditConfig], Option[List[Schema.AuditConfig]]] = (fun: List[Schema.AuditConfig]) => Option(fun)
		given putSchemaExpr: Conversion[Schema.Expr, Option[Schema.Expr]] = (fun: Schema.Expr) => Option(fun)
		given putListSchemaAuditLogConfig: Conversion[List[Schema.AuditLogConfig], Option[List[Schema.AuditLogConfig]]] = (fun: List[Schema.AuditLogConfig]) => Option(fun)
		given putSchemaAuditLogConfigLogTypeEnum: Conversion[Schema.AuditLogConfig.LogTypeEnum, Option[Schema.AuditLogConfig.LogTypeEnum]] = (fun: Schema.AuditLogConfig.LogTypeEnum) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
