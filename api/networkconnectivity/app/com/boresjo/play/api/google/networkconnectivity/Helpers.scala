package com.boresjo.play.api.google.networkconnectivity

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaGoogleLongrunningOperation: Conversion[List[Schema.GoogleLongrunningOperation], Option[List[Schema.GoogleLongrunningOperation]]] = (fun: List[Schema.GoogleLongrunningOperation]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putMapStringJsValue: Conversion[Map[String, JsValue], Option[Map[String, JsValue]]] = (fun: Map[String, JsValue]) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaGoogleRpcStatus: Conversion[Schema.GoogleRpcStatus, Option[Schema.GoogleRpcStatus]] = (fun: Schema.GoogleRpcStatus) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putListSchemaServiceConnectionMap: Conversion[List[Schema.ServiceConnectionMap], Option[List[Schema.ServiceConnectionMap]]] = (fun: List[Schema.ServiceConnectionMap]) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putSchemaServiceConnectionMapInfrastructureEnum: Conversion[Schema.ServiceConnectionMap.InfrastructureEnum, Option[Schema.ServiceConnectionMap.InfrastructureEnum]] = (fun: Schema.ServiceConnectionMap.InfrastructureEnum) => Option(fun)
		given putListSchemaProducerPscConfig: Conversion[List[Schema.ProducerPscConfig], Option[List[Schema.ProducerPscConfig]]] = (fun: List[Schema.ProducerPscConfig]) => Option(fun)
		given putListSchemaConsumerPscConfig: Conversion[List[Schema.ConsumerPscConfig], Option[List[Schema.ConsumerPscConfig]]] = (fun: List[Schema.ConsumerPscConfig]) => Option(fun)
		given putListSchemaConsumerPscConnection: Conversion[List[Schema.ConsumerPscConnection], Option[List[Schema.ConsumerPscConnection]]] = (fun: List[Schema.ConsumerPscConnection]) => Option(fun)
		given putSchemaConsumerPscConfigStateEnum: Conversion[Schema.ConsumerPscConfig.StateEnum, Option[Schema.ConsumerPscConfig.StateEnum]] = (fun: Schema.ConsumerPscConfig.StateEnum) => Option(fun)
		given putSchemaConsumerPscConfigIpVersionEnum: Conversion[Schema.ConsumerPscConfig.IpVersionEnum, Option[Schema.ConsumerPscConfig.IpVersionEnum]] = (fun: Schema.ConsumerPscConfig.IpVersionEnum) => Option(fun)
		given putSchemaConsumerPscConnectionStateEnum: Conversion[Schema.ConsumerPscConnection.StateEnum, Option[Schema.ConsumerPscConnection.StateEnum]] = (fun: Schema.ConsumerPscConnection.StateEnum) => Option(fun)
		given putSchemaConsumerPscConnectionErrorTypeEnum: Conversion[Schema.ConsumerPscConnection.ErrorTypeEnum, Option[Schema.ConsumerPscConnection.ErrorTypeEnum]] = (fun: Schema.ConsumerPscConnection.ErrorTypeEnum) => Option(fun)
		given putSchemaGoogleRpcErrorInfo: Conversion[Schema.GoogleRpcErrorInfo, Option[Schema.GoogleRpcErrorInfo]] = (fun: Schema.GoogleRpcErrorInfo) => Option(fun)
		given putSchemaConsumerPscConnectionIpVersionEnum: Conversion[Schema.ConsumerPscConnection.IpVersionEnum, Option[Schema.ConsumerPscConnection.IpVersionEnum]] = (fun: Schema.ConsumerPscConnection.IpVersionEnum) => Option(fun)
		given putListSchemaServiceConnectionPolicy: Conversion[List[Schema.ServiceConnectionPolicy], Option[List[Schema.ServiceConnectionPolicy]]] = (fun: List[Schema.ServiceConnectionPolicy]) => Option(fun)
		given putSchemaServiceConnectionPolicyInfrastructureEnum: Conversion[Schema.ServiceConnectionPolicy.InfrastructureEnum, Option[Schema.ServiceConnectionPolicy.InfrastructureEnum]] = (fun: Schema.ServiceConnectionPolicy.InfrastructureEnum) => Option(fun)
		given putSchemaPscConfig: Conversion[Schema.PscConfig, Option[Schema.PscConfig]] = (fun: Schema.PscConfig) => Option(fun)
		given putListSchemaPscConnection: Conversion[List[Schema.PscConnection], Option[List[Schema.PscConnection]]] = (fun: List[Schema.PscConnection]) => Option(fun)
		given putSchemaPscConfigProducerInstanceLocationEnum: Conversion[Schema.PscConfig.ProducerInstanceLocationEnum, Option[Schema.PscConfig.ProducerInstanceLocationEnum]] = (fun: Schema.PscConfig.ProducerInstanceLocationEnum) => Option(fun)
		given putSchemaPscConnectionStateEnum: Conversion[Schema.PscConnection.StateEnum, Option[Schema.PscConnection.StateEnum]] = (fun: Schema.PscConnection.StateEnum) => Option(fun)
		given putSchemaPscConnectionErrorTypeEnum: Conversion[Schema.PscConnection.ErrorTypeEnum, Option[Schema.PscConnection.ErrorTypeEnum]] = (fun: Schema.PscConnection.ErrorTypeEnum) => Option(fun)
		given putSchemaPscConnectionIpVersionEnum: Conversion[Schema.PscConnection.IpVersionEnum, Option[Schema.PscConnection.IpVersionEnum]] = (fun: Schema.PscConnection.IpVersionEnum) => Option(fun)
		given putListSchemaServiceClass: Conversion[List[Schema.ServiceClass], Option[List[Schema.ServiceClass]]] = (fun: List[Schema.ServiceClass]) => Option(fun)
		given putListSchemaServiceConnectionToken: Conversion[List[Schema.ServiceConnectionToken], Option[List[Schema.ServiceConnectionToken]]] = (fun: List[Schema.ServiceConnectionToken]) => Option(fun)
		given putListSchemaHub: Conversion[List[Schema.Hub], Option[List[Schema.Hub]]] = (fun: List[Schema.Hub]) => Option(fun)
		given putSchemaHubStateEnum: Conversion[Schema.Hub.StateEnum, Option[Schema.Hub.StateEnum]] = (fun: Schema.Hub.StateEnum) => Option(fun)
		given putListSchemaRoutingVPC: Conversion[List[Schema.RoutingVPC], Option[List[Schema.RoutingVPC]]] = (fun: List[Schema.RoutingVPC]) => Option(fun)
		given putSchemaSpokeSummary: Conversion[Schema.SpokeSummary, Option[Schema.SpokeSummary]] = (fun: Schema.SpokeSummary) => Option(fun)
		given putSchemaHubPolicyModeEnum: Conversion[Schema.Hub.PolicyModeEnum, Option[Schema.Hub.PolicyModeEnum]] = (fun: Schema.Hub.PolicyModeEnum) => Option(fun)
		given putSchemaHubPresetTopologyEnum: Conversion[Schema.Hub.PresetTopologyEnum, Option[Schema.Hub.PresetTopologyEnum]] = (fun: Schema.Hub.PresetTopologyEnum) => Option(fun)
		given putListSchemaSpokeTypeCount: Conversion[List[Schema.SpokeTypeCount], Option[List[Schema.SpokeTypeCount]]] = (fun: List[Schema.SpokeTypeCount]) => Option(fun)
		given putListSchemaSpokeStateCount: Conversion[List[Schema.SpokeStateCount], Option[List[Schema.SpokeStateCount]]] = (fun: List[Schema.SpokeStateCount]) => Option(fun)
		given putListSchemaSpokeStateReasonCount: Conversion[List[Schema.SpokeStateReasonCount], Option[List[Schema.SpokeStateReasonCount]]] = (fun: List[Schema.SpokeStateReasonCount]) => Option(fun)
		given putSchemaSpokeTypeCountSpokeTypeEnum: Conversion[Schema.SpokeTypeCount.SpokeTypeEnum, Option[Schema.SpokeTypeCount.SpokeTypeEnum]] = (fun: Schema.SpokeTypeCount.SpokeTypeEnum) => Option(fun)
		given putSchemaSpokeStateCountStateEnum: Conversion[Schema.SpokeStateCount.StateEnum, Option[Schema.SpokeStateCount.StateEnum]] = (fun: Schema.SpokeStateCount.StateEnum) => Option(fun)
		given putSchemaSpokeStateReasonCountStateReasonCodeEnum: Conversion[Schema.SpokeStateReasonCount.StateReasonCodeEnum, Option[Schema.SpokeStateReasonCount.StateReasonCodeEnum]] = (fun: Schema.SpokeStateReasonCount.StateReasonCodeEnum) => Option(fun)
		given putListSchemaSpoke: Conversion[List[Schema.Spoke], Option[List[Schema.Spoke]]] = (fun: List[Schema.Spoke]) => Option(fun)
		given putSchemaLinkedVpnTunnels: Conversion[Schema.LinkedVpnTunnels, Option[Schema.LinkedVpnTunnels]] = (fun: Schema.LinkedVpnTunnels) => Option(fun)
		given putSchemaLinkedInterconnectAttachments: Conversion[Schema.LinkedInterconnectAttachments, Option[Schema.LinkedInterconnectAttachments]] = (fun: Schema.LinkedInterconnectAttachments) => Option(fun)
		given putSchemaLinkedRouterApplianceInstances: Conversion[Schema.LinkedRouterApplianceInstances, Option[Schema.LinkedRouterApplianceInstances]] = (fun: Schema.LinkedRouterApplianceInstances) => Option(fun)
		given putSchemaLinkedVpcNetwork: Conversion[Schema.LinkedVpcNetwork, Option[Schema.LinkedVpcNetwork]] = (fun: Schema.LinkedVpcNetwork) => Option(fun)
		given putSchemaLinkedProducerVpcNetwork: Conversion[Schema.LinkedProducerVpcNetwork, Option[Schema.LinkedProducerVpcNetwork]] = (fun: Schema.LinkedProducerVpcNetwork) => Option(fun)
		given putSchemaSpokeStateEnum: Conversion[Schema.Spoke.StateEnum, Option[Schema.Spoke.StateEnum]] = (fun: Schema.Spoke.StateEnum) => Option(fun)
		given putListSchemaStateReason: Conversion[List[Schema.StateReason], Option[List[Schema.StateReason]]] = (fun: List[Schema.StateReason]) => Option(fun)
		given putSchemaSpokeSpokeTypeEnum: Conversion[Schema.Spoke.SpokeTypeEnum, Option[Schema.Spoke.SpokeTypeEnum]] = (fun: Schema.Spoke.SpokeTypeEnum) => Option(fun)
		given putListSchemaRouterApplianceInstance: Conversion[List[Schema.RouterApplianceInstance], Option[List[Schema.RouterApplianceInstance]]] = (fun: List[Schema.RouterApplianceInstance]) => Option(fun)
		given putSchemaStateReasonCodeEnum: Conversion[Schema.StateReason.CodeEnum, Option[Schema.StateReason.CodeEnum]] = (fun: Schema.StateReason.CodeEnum) => Option(fun)
		given putListSchemaHubStatusEntry: Conversion[List[Schema.HubStatusEntry], Option[List[Schema.HubStatusEntry]]] = (fun: List[Schema.HubStatusEntry]) => Option(fun)
		given putSchemaPscPropagationStatus: Conversion[Schema.PscPropagationStatus, Option[Schema.PscPropagationStatus]] = (fun: Schema.PscPropagationStatus) => Option(fun)
		given putSchemaPscPropagationStatusCodeEnum: Conversion[Schema.PscPropagationStatus.CodeEnum, Option[Schema.PscPropagationStatus.CodeEnum]] = (fun: Schema.PscPropagationStatus.CodeEnum) => Option(fun)
		given putSchemaRouteTableStateEnum: Conversion[Schema.RouteTable.StateEnum, Option[Schema.RouteTable.StateEnum]] = (fun: Schema.RouteTable.StateEnum) => Option(fun)
		given putSchemaRouteTypeEnum: Conversion[Schema.Route.TypeEnum, Option[Schema.Route.TypeEnum]] = (fun: Schema.Route.TypeEnum) => Option(fun)
		given putSchemaNextHopVpcNetwork: Conversion[Schema.NextHopVpcNetwork, Option[Schema.NextHopVpcNetwork]] = (fun: Schema.NextHopVpcNetwork) => Option(fun)
		given putSchemaRouteStateEnum: Conversion[Schema.Route.StateEnum, Option[Schema.Route.StateEnum]] = (fun: Schema.Route.StateEnum) => Option(fun)
		given putSchemaNextHopVPNTunnel: Conversion[Schema.NextHopVPNTunnel, Option[Schema.NextHopVPNTunnel]] = (fun: Schema.NextHopVPNTunnel) => Option(fun)
		given putSchemaNextHopRouterApplianceInstance: Conversion[Schema.NextHopRouterApplianceInstance, Option[Schema.NextHopRouterApplianceInstance]] = (fun: Schema.NextHopRouterApplianceInstance) => Option(fun)
		given putSchemaNextHopInterconnectAttachment: Conversion[Schema.NextHopInterconnectAttachment, Option[Schema.NextHopInterconnectAttachment]] = (fun: Schema.NextHopInterconnectAttachment) => Option(fun)
		given putListSchemaRoute: Conversion[List[Schema.Route], Option[List[Schema.Route]]] = (fun: List[Schema.Route]) => Option(fun)
		given putListSchemaRouteTable: Conversion[List[Schema.RouteTable], Option[List[Schema.RouteTable]]] = (fun: List[Schema.RouteTable]) => Option(fun)
		given putSchemaGroupStateEnum: Conversion[Schema.Group.StateEnum, Option[Schema.Group.StateEnum]] = (fun: Schema.Group.StateEnum) => Option(fun)
		given putSchemaAutoAccept: Conversion[Schema.AutoAccept, Option[Schema.AutoAccept]] = (fun: Schema.AutoAccept) => Option(fun)
		given putListSchemaGroup: Conversion[List[Schema.Group], Option[List[Schema.Group]]] = (fun: List[Schema.Group]) => Option(fun)
		given putListSchemaInternalRange: Conversion[List[Schema.InternalRange], Option[List[Schema.InternalRange]]] = (fun: List[Schema.InternalRange]) => Option(fun)
		given putSchemaInternalRangeUsageEnum: Conversion[Schema.InternalRange.UsageEnum, Option[Schema.InternalRange.UsageEnum]] = (fun: Schema.InternalRange.UsageEnum) => Option(fun)
		given putSchemaInternalRangePeeringEnum: Conversion[Schema.InternalRange.PeeringEnum, Option[Schema.InternalRange.PeeringEnum]] = (fun: Schema.InternalRange.PeeringEnum) => Option(fun)
		given putListSchemaInternalRangeOverlapsEnum: Conversion[List[Schema.InternalRange.OverlapsEnum], Option[List[Schema.InternalRange.OverlapsEnum]]] = (fun: List[Schema.InternalRange.OverlapsEnum]) => Option(fun)
		given putSchemaMigration: Conversion[Schema.Migration, Option[Schema.Migration]] = (fun: Schema.Migration) => Option(fun)
		given putListSchemaPolicyBasedRoute: Conversion[List[Schema.PolicyBasedRoute], Option[List[Schema.PolicyBasedRoute]]] = (fun: List[Schema.PolicyBasedRoute]) => Option(fun)
		given putSchemaVirtualMachine: Conversion[Schema.VirtualMachine, Option[Schema.VirtualMachine]] = (fun: Schema.VirtualMachine) => Option(fun)
		given putSchemaInterconnectAttachment: Conversion[Schema.InterconnectAttachment, Option[Schema.InterconnectAttachment]] = (fun: Schema.InterconnectAttachment) => Option(fun)
		given putSchemaPolicyBasedRouteNextHopOtherRoutesEnum: Conversion[Schema.PolicyBasedRoute.NextHopOtherRoutesEnum, Option[Schema.PolicyBasedRoute.NextHopOtherRoutesEnum]] = (fun: Schema.PolicyBasedRoute.NextHopOtherRoutesEnum) => Option(fun)
		given putSchemaFilter: Conversion[Schema.Filter, Option[Schema.Filter]] = (fun: Schema.Filter) => Option(fun)
		given putListSchemaWarnings: Conversion[List[Schema.Warnings], Option[List[Schema.Warnings]]] = (fun: List[Schema.Warnings]) => Option(fun)
		given putSchemaFilterProtocolVersionEnum: Conversion[Schema.Filter.ProtocolVersionEnum, Option[Schema.Filter.ProtocolVersionEnum]] = (fun: Schema.Filter.ProtocolVersionEnum) => Option(fun)
		given putSchemaWarningsCodeEnum: Conversion[Schema.Warnings.CodeEnum, Option[Schema.Warnings.CodeEnum]] = (fun: Schema.Warnings.CodeEnum) => Option(fun)
		given putListSchemaRegionalEndpoint: Conversion[List[Schema.RegionalEndpoint], Option[List[Schema.RegionalEndpoint]]] = (fun: List[Schema.RegionalEndpoint]) => Option(fun)
		given putSchemaRegionalEndpointAccessTypeEnum: Conversion[Schema.RegionalEndpoint.AccessTypeEnum, Option[Schema.RegionalEndpoint.AccessTypeEnum]] = (fun: Schema.RegionalEndpoint.AccessTypeEnum) => Option(fun)
		given putListSchemaLocation: Conversion[List[Schema.Location], Option[List[Schema.Location]]] = (fun: List[Schema.Location]) => Option(fun)
		given putSchemaPolicy: Conversion[Schema.Policy, Option[Schema.Policy]] = (fun: Schema.Policy) => Option(fun)
		given putListSchemaBinding: Conversion[List[Schema.Binding], Option[List[Schema.Binding]]] = (fun: List[Schema.Binding]) => Option(fun)
		given putListSchemaAuditConfig: Conversion[List[Schema.AuditConfig], Option[List[Schema.AuditConfig]]] = (fun: List[Schema.AuditConfig]) => Option(fun)
		given putSchemaExpr: Conversion[Schema.Expr, Option[Schema.Expr]] = (fun: Schema.Expr) => Option(fun)
		given putListSchemaAuditLogConfig: Conversion[List[Schema.AuditLogConfig], Option[List[Schema.AuditLogConfig]]] = (fun: List[Schema.AuditLogConfig]) => Option(fun)
		given putSchemaAuditLogConfigLogTypeEnum: Conversion[Schema.AuditLogConfig.LogTypeEnum, Option[Schema.AuditLogConfig.LogTypeEnum]] = (fun: Schema.AuditLogConfig.LogTypeEnum) => Option(fun)
		given putListSchemaLocationMetadataLocationFeaturesEnum: Conversion[List[Schema.LocationMetadata.LocationFeaturesEnum], Option[List[Schema.LocationMetadata.LocationFeaturesEnum]]] = (fun: List[Schema.LocationMetadata.LocationFeaturesEnum]) => Option(fun)
		given putSchemaSpoke: Conversion[Schema.Spoke, Option[Schema.Spoke]] = (fun: Schema.Spoke) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
