package com.boresjo.play.api.google.vault

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Schema {
	case class ListOperationsResponse(
	  /** A list of operations that matches the specified filter in the request. */
		operations: Option[List[Schema.Operation]] = None,
	  /** The standard List next-page token. */
		nextPageToken: Option[String] = None
	)
	
	case class Operation(
	  /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */
		name: Option[String] = None,
	  /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
		metadata: Option[Map[String, JsValue]] = None,
	  /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
		done: Option[Boolean] = None,
	  /** The error result of the operation in case of failure or cancellation. */
		error: Option[Schema.Status] = None,
	  /** The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`. */
		response: Option[Map[String, JsValue]] = None
	)
	
	case class Status(
	  /** The status code, which should be an enum value of google.rpc.Code. */
		code: Option[Int] = None,
	  /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
		message: Option[String] = None,
	  /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
		details: Option[List[Map[String, JsValue]]] = None
	)
	
	case class Empty(
	
	)
	
	case class CancelOperationRequest(
	
	)
	
	object Matter {
		enum StateEnum extends Enum[StateEnum] { case STATE_UNSPECIFIED, OPEN, CLOSED, DELETED }
		enum MatterRegionEnum extends Enum[MatterRegionEnum] { case MATTER_REGION_UNSPECIFIED, ANY, US, EUROPE }
	}
	case class Matter(
	  /** The matter ID, which is generated by the server. Leave blank when creating a matter. */
		matterId: Option[String] = None,
	  /** The name of the matter. */
		name: Option[String] = None,
	  /** An optional description for the matter. */
		description: Option[String] = None,
	  /** The state of the matter. */
		state: Option[Schema.Matter.StateEnum] = None,
	  /** Lists the users and their permission for the matter. Currently there is no programmer defined limit on the number of permissions a matter can have. */
		matterPermissions: Option[List[Schema.MatterPermission]] = None,
	  /** Optional. The requested data region for the matter. */
		matterRegion: Option[Schema.Matter.MatterRegionEnum] = None
	)
	
	object MatterPermission {
		enum RoleEnum extends Enum[RoleEnum] { case ROLE_UNSPECIFIED, COLLABORATOR, OWNER }
	}
	case class MatterPermission(
	  /** The user's role for the matter. */
		role: Option[Schema.MatterPermission.RoleEnum] = None,
	  /** The account ID, as provided by the [Admin SDK](https://developers.google.com/admin-sdk/). */
		accountId: Option[String] = None
	)
	
	case class CloseMatterRequest(
	
	)
	
	case class CloseMatterResponse(
	  /** The updated matter, with state &#42;&#42;CLOSED&#42;&#42;. */
		matter: Option[Schema.Matter] = None
	)
	
	case class ReopenMatterRequest(
	
	)
	
	case class ReopenMatterResponse(
	  /** The updated matter, with state &#42;&#42;OPEN&#42;&#42;. */
		matter: Option[Schema.Matter] = None
	)
	
	case class UndeleteMatterRequest(
	
	)
	
	case class ListMattersResponse(
	  /** List of matters. */
		matters: Option[List[Schema.Matter]] = None,
	  /** Page token to retrieve the next page of results in the list. */
		nextPageToken: Option[String] = None
	)
	
	case class AddMatterPermissionsRequest(
	  /** The account and its role to add. */
		matterPermission: Option[Schema.MatterPermission] = None,
	  /** To send a notification email to the added account, set to &#42;&#42;true&#42;&#42;. To not send a notification email, set to &#42;&#42;false&#42;&#42;. */
		sendEmails: Option[Boolean] = None,
	  /** Only relevant if &#42;&#42;sendEmails&#42;&#42; is &#42;&#42;true&#42;&#42;. To CC the requestor in the email message, set to &#42;&#42;true&#42;&#42;. To not CC requestor, set to &#42;&#42;false&#42;&#42;. */
		ccMe: Option[Boolean] = None
	)
	
	case class RemoveMatterPermissionsRequest(
	  /** The account ID. */
		accountId: Option[String] = None
	)
	
	object CountArtifactsRequest {
		enum ViewEnum extends Enum[ViewEnum] { case COUNT_RESULT_VIEW_UNSPECIFIED, TOTAL_COUNT, ALL }
	}
	case class CountArtifactsRequest(
	  /** The search query. */
		query: Option[Schema.Query] = None,
	  /** Sets the granularity of the count results. */
		view: Option[Schema.CountArtifactsRequest.ViewEnum] = None
	)
	
	object Query {
		enum CorpusEnum extends Enum[CorpusEnum] { case CORPUS_TYPE_UNSPECIFIED, DRIVE, MAIL, GROUPS, HANGOUTS_CHAT, VOICE, CALENDAR }
		enum DataScopeEnum extends Enum[DataScopeEnum] { case DATA_SCOPE_UNSPECIFIED, ALL_DATA, HELD_DATA, UNPROCESSED_DATA }
		enum SearchMethodEnum extends Enum[SearchMethodEnum] { case SEARCH_METHOD_UNSPECIFIED, ACCOUNT, ORG_UNIT, TEAM_DRIVE, ENTIRE_ORG, ROOM, SITES_URL, SHARED_DRIVE }
		enum MethodEnum extends Enum[MethodEnum] { case SEARCH_METHOD_UNSPECIFIED, ACCOUNT, ORG_UNIT, TEAM_DRIVE, ENTIRE_ORG, ROOM, SITES_URL, SHARED_DRIVE }
	}
	case class Query(
	  /** The Google Workspace service to search. */
		corpus: Option[Schema.Query.CorpusEnum] = None,
	  /** The data source to search. */
		dataScope: Option[Schema.Query.DataScopeEnum] = None,
	  /** The search method to use. */
		searchMethod: Option[Schema.Query.SearchMethodEnum] = None,
	  /** The entity to search. This field replaces &#42;&#42;searchMethod&#42;&#42; to support shared drives. When &#42;&#42;searchMethod&#42;&#42; is &#42;&#42;TEAM_DRIVE&#42;&#42;, the response of this field is &#42;&#42;SHARED_DRIVE&#42;&#42;. */
		method: Option[Schema.Query.MethodEnum] = None,
	  /** Service-specific [search operators](https://support.google.com/vault/answer/2474474) to filter search results. */
		terms: Option[String] = None,
	  /** The start time for the search query. Specify in GMT. The value is rounded to 12 AM on the specified date. */
		startTime: Option[String] = None,
	  /** The end time for the search query. Specify in GMT. The value is rounded to 12 AM on the specified date. */
		endTime: Option[String] = None,
	  /** Required when &#42;&#42;SearchMethod&#42;&#42; is &#42;&#42;ACCOUNT&#42;&#42;. */
		accountInfo: Option[Schema.AccountInfo] = None,
	  /** Required when &#42;&#42;SearchMethod&#42;&#42; is &#42;&#42;ORG_UNIT&#42;&#42;. */
		orgUnitInfo: Option[Schema.OrgUnitInfo] = None,
	  /** Required when &#42;&#42;SearchMethod&#42;&#42; is &#42;&#42;SHARED_DRIVE&#42;&#42;. */
		sharedDriveInfo: Option[Schema.SharedDriveInfo] = None,
	  /** Required when &#42;&#42;SearchMethod&#42;&#42; is &#42;&#42;ROOM&#42;&#42;. (read-only) */
		hangoutsChatInfo: Option[Schema.HangoutsChatInfo] = None,
	  /** Required when &#42;&#42;SearchMethod&#42;&#42; is &#42;&#42;SITES_URL&#42;&#42;. */
		sitesUrlInfo: Option[Schema.SitesUrlInfo] = None,
	  /** Required when &#42;&#42;SearchMethod&#42;&#42; is &#42;&#42;TEAM_DRIVE&#42;&#42;. */
		teamDriveInfo: Option[Schema.TeamDriveInfo] = None,
	  /** Set Gmail search-specific options. */
		mailOptions: Option[Schema.MailOptions] = None,
	  /** Set Drive search-specific options. */
		driveOptions: Option[Schema.DriveOptions] = None,
	  /** Set Chat search-specific options. (read-only) */
		hangoutsChatOptions: Option[Schema.HangoutsChatOptions] = None,
	  /** Set Voice search-specific options. */
		voiceOptions: Option[Schema.VoiceOptions] = None,
	  /** Set Calendar search-specific options. */
		calendarOptions: Option[Schema.CalendarOptions] = None,
	  /** The time zone name. It should be an IANA TZ name, such as "America/Los_Angeles". For a list of time zone names, see [Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For more information about how Vault uses time zones, see [the Vault help center](https://support.google.com/vault/answer/6092995#time). */
		timeZone: Option[String] = None
	)
	
	case class AccountInfo(
	  /** A set of accounts to search. */
		emails: Option[List[String]] = None
	)
	
	case class OrgUnitInfo(
	  /** The name of the organizational unit to search, as provided by the [Admin SDK Directory API](https://developers.google.com/admin-sdk/directory/). */
		orgUnitId: Option[String] = None
	)
	
	case class SharedDriveInfo(
	  /** A list of shared drive IDs, as provided by the [Drive API](https://developers.google.com/drive). */
		sharedDriveIds: Option[List[String]] = None
	)
	
	case class HangoutsChatInfo(
	  /** A list of Chat spaces IDs, as provided by the [Chat API](https://developers.google.com/chat). There is a limit of exporting from 500 Chat spaces per request. */
		roomId: Option[List[String]] = None
	)
	
	case class SitesUrlInfo(
	  /** A list of published site URLs. */
		urls: Option[List[String]] = None
	)
	
	case class TeamDriveInfo(
	  /** List of Team Drive IDs, as provided by the [Drive API](https://developers.google.com/drive). */
		teamDriveIds: Option[List[String]] = None
	)
	
	object MailOptions {
		enum ClientSideEncryptedOptionEnum extends Enum[ClientSideEncryptedOptionEnum] { case CLIENT_SIDE_ENCRYPTED_OPTION_UNSPECIFIED, CLIENT_SIDE_ENCRYPTED_OPTION_ANY, CLIENT_SIDE_ENCRYPTED_OPTION_ENCRYPTED, CLIENT_SIDE_ENCRYPTED_OPTION_UNENCRYPTED }
	}
	case class MailOptions(
	  /** Set to &#42;&#42;true&#42;&#42; to exclude drafts. */
		excludeDrafts: Option[Boolean] = None,
	  /** Specifies whether the results should include encrypted content, unencrypted content, or both. Defaults to including both. */
		clientSideEncryptedOption: Option[Schema.MailOptions.ClientSideEncryptedOptionEnum] = None
	)
	
	object DriveOptions {
		enum ClientSideEncryptedOptionEnum extends Enum[ClientSideEncryptedOptionEnum] { case CLIENT_SIDE_ENCRYPTED_OPTION_UNSPECIFIED, CLIENT_SIDE_ENCRYPTED_OPTION_ANY, CLIENT_SIDE_ENCRYPTED_OPTION_ENCRYPTED, CLIENT_SIDE_ENCRYPTED_OPTION_UNENCRYPTED }
	}
	case class DriveOptions(
	  /** Search the current version of the Drive file, but export the contents of the last version saved before 12:00 AM UTC on the specified date. Enter the date in UTC. */
		versionDate: Option[String] = None,
	  /** Set to true to include Team Drive. */
		includeTeamDrives: Option[Boolean] = None,
	  /** Set to &#42;&#42;true&#42;&#42; to include shared drives. */
		includeSharedDrives: Option[Boolean] = None,
	  /** Set whether the results include only content encrypted with [Google Workspace Client-side encryption](https://support.google.com/a?p=cse_ov) content, only unencrypted content, or both. Defaults to both. Currently supported for Drive. */
		clientSideEncryptedOption: Option[Schema.DriveOptions.ClientSideEncryptedOptionEnum] = None
	)
	
	case class HangoutsChatOptions(
	  /** For searches by account or organizational unit, set to &#42;&#42;true&#42;&#42; to include rooms. */
		includeRooms: Option[Boolean] = None
	)
	
	object VoiceOptions {
		enum CoveredDataEnum extends Enum[CoveredDataEnum] { case COVERED_DATA_UNSPECIFIED, TEXT_MESSAGES, VOICEMAILS, CALL_LOGS }
	}
	case class VoiceOptions(
	  /** Datatypes to search */
		coveredData: Option[List[Schema.VoiceOptions.CoveredDataEnum]] = None
	)
	
	object CalendarOptions {
		enum ResponseStatusesEnum extends Enum[ResponseStatusesEnum] { case ATTENDEE_RESPONSE_UNSPECIFIED, ATTENDEE_RESPONSE_NEEDS_ACTION, ATTENDEE_RESPONSE_ACCEPTED, ATTENDEE_RESPONSE_DECLINED, ATTENDEE_RESPONSE_TENTATIVE }
	}
	case class CalendarOptions(
	  /** Matches only those events whose location contains all of the words in the given set. If the string contains quoted phrases, this method only matches those events whose location contain the exact phrase. Entries in the set are considered in "and". Word splitting example: ["New Zealand"] vs ["New","Zealand"] "New Zealand": matched by both "New and better Zealand": only matched by the later */
		locationQuery: Option[List[String]] = None,
	  /** Matches only those events whose attendees contain all of the words in the given set. Entries in the set are considered in "and". */
		peopleQuery: Option[List[String]] = None,
	  /** Matches only those events that do not contain any of the words in the given set in title, description, location, or attendees. Entries in the set are considered in "or". */
		minusWords: Option[List[String]] = None,
	  /** Matches only events for which the custodian gave one of these responses. If the set is empty or contains ATTENDEE_RESPONSE_UNSPECIFIED there will be no filtering on responses. */
		responseStatuses: Option[List[Schema.CalendarOptions.ResponseStatusesEnum]] = None,
	  /** Search the current version of the Calendar event, but export the contents of the last version saved before 12:00 AM UTC on the specified date. Enter the date in UTC. */
		versionDate: Option[String] = None
	)
	
	object Export {
		enum StatusEnum extends Enum[StatusEnum] { case EXPORT_STATUS_UNSPECIFIED, COMPLETED, FAILED, IN_PROGRESS }
	}
	case class Export(
	  /** Output only. The generated export ID. */
		id: Option[String] = None,
	  /** Output only. The matter ID. */
		matterId: Option[String] = None,
	  /** Output only. Identifies the parent export that spawned this child export. This is only set on child exports. */
		parentExportId: Option[String] = None,
	  /** The export name. Don't use special characters (~!$'(),;@:/?) in the name, they can prevent you from downloading exports. */
		name: Option[String] = None,
	  /** Output only. The requester of the export. */
		requester: Option[Schema.UserInfo] = None,
	  /** The query parameters used to create the export. */
		query: Option[Schema.Query] = None,
	  /** Additional export options. */
		exportOptions: Option[Schema.ExportOptions] = None,
	  /** Output only. The time when the export was created. */
		createTime: Option[String] = None,
	  /** Output only. The status of the export. */
		status: Option[Schema.Export.StatusEnum] = None,
	  /** Output only. Details about the export progress and size. */
		stats: Option[Schema.ExportStats] = None,
	  /** Output only. The sink for export files in Cloud Storage. */
		cloudStorageSink: Option[Schema.CloudStorageSink] = None
	)
	
	case class UserInfo(
	  /** The email address of the user. */
		email: Option[String] = None,
	  /** The displayed name of the user. */
		displayName: Option[String] = None
	)
	
	object ExportOptions {
		enum RegionEnum extends Enum[RegionEnum] { case EXPORT_REGION_UNSPECIFIED, ANY, US, EUROPE }
	}
	case class ExportOptions(
	  /** Options for Gmail exports. */
		mailOptions: Option[Schema.MailExportOptions] = None,
	  /** Options for Groups exports. */
		groupsOptions: Option[Schema.GroupsExportOptions] = None,
	  /** Options for Drive exports. */
		driveOptions: Option[Schema.DriveExportOptions] = None,
	  /** Options for Chat exports. */
		hangoutsChatOptions: Option[Schema.HangoutsChatExportOptions] = None,
	  /** Options for Voice exports. */
		voiceOptions: Option[Schema.VoiceExportOptions] = None,
	  /** Option available for Calendar export. */
		calendarOptions: Option[Schema.CalendarExportOptions] = None,
	  /** The requested data region for the export. */
		region: Option[Schema.ExportOptions.RegionEnum] = None
	)
	
	object MailExportOptions {
		enum ExportFormatEnum extends Enum[ExportFormatEnum] { case EXPORT_FORMAT_UNSPECIFIED, MBOX, PST, ICS }
	}
	case class MailExportOptions(
	  /** The file format for exported messages. */
		exportFormat: Option[Schema.MailExportOptions.ExportFormatEnum] = None,
	  /** To export confidential mode content, set to &#42;&#42;true&#42;&#42;. */
		showConfidentialModeContent: Option[Boolean] = None,
	  /** To use the new export system, set to &#42;&#42;true&#42;&#42;. */
		useNewExport: Option[Boolean] = None,
	  /** Optional. To enable exporting linked Drive files, set to &#42;&#42;true&#42;&#42;. */
		exportLinkedDriveFiles: Option[Boolean] = None
	)
	
	object GroupsExportOptions {
		enum ExportFormatEnum extends Enum[ExportFormatEnum] { case EXPORT_FORMAT_UNSPECIFIED, MBOX, PST, ICS }
	}
	case class GroupsExportOptions(
	  /** The file format for exported messages. */
		exportFormat: Option[Schema.GroupsExportOptions.ExportFormatEnum] = None
	)
	
	case class DriveExportOptions(
	  /** To include access level information for users with [indirect access](https://support.google.com/vault/answer/6099459#metadata) to files, set to &#42;&#42;true&#42;&#42;. */
		includeAccessInfo: Option[Boolean] = None
	)
	
	object HangoutsChatExportOptions {
		enum ExportFormatEnum extends Enum[ExportFormatEnum] { case EXPORT_FORMAT_UNSPECIFIED, MBOX, PST, ICS }
	}
	case class HangoutsChatExportOptions(
	  /** The file format for exported messages. */
		exportFormat: Option[Schema.HangoutsChatExportOptions.ExportFormatEnum] = None
	)
	
	object VoiceExportOptions {
		enum ExportFormatEnum extends Enum[ExportFormatEnum] { case EXPORT_FORMAT_UNSPECIFIED, MBOX, PST, ICS }
	}
	case class VoiceExportOptions(
	  /** The file format for exported text messages. */
		exportFormat: Option[Schema.VoiceExportOptions.ExportFormatEnum] = None
	)
	
	object CalendarExportOptions {
		enum ExportFormatEnum extends Enum[ExportFormatEnum] { case EXPORT_FORMAT_UNSPECIFIED, MBOX, PST, ICS }
	}
	case class CalendarExportOptions(
	  /** The file format for exported text messages. */
		exportFormat: Option[Schema.CalendarExportOptions.ExportFormatEnum] = None
	)
	
	case class ExportStats(
	  /** The number of messages or files already processed for export. */
		exportedArtifactCount: Option[String] = None,
	  /** The number of messages or files to be exported. */
		totalArtifactCount: Option[String] = None,
	  /** The size of export in bytes. */
		sizeInBytes: Option[String] = None
	)
	
	case class CloudStorageSink(
	  /** Output only. The exported files in Cloud Storage. */
		files: Option[List[Schema.CloudStorageFile]] = None
	)
	
	case class CloudStorageFile(
	  /** The name of the Cloud Storage bucket for the export file. You can use this value in the Cloud Storage [JSON API](https://cloud.google.com/storage/docs/json_api) or [XML API](https://cloud.google.com/storage/docs/xml-api), but not to list the bucket contents. Instead, you can [get individual export files](https://cloud.google.com/storage/docs/json_api/v1/objects/get) by object name. */
		bucketName: Option[String] = None,
	  /** The name of the Cloud Storage object for the export file. You can use this value in the Cloud Storage [JSON API](https://cloud.google.com/storage/docs/json_api) or [XML API](https://cloud.google.com/storage/docs/xml-api). */
		objectName: Option[String] = None,
	  /** The export file size. */
		size: Option[String] = None,
	  /** The md5 hash of the file. */
		md5Hash: Option[String] = None
	)
	
	case class ListExportsResponse(
	  /** The list of exports. */
		exports: Option[List[Schema.Export]] = None,
	  /** Page token to retrieve the next page of results in the list. */
		nextPageToken: Option[String] = None
	)
	
	object Hold {
		enum CorpusEnum extends Enum[CorpusEnum] { case CORPUS_TYPE_UNSPECIFIED, DRIVE, MAIL, GROUPS, HANGOUTS_CHAT, VOICE, CALENDAR }
	}
	case class Hold(
	  /** The unique immutable ID of the hold. Assigned during creation. */
		holdId: Option[String] = None,
	  /** The name of the hold. */
		name: Option[String] = None,
	  /** The last time this hold was modified. */
		updateTime: Option[String] = None,
	  /** If set, the hold applies to the specified accounts and &#42;&#42;orgUnit&#42;&#42; must be empty. */
		accounts: Option[List[Schema.HeldAccount]] = None,
	  /** If set, the hold applies to all members of the organizational unit and &#42;&#42;accounts&#42;&#42; must be empty. This property is mutable. For Groups holds, set &#42;&#42;accounts&#42;&#42;. */
		orgUnit: Option[Schema.HeldOrgUnit] = None,
	  /** The service to be searched. */
		corpus: Option[Schema.Hold.CorpusEnum] = None,
	  /** Service-specific options. If set, &#42;&#42;CorpusQuery&#42;&#42; must match &#42;&#42;CorpusType&#42;&#42;. */
		query: Option[Schema.CorpusQuery] = None
	)
	
	case class HeldAccount(
	  /** The account ID, as provided by the [Admin SDK](https://developers.google.com/admin-sdk/). */
		accountId: Option[String] = None,
	  /** Output only. When the account was put on hold. */
		holdTime: Option[String] = None,
	  /** The primary email address of the account. If used as an input, this takes precedence over &#42;&#42;accountId&#42;&#42;. */
		email: Option[String] = None,
	  /** Output only. The first name of the account holder. */
		firstName: Option[String] = None,
	  /** Output only. The last name of the account holder. */
		lastName: Option[String] = None
	)
	
	case class HeldOrgUnit(
	  /** The organizational unit's immutable ID as provided by the [Admin SDK](https://developers.google.com/admin-sdk/). */
		orgUnitId: Option[String] = None,
	  /** When the organizational unit was put on hold. This property is immutable. */
		holdTime: Option[String] = None
	)
	
	case class CorpusQuery(
	  /** Service-specific options for Drive holds. If set, &#42;&#42;CorpusType&#42;&#42; must be &#42;&#42;DRIVE&#42;&#42;. */
		driveQuery: Option[Schema.HeldDriveQuery] = None,
	  /** Service-specific options for Gmail holds. If set, &#42;&#42;CorpusType&#42;&#42; must be &#42;&#42;MAIL&#42;&#42;. */
		mailQuery: Option[Schema.HeldMailQuery] = None,
	  /** Service-specific options for Groups holds. If set, &#42;&#42;CorpusType&#42;&#42; must be &#42;&#42;GROUPS&#42;&#42;. */
		groupsQuery: Option[Schema.HeldGroupsQuery] = None,
	  /** Service-specific options for Chat holds. If set, &#42;&#42;CorpusType&#42;&#42; must be &#42;&#42;HANGOUTS_CHAT&#42;&#42;. */
		hangoutsChatQuery: Option[Schema.HeldHangoutsChatQuery] = None,
	  /** Service-specific options for Voice holds. If set, &#42;&#42;CorpusType&#42;&#42; must be &#42;&#42;VOICE&#42;&#42;. */
		voiceQuery: Option[Schema.HeldVoiceQuery] = None,
	  /** Service-specific options for Calendar holds. If set, &#42;&#42;CorpusType&#42;&#42; must be &#42;&#42;CALENDAR&#42;&#42;. */
		calendarQuery: Option[Schema.HeldCalendarQuery] = None
	)
	
	case class HeldDriveQuery(
	  /** To include files in Team Drives in the hold, set to &#42;&#42;true&#42;&#42;. */
		includeTeamDriveFiles: Option[Boolean] = None,
	  /** To include files in shared drives in the hold, set to &#42;&#42;true&#42;&#42;. */
		includeSharedDriveFiles: Option[Boolean] = None
	)
	
	case class HeldMailQuery(
	  /** The [search operators](https://support.google.com/vault/answer/2474474) used to refine the messages covered by the hold. */
		terms: Option[String] = None,
	  /** The start time for the query. Specify in GMT. The value is rounded to 12 AM on the specified date. */
		startTime: Option[String] = None,
	  /** The end time for the query. Specify in GMT. The value is rounded to 12 AM on the specified date. */
		endTime: Option[String] = None
	)
	
	case class HeldGroupsQuery(
	  /** The [search operators](https://support.google.com/vault/answer/2474474) used to refine the messages covered by the hold. */
		terms: Option[String] = None,
	  /** The start time for the query. Specify in GMT. The value is rounded to 12 AM on the specified date. */
		startTime: Option[String] = None,
	  /** The end time for the query. Specify in GMT. The value is rounded to 12 AM on the specified date. */
		endTime: Option[String] = None
	)
	
	case class HeldHangoutsChatQuery(
	  /** To include messages in Chat spaces the user was a member of, set to &#42;&#42;true&#42;&#42;. */
		includeRooms: Option[Boolean] = None
	)
	
	object HeldVoiceQuery {
		enum CoveredDataEnum extends Enum[CoveredDataEnum] { case COVERED_DATA_UNSPECIFIED, TEXT_MESSAGES, VOICEMAILS, CALL_LOGS }
	}
	case class HeldVoiceQuery(
	  /** A list of data types covered by the hold. Should be non-empty. Order does not matter and duplicates are ignored. */
		coveredData: Option[List[Schema.HeldVoiceQuery.CoveredDataEnum]] = None
	)
	
	case class HeldCalendarQuery(
	
	)
	
	case class ListHoldsResponse(
	  /** The list of holds. */
		holds: Option[List[Schema.Hold]] = None,
	  /** Page token to retrieve the next page of results in the list. If this is empty, then there are no more holds to list. */
		nextPageToken: Option[String] = None
	)
	
	case class AddHeldAccountsRequest(
	  /** A comma-separated list of the emails of the accounts to add to the hold. Specify either &#42;&#42;emails&#42;&#42; or &#42;&#42;account_ids&#42;&#42;, but not both. */
		emails: Option[List[String]] = None,
	  /** A comma-separated list of the account IDs of the accounts to add to the hold. Specify either &#42;&#42;emails&#42;&#42; or &#42;&#42;account_ids&#42;&#42;, but not both. */
		accountIds: Option[List[String]] = None
	)
	
	case class AddHeldAccountsResponse(
	  /** The list of responses, in the same order as the batch request. */
		responses: Option[List[Schema.AddHeldAccountResult]] = None
	)
	
	case class AddHeldAccountResult(
	  /** Returned when the account was successfully created. */
		account: Option[Schema.HeldAccount] = None,
	  /** Reports the request status. If it failed, returns an error message. */
		status: Option[Schema.Status] = None
	)
	
	case class RemoveHeldAccountsRequest(
	  /** The account IDs of the accounts to remove from the hold. */
		accountIds: Option[List[String]] = None
	)
	
	case class RemoveHeldAccountsResponse(
	  /** A list of statuses for the deleted accounts. Results have the same order as the request. */
		statuses: Option[List[Schema.Status]] = None
	)
	
	case class ListHeldAccountsResponse(
	  /** The held accounts on a hold. */
		accounts: Option[List[Schema.HeldAccount]] = None
	)
	
	case class SavedQuery(
	  /** A unique identifier for the saved query. */
		savedQueryId: Option[String] = None,
	  /** The name of the saved query. */
		displayName: Option[String] = None,
	  /** The search parameters of the saved query. */
		query: Option[Schema.Query] = None,
	  /** Output only. The matter ID of the matter the saved query is saved in. The server does not use this field during create and always uses matter ID in the URL. */
		matterId: Option[String] = None,
	  /** Output only. The server-generated timestamp when the saved query was created. */
		createTime: Option[String] = None
	)
	
	case class ListSavedQueriesResponse(
	  /** List of saved queries. */
		savedQueries: Option[List[Schema.SavedQuery]] = None,
	  /** Page token to retrieve the next page of results in the list. If this is empty, then there are no more saved queries to list. */
		nextPageToken: Option[String] = None
	)
	
	case class CountArtifactsResponse(
	  /** Total count of messages. */
		totalCount: Option[String] = None,
	  /** Count metrics for Gmail and classic Hangouts. */
		mailCountResult: Option[Schema.MailCountResult] = None,
	  /** Count metrics for Groups. */
		groupsCountResult: Option[Schema.GroupsCountResult] = None
	)
	
	case class MailCountResult(
	  /** Total number of accounts involved in this count operation. */
		queriedAccountsCount: Option[String] = None,
	  /** Total number of accounts that can be queried and have more than zero messages. */
		matchingAccountsCount: Option[String] = None,
	  /** When &#42;&#42;DataScope&#42;&#42; is &#42;&#42;HELD_DATA&#42;&#42; and when account emails are passed in explicitly, the list of accounts in the request that are not queried because they are not on hold in the matter. For other data scopes, this field is not set. */
		nonQueryableAccounts: Option[List[String]] = None,
	  /** Errors occurred when querying these accounts. */
		accountCountErrors: Option[List[Schema.AccountCountError]] = None,
	  /** Subtotal count per matching account that have more than zero messages. */
		accountCounts: Option[List[Schema.AccountCount]] = None
	)
	
	object AccountCountError {
		enum ErrorTypeEnum extends Enum[ErrorTypeEnum] { case ERROR_TYPE_UNSPECIFIED, WILDCARD_TOO_BROAD, TOO_MANY_TERMS, LOCATION_UNAVAILABLE, UNKNOWN, DEADLINE_EXCEEDED }
	}
	case class AccountCountError(
	  /** Account owner. */
		account: Option[Schema.UserInfo] = None,
	  /** Account query error. */
		errorType: Option[Schema.AccountCountError.ErrorTypeEnum] = None
	)
	
	case class AccountCount(
	  /** Account owner. */
		account: Option[Schema.UserInfo] = None,
	  /** The number of results (messages or files) found for this account. */
		count: Option[String] = None
	)
	
	case class GroupsCountResult(
	  /** Total number of accounts involved in this count operation. */
		queriedAccountsCount: Option[String] = None,
	  /** Total number of accounts that can be queried and have more than zero messages. */
		matchingAccountsCount: Option[String] = None,
	  /** When &#42;&#42;DataScope&#42;&#42; is &#42;&#42;HELD_DATA&#42;&#42;, these accounts in the request are not queried because they are not on hold. For other data scope, this field is not set. */
		nonQueryableAccounts: Option[List[String]] = None,
	  /** Error occurred when querying these accounts. */
		accountCountErrors: Option[List[Schema.AccountCountError]] = None,
	  /** Subtotal count per matching account that have more than zero messages. */
		accountCounts: Option[List[Schema.AccountCount]] = None
	)
	
	case class CountArtifactsMetadata(
	  /** Creation time of count operation. */
		startTime: Option[String] = None,
	  /** End time of count operation. Available when operation is done. */
		endTime: Option[String] = None,
	  /** The matter ID of the associated matter. */
		matterId: Option[String] = None,
	  /** The search query from the request. */
		query: Option[Schema.Query] = None
	)
}
