package com.boresjo.play.api.google.testing

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, AuthToken, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putSchemaClientInfo: Conversion[Schema.ClientInfo, Option[Schema.ClientInfo]] = (fun: Schema.ClientInfo) => Option(fun)
		given putSchemaTestSpecification: Conversion[Schema.TestSpecification, Option[Schema.TestSpecification]] = (fun: Schema.TestSpecification) => Option(fun)
		given putSchemaEnvironmentMatrix: Conversion[Schema.EnvironmentMatrix, Option[Schema.EnvironmentMatrix]] = (fun: Schema.EnvironmentMatrix) => Option(fun)
		given putListSchemaTestExecution: Conversion[List[Schema.TestExecution], Option[List[Schema.TestExecution]]] = (fun: List[Schema.TestExecution]) => Option(fun)
		given putSchemaResultStorage: Conversion[Schema.ResultStorage, Option[Schema.ResultStorage]] = (fun: Schema.ResultStorage) => Option(fun)
		given putSchemaTestMatrixStateEnum: Conversion[Schema.TestMatrix.StateEnum, Option[Schema.TestMatrix.StateEnum]] = (fun: Schema.TestMatrix.StateEnum) => Option(fun)
		given putSchemaTestMatrixInvalidMatrixDetailsEnum: Conversion[Schema.TestMatrix.InvalidMatrixDetailsEnum, Option[Schema.TestMatrix.InvalidMatrixDetailsEnum]] = (fun: Schema.TestMatrix.InvalidMatrixDetailsEnum) => Option(fun)
		given putListSchemaMatrixErrorDetail: Conversion[List[Schema.MatrixErrorDetail], Option[List[Schema.MatrixErrorDetail]]] = (fun: List[Schema.MatrixErrorDetail]) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putSchemaTestMatrixOutcomeSummaryEnum: Conversion[Schema.TestMatrix.OutcomeSummaryEnum, Option[Schema.TestMatrix.OutcomeSummaryEnum]] = (fun: Schema.TestMatrix.OutcomeSummaryEnum) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putListSchemaClientInfoDetail: Conversion[List[Schema.ClientInfoDetail], Option[List[Schema.ClientInfoDetail]]] = (fun: List[Schema.ClientInfoDetail]) => Option(fun)
		given putSchemaTestSetup: Conversion[Schema.TestSetup, Option[Schema.TestSetup]] = (fun: Schema.TestSetup) => Option(fun)
		given putSchemaIosTestSetup: Conversion[Schema.IosTestSetup, Option[Schema.IosTestSetup]] = (fun: Schema.IosTestSetup) => Option(fun)
		given putSchemaAndroidInstrumentationTest: Conversion[Schema.AndroidInstrumentationTest, Option[Schema.AndroidInstrumentationTest]] = (fun: Schema.AndroidInstrumentationTest) => Option(fun)
		given putSchemaAndroidRoboTest: Conversion[Schema.AndroidRoboTest, Option[Schema.AndroidRoboTest]] = (fun: Schema.AndroidRoboTest) => Option(fun)
		given putSchemaAndroidTestLoop: Conversion[Schema.AndroidTestLoop, Option[Schema.AndroidTestLoop]] = (fun: Schema.AndroidTestLoop) => Option(fun)
		given putSchemaIosXcTest: Conversion[Schema.IosXcTest, Option[Schema.IosXcTest]] = (fun: Schema.IosXcTest) => Option(fun)
		given putSchemaIosTestLoop: Conversion[Schema.IosTestLoop, Option[Schema.IosTestLoop]] = (fun: Schema.IosTestLoop) => Option(fun)
		given putSchemaIosRoboTest: Conversion[Schema.IosRoboTest, Option[Schema.IosRoboTest]] = (fun: Schema.IosRoboTest) => Option(fun)
		given putListSchemaDeviceFile: Conversion[List[Schema.DeviceFile], Option[List[Schema.DeviceFile]]] = (fun: List[Schema.DeviceFile]) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putListSchemaApk: Conversion[List[Schema.Apk], Option[List[Schema.Apk]]] = (fun: List[Schema.Apk]) => Option(fun)
		given putSchemaAccount: Conversion[Schema.Account, Option[Schema.Account]] = (fun: Schema.Account) => Option(fun)
		given putListSchemaEnvironmentVariable: Conversion[List[Schema.EnvironmentVariable], Option[List[Schema.EnvironmentVariable]]] = (fun: List[Schema.EnvironmentVariable]) => Option(fun)
		given putSchemaSystraceSetup: Conversion[Schema.SystraceSetup, Option[Schema.SystraceSetup]] = (fun: Schema.SystraceSetup) => Option(fun)
		given putSchemaObbFile: Conversion[Schema.ObbFile, Option[Schema.ObbFile]] = (fun: Schema.ObbFile) => Option(fun)
		given putSchemaRegularFile: Conversion[Schema.RegularFile, Option[Schema.RegularFile]] = (fun: Schema.RegularFile) => Option(fun)
		given putSchemaFileReference: Conversion[Schema.FileReference, Option[Schema.FileReference]] = (fun: Schema.FileReference) => Option(fun)
		given putSchemaGoogleAuto: Conversion[Schema.GoogleAuto, Option[Schema.GoogleAuto]] = (fun: Schema.GoogleAuto) => Option(fun)
		given putListSchemaFileReference: Conversion[List[Schema.FileReference], Option[List[Schema.FileReference]]] = (fun: List[Schema.FileReference]) => Option(fun)
		given putListSchemaIosDeviceFile: Conversion[List[Schema.IosDeviceFile], Option[List[Schema.IosDeviceFile]]] = (fun: List[Schema.IosDeviceFile]) => Option(fun)
		given putSchemaAppBundle: Conversion[Schema.AppBundle, Option[Schema.AppBundle]] = (fun: Schema.AppBundle) => Option(fun)
		given putSchemaAndroidInstrumentationTestOrchestratorOptionEnum: Conversion[Schema.AndroidInstrumentationTest.OrchestratorOptionEnum, Option[Schema.AndroidInstrumentationTest.OrchestratorOptionEnum]] = (fun: Schema.AndroidInstrumentationTest.OrchestratorOptionEnum) => Option(fun)
		given putSchemaShardingOption: Conversion[Schema.ShardingOption, Option[Schema.ShardingOption]] = (fun: Schema.ShardingOption) => Option(fun)
		given putSchemaUniformSharding: Conversion[Schema.UniformSharding, Option[Schema.UniformSharding]] = (fun: Schema.UniformSharding) => Option(fun)
		given putSchemaManualSharding: Conversion[Schema.ManualSharding, Option[Schema.ManualSharding]] = (fun: Schema.ManualSharding) => Option(fun)
		given putSchemaSmartSharding: Conversion[Schema.SmartSharding, Option[Schema.SmartSharding]] = (fun: Schema.SmartSharding) => Option(fun)
		given putListSchemaTestTargetsForShard: Conversion[List[Schema.TestTargetsForShard], Option[List[Schema.TestTargetsForShard]]] = (fun: List[Schema.TestTargetsForShard]) => Option(fun)
		given putListSchemaRoboDirective: Conversion[List[Schema.RoboDirective], Option[List[Schema.RoboDirective]]] = (fun: List[Schema.RoboDirective]) => Option(fun)
		given putSchemaAndroidRoboTestRoboModeEnum: Conversion[Schema.AndroidRoboTest.RoboModeEnum, Option[Schema.AndroidRoboTest.RoboModeEnum]] = (fun: Schema.AndroidRoboTest.RoboModeEnum) => Option(fun)
		given putListSchemaRoboStartingIntent: Conversion[List[Schema.RoboStartingIntent], Option[List[Schema.RoboStartingIntent]]] = (fun: List[Schema.RoboStartingIntent]) => Option(fun)
		given putSchemaRoboDirectiveActionTypeEnum: Conversion[Schema.RoboDirective.ActionTypeEnum, Option[Schema.RoboDirective.ActionTypeEnum]] = (fun: Schema.RoboDirective.ActionTypeEnum) => Option(fun)
		given putSchemaLauncherActivityIntent: Conversion[Schema.LauncherActivityIntent, Option[Schema.LauncherActivityIntent]] = (fun: Schema.LauncherActivityIntent) => Option(fun)
		given putSchemaStartActivityIntent: Conversion[Schema.StartActivityIntent, Option[Schema.StartActivityIntent]] = (fun: Schema.StartActivityIntent) => Option(fun)
		given putSchemaNoActivityIntent: Conversion[Schema.NoActivityIntent, Option[Schema.NoActivityIntent]] = (fun: Schema.NoActivityIntent) => Option(fun)
		given putListInt: Conversion[List[Int], Option[List[Int]]] = (fun: List[Int]) => Option(fun)
		given putSchemaAndroidMatrix: Conversion[Schema.AndroidMatrix, Option[Schema.AndroidMatrix]] = (fun: Schema.AndroidMatrix) => Option(fun)
		given putSchemaAndroidDeviceList: Conversion[Schema.AndroidDeviceList, Option[Schema.AndroidDeviceList]] = (fun: Schema.AndroidDeviceList) => Option(fun)
		given putSchemaIosDeviceList: Conversion[Schema.IosDeviceList, Option[Schema.IosDeviceList]] = (fun: Schema.IosDeviceList) => Option(fun)
		given putListSchemaAndroidDevice: Conversion[List[Schema.AndroidDevice], Option[List[Schema.AndroidDevice]]] = (fun: List[Schema.AndroidDevice]) => Option(fun)
		given putListSchemaIosDevice: Conversion[List[Schema.IosDevice], Option[List[Schema.IosDevice]]] = (fun: List[Schema.IosDevice]) => Option(fun)
		given putSchemaShard: Conversion[Schema.Shard, Option[Schema.Shard]] = (fun: Schema.Shard) => Option(fun)
		given putSchemaEnvironment: Conversion[Schema.Environment, Option[Schema.Environment]] = (fun: Schema.Environment) => Option(fun)
		given putSchemaTestExecutionStateEnum: Conversion[Schema.TestExecution.StateEnum, Option[Schema.TestExecution.StateEnum]] = (fun: Schema.TestExecution.StateEnum) => Option(fun)
		given putSchemaToolResultsStep: Conversion[Schema.ToolResultsStep, Option[Schema.ToolResultsStep]] = (fun: Schema.ToolResultsStep) => Option(fun)
		given putSchemaTestDetails: Conversion[Schema.TestDetails, Option[Schema.TestDetails]] = (fun: Schema.TestDetails) => Option(fun)
		given putSchemaTestTargetsForShard: Conversion[Schema.TestTargetsForShard, Option[Schema.TestTargetsForShard]] = (fun: Schema.TestTargetsForShard) => Option(fun)
		given putSchemaAndroidDevice: Conversion[Schema.AndroidDevice, Option[Schema.AndroidDevice]] = (fun: Schema.AndroidDevice) => Option(fun)
		given putSchemaIosDevice: Conversion[Schema.IosDevice, Option[Schema.IosDevice]] = (fun: Schema.IosDevice) => Option(fun)
		given putSchemaGoogleCloudStorage: Conversion[Schema.GoogleCloudStorage, Option[Schema.GoogleCloudStorage]] = (fun: Schema.GoogleCloudStorage) => Option(fun)
		given putSchemaToolResultsHistory: Conversion[Schema.ToolResultsHistory, Option[Schema.ToolResultsHistory]] = (fun: Schema.ToolResultsHistory) => Option(fun)
		given putSchemaToolResultsExecution: Conversion[Schema.ToolResultsExecution, Option[Schema.ToolResultsExecution]] = (fun: Schema.ToolResultsExecution) => Option(fun)
		given putSchemaCancelTestMatrixResponseTestStateEnum: Conversion[Schema.CancelTestMatrixResponse.TestStateEnum, Option[Schema.CancelTestMatrixResponse.TestStateEnum]] = (fun: Schema.CancelTestMatrixResponse.TestStateEnum) => Option(fun)
		given putSchemaApkDetail: Conversion[Schema.ApkDetail, Option[Schema.ApkDetail]] = (fun: Schema.ApkDetail) => Option(fun)
		given putSchemaApkManifest: Conversion[Schema.ApkManifest, Option[Schema.ApkManifest]] = (fun: Schema.ApkManifest) => Option(fun)
		given putListSchemaIntentFilter: Conversion[List[Schema.IntentFilter], Option[List[Schema.IntentFilter]]] = (fun: List[Schema.IntentFilter]) => Option(fun)
		given putListSchemaUsesPermissionTag: Conversion[List[Schema.UsesPermissionTag], Option[List[Schema.UsesPermissionTag]]] = (fun: List[Schema.UsesPermissionTag]) => Option(fun)
		given putListSchemaMetadata: Conversion[List[Schema.Metadata], Option[List[Schema.Metadata]]] = (fun: List[Schema.Metadata]) => Option(fun)
		given putListSchemaUsesFeature: Conversion[List[Schema.UsesFeature], Option[List[Schema.UsesFeature]]] = (fun: List[Schema.UsesFeature]) => Option(fun)
		given putListSchemaService: Conversion[List[Schema.Service], Option[List[Schema.Service]]] = (fun: List[Schema.Service]) => Option(fun)
		given putSchemaDeviceSessionStateEnum: Conversion[Schema.DeviceSession.StateEnum, Option[Schema.DeviceSession.StateEnum]] = (fun: Schema.DeviceSession.StateEnum) => Option(fun)
		given putListSchemaSessionStateEvent: Conversion[List[Schema.SessionStateEvent], Option[List[Schema.SessionStateEvent]]] = (fun: List[Schema.SessionStateEvent]) => Option(fun)
		given putSchemaSessionStateEventSessionStateEnum: Conversion[Schema.SessionStateEvent.SessionStateEnum, Option[Schema.SessionStateEvent.SessionStateEnum]] = (fun: Schema.SessionStateEvent.SessionStateEnum) => Option(fun)
		given putListSchemaDeviceSession: Conversion[List[Schema.DeviceSession], Option[List[Schema.DeviceSession]]] = (fun: List[Schema.DeviceSession]) => Option(fun)
		given putSchemaAndroidDeviceCatalog: Conversion[Schema.AndroidDeviceCatalog, Option[Schema.AndroidDeviceCatalog]] = (fun: Schema.AndroidDeviceCatalog) => Option(fun)
		given putSchemaIosDeviceCatalog: Conversion[Schema.IosDeviceCatalog, Option[Schema.IosDeviceCatalog]] = (fun: Schema.IosDeviceCatalog) => Option(fun)
		given putSchemaNetworkConfigurationCatalog: Conversion[Schema.NetworkConfigurationCatalog, Option[Schema.NetworkConfigurationCatalog]] = (fun: Schema.NetworkConfigurationCatalog) => Option(fun)
		given putSchemaProvidedSoftwareCatalog: Conversion[Schema.ProvidedSoftwareCatalog, Option[Schema.ProvidedSoftwareCatalog]] = (fun: Schema.ProvidedSoftwareCatalog) => Option(fun)
		given putSchemaDeviceIpBlockCatalog: Conversion[Schema.DeviceIpBlockCatalog, Option[Schema.DeviceIpBlockCatalog]] = (fun: Schema.DeviceIpBlockCatalog) => Option(fun)
		given putListSchemaAndroidModel: Conversion[List[Schema.AndroidModel], Option[List[Schema.AndroidModel]]] = (fun: List[Schema.AndroidModel]) => Option(fun)
		given putListSchemaAndroidVersion: Conversion[List[Schema.AndroidVersion], Option[List[Schema.AndroidVersion]]] = (fun: List[Schema.AndroidVersion]) => Option(fun)
		given putSchemaAndroidRuntimeConfiguration: Conversion[Schema.AndroidRuntimeConfiguration, Option[Schema.AndroidRuntimeConfiguration]] = (fun: Schema.AndroidRuntimeConfiguration) => Option(fun)
		given putSchemaAndroidModelFormEnum: Conversion[Schema.AndroidModel.FormEnum, Option[Schema.AndroidModel.FormEnum]] = (fun: Schema.AndroidModel.FormEnum) => Option(fun)
		given putSchemaAndroidModelFormFactorEnum: Conversion[Schema.AndroidModel.FormFactorEnum, Option[Schema.AndroidModel.FormFactorEnum]] = (fun: Schema.AndroidModel.FormFactorEnum) => Option(fun)
		given putListSchemaPerAndroidVersionInfo: Conversion[List[Schema.PerAndroidVersionInfo], Option[List[Schema.PerAndroidVersionInfo]]] = (fun: List[Schema.PerAndroidVersionInfo]) => Option(fun)
		given putSchemaLabInfo: Conversion[Schema.LabInfo, Option[Schema.LabInfo]] = (fun: Schema.LabInfo) => Option(fun)
		given putSchemaPerAndroidVersionInfoDeviceCapacityEnum: Conversion[Schema.PerAndroidVersionInfo.DeviceCapacityEnum, Option[Schema.PerAndroidVersionInfo.DeviceCapacityEnum]] = (fun: Schema.PerAndroidVersionInfo.DeviceCapacityEnum) => Option(fun)
		given putSchemaDirectAccessVersionInfo: Conversion[Schema.DirectAccessVersionInfo, Option[Schema.DirectAccessVersionInfo]] = (fun: Schema.DirectAccessVersionInfo) => Option(fun)
		given putSchemaDate: Conversion[Schema.Date, Option[Schema.Date]] = (fun: Schema.Date) => Option(fun)
		given putSchemaDistribution: Conversion[Schema.Distribution, Option[Schema.Distribution]] = (fun: Schema.Distribution) => Option(fun)
		given putBigDecimal: Conversion[BigDecimal, Option[BigDecimal]] = (fun: BigDecimal) => Option(fun)
		given putListSchemaLocale: Conversion[List[Schema.Locale], Option[List[Schema.Locale]]] = (fun: List[Schema.Locale]) => Option(fun)
		given putListSchemaOrientation: Conversion[List[Schema.Orientation], Option[List[Schema.Orientation]]] = (fun: List[Schema.Orientation]) => Option(fun)
		given putListSchemaIosModel: Conversion[List[Schema.IosModel], Option[List[Schema.IosModel]]] = (fun: List[Schema.IosModel]) => Option(fun)
		given putListSchemaIosVersion: Conversion[List[Schema.IosVersion], Option[List[Schema.IosVersion]]] = (fun: List[Schema.IosVersion]) => Option(fun)
		given putListSchemaXcodeVersion: Conversion[List[Schema.XcodeVersion], Option[List[Schema.XcodeVersion]]] = (fun: List[Schema.XcodeVersion]) => Option(fun)
		given putSchemaIosRuntimeConfiguration: Conversion[Schema.IosRuntimeConfiguration, Option[Schema.IosRuntimeConfiguration]] = (fun: Schema.IosRuntimeConfiguration) => Option(fun)
		given putSchemaIosModelFormFactorEnum: Conversion[Schema.IosModel.FormFactorEnum, Option[Schema.IosModel.FormFactorEnum]] = (fun: Schema.IosModel.FormFactorEnum) => Option(fun)
		given putListSchemaPerIosVersionInfo: Conversion[List[Schema.PerIosVersionInfo], Option[List[Schema.PerIosVersionInfo]]] = (fun: List[Schema.PerIosVersionInfo]) => Option(fun)
		given putSchemaPerIosVersionInfoDeviceCapacityEnum: Conversion[Schema.PerIosVersionInfo.DeviceCapacityEnum, Option[Schema.PerIosVersionInfo.DeviceCapacityEnum]] = (fun: Schema.PerIosVersionInfo.DeviceCapacityEnum) => Option(fun)
		given putListSchemaNetworkConfiguration: Conversion[List[Schema.NetworkConfiguration], Option[List[Schema.NetworkConfiguration]]] = (fun: List[Schema.NetworkConfiguration]) => Option(fun)
		given putSchemaTrafficRule: Conversion[Schema.TrafficRule, Option[Schema.TrafficRule]] = (fun: Schema.TrafficRule) => Option(fun)
		given putListSchemaDeviceIpBlock: Conversion[List[Schema.DeviceIpBlock], Option[List[Schema.DeviceIpBlock]]] = (fun: List[Schema.DeviceIpBlock]) => Option(fun)
		given putSchemaDeviceIpBlockFormEnum: Conversion[Schema.DeviceIpBlock.FormEnum, Option[Schema.DeviceIpBlock.FormEnum]] = (fun: Schema.DeviceIpBlock.FormEnum) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
