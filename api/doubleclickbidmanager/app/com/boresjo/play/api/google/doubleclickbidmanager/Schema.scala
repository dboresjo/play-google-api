package com.boresjo.play.api.google.doubleclickbidmanager

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Schema {
	case class Query(
	  /** Output only. The unique ID of the query. */
		queryId: Option[String] = None,
	  /** The metadata of the query. */
		metadata: Option[Schema.QueryMetadata] = None,
	  /** The parameters of the report generated by the query. */
		params: Option[Schema.Parameters] = None,
	  /** When and how often the query is scheduled to run. If the frequency field is set to `ONE_TIME`, the query will only run when queries.run is called. */
		schedule: Option[Schema.QuerySchedule] = None
	)
	
	object QueryMetadata {
		enum FormatEnum extends Enum[FormatEnum] { case FORMAT_UNSPECIFIED, CSV, XLSX }
	}
	case class QueryMetadata(
	  /** The display name of the query. This value will be used in the file name of reports generated by the query. */
		title: Option[String] = None,
	  /** The date range the report generated by the query will report on. This date range will be defined by the time zone as used by the advertiser. */
		dataRange: Option[Schema.DataRange] = None,
	  /** The format of the report generated by the query. */
		format: Option[Schema.QueryMetadata.FormatEnum] = None,
	  /** Whether an email notification is sent to the query creator when a report generated by the query is ready. This value is `false` by default. */
		sendNotification: Option[Boolean] = None,
	  /** List of additional email addresses with which to share the query. If send_notification is `true`, these email addresses will receive a notification when a report generated by the query is ready. If these email addresses are connected to Display & Video 360 users, the query will be available to them in the Display & Video 360 interface. */
		shareEmailAddress: Option[List[String]] = None
	)
	
	object DataRange {
		enum RangeEnum extends Enum[RangeEnum] { case RANGE_UNSPECIFIED, CUSTOM_DATES, CURRENT_DAY, PREVIOUS_DAY, WEEK_TO_DATE, MONTH_TO_DATE, QUARTER_TO_DATE, YEAR_TO_DATE, PREVIOUS_WEEK, PREVIOUS_MONTH, PREVIOUS_QUARTER, PREVIOUS_YEAR, LAST_7_DAYS, LAST_30_DAYS, LAST_90_DAYS, LAST_365_DAYS, ALL_TIME, LAST_14_DAYS, LAST_60_DAYS }
	}
	case class DataRange(
	  /** The preset date range to be reported on. If `CUSTOM_DATES` is assigned to this field, fields custom_start_date and custom_end_date must be set to specify the custom date range. */
		range: Option[Schema.DataRange.RangeEnum] = None,
	  /** If `CUSTOM_DATES` is assigned to range, this field specifies the starting date for the date range that is reported on. This field is required if using `CUSTOM_DATES` range and will be ignored otherwise. */
		customStartDate: Option[Schema.Date] = None,
	  /** If `CUSTOM_DATES` is assigned to range, this field specifies the end date for the date range that is reported on. This field is required if using `CUSTOM_DATES` range and will be ignored otherwise. */
		customEndDate: Option[Schema.Date] = None
	)
	
	case class Date(
	  /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
		year: Option[Int] = None,
	  /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
		month: Option[Int] = None,
	  /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
		day: Option[Int] = None
	)
	
	object Parameters {
		enum TypeEnum extends Enum[TypeEnum] { case REPORT_TYPE_UNSPECIFIED, STANDARD, INVENTORY_AVAILABILITY, AUDIENCE_COMPOSITION, FLOODLIGHT, YOUTUBE, GRP, YOUTUBE_PROGRAMMATIC_GUARANTEED, REACH, UNIQUE_REACH_AUDIENCE, FULL_PATH, PATH_ATTRIBUTION }
	}
	case class Parameters(
	  /** The type of the report. The type of the report determines the dimesions, filters, and metrics that can be used. */
		`type`: Option[Schema.Parameters.TypeEnum] = None,
	  /** Dimensions by which to segment and group the data. Defined by [Filter](/bid-manager/reference/rest/v2/filters-metrics#filters) values. */
		groupBys: Option[List[String]] = None,
	  /** Filters to limit the scope of reported data. */
		filters: Option[List[Schema.FilterPair]] = None,
	  /** Metrics to define the data populating the report. Defined by [Metric](/bid-manager/reference/rest/v2/filters-metrics#metrics) values. */
		metrics: Option[List[String]] = None,
	  /** Additional report parameter options. */
		options: Option[Schema.Options] = None
	)
	
	case class FilterPair(
	  /** The type of value to filter by. Defined by a [Filter](/bid-manager/reference/rest/v2/filters-metrics#filters) value. */
		`type`: Option[String] = None,
	  /** The identifying value to filter by, such as a relevant resource ID. */
		value: Option[String] = None
	)
	
	case class Options(
	  /** Whether to include data for audience lists specifically targeted by filtered line items or insertion orders. Requires the use of `FILTER_INSERTION_ORDER` or `FILTER_LINE_ITEM` filters. */
		includeOnlyTargetedUserLists: Option[Boolean] = None
	)
	
	object QuerySchedule {
		enum FrequencyEnum extends Enum[FrequencyEnum] { case FREQUENCY_UNSPECIFIED, ONE_TIME, DAILY, WEEKLY, SEMI_MONTHLY, MONTHLY, QUARTERLY, YEARLY }
	}
	case class QuerySchedule(
	  /** The date on which to begin the scheduled runs. This field is required if frequency is not set to `ONE_TIME`. Otherwise, it will be ignored. */
		startDate: Option[Schema.Date] = None,
	  /** The date on which to end the scheduled runs. This field is required if frequency is not set to `ONE_TIME`. Otherwise, it will be ignored. */
		endDate: Option[Schema.Date] = None,
	  /** How frequently to run the query. If set to `ONE_TIME`, the query will only be run when queries.run is called. */
		frequency: Option[Schema.QuerySchedule.FrequencyEnum] = None,
	  /** The canonical code for the timezone the query schedule is based on. Scheduled runs are usually conducted in the morning of a given day. Defaults to `America/New_York`. */
		nextRunTimezoneCode: Option[String] = None
	)
	
	case class ListQueriesResponse(
	  /** The list of queries. This field will be absent if empty. */
		queries: Option[List[Schema.Query]] = None,
	  /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `queries.list` method to retrieve the next page of results. */
		nextPageToken: Option[String] = None
	)
	
	case class RunQueryRequest(
	  /** The date range used by the query to generate the report. If unspecified, the query's original data_range is used. */
		dataRange: Option[Schema.DataRange] = None
	)
	
	case class Report(
	  /** The key information identifying the report. */
		key: Option[Schema.ReportKey] = None,
	  /** The metadata of the report. */
		metadata: Option[Schema.ReportMetadata] = None,
	  /** The parameters of the report. */
		params: Option[Schema.Parameters] = None
	)
	
	case class ReportKey(
	  /** Output only. The unique ID of the query that generated the report. */
		queryId: Option[String] = None,
	  /** Output only. The unique ID of the report. */
		reportId: Option[String] = None
	)
	
	case class ReportMetadata(
	  /** The status of the report. */
		status: Option[Schema.ReportStatus] = None,
	  /** The start date of the report data date range. */
		reportDataStartDate: Option[Schema.Date] = None,
	  /** The end date of the report data date range. */
		reportDataEndDate: Option[Schema.Date] = None,
	  /** Output only. The location of the generated report file in Google Cloud Storage. This field will be absent if status.state is not `DONE`. */
		googleCloudStoragePath: Option[String] = None
	)
	
	object ReportStatus {
		enum StateEnum extends Enum[StateEnum] { case STATE_UNSPECIFIED, QUEUED, RUNNING, DONE, FAILED }
		enum FormatEnum extends Enum[FormatEnum] { case FORMAT_UNSPECIFIED, CSV, XLSX }
	}
	case class ReportStatus(
	  /** Output only. The state of the report generation. */
		state: Option[Schema.ReportStatus.StateEnum] = None,
	  /** Output only. The timestamp of when report generation finished successfully or in failure. This field will not be set unless state is `DONE` or `FAILED`. */
		finishTime: Option[String] = None,
	  /** The format of the generated report file. */
		format: Option[Schema.ReportStatus.FormatEnum] = None
	)
	
	case class ListReportsResponse(
	  /** The list of reports. This field will be absent if empty. */
		reports: Option[List[Schema.Report]] = None,
	  /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `queries.reports.list` method to retrieve the next page of results. */
		nextPageToken: Option[String] = None
	)
}
