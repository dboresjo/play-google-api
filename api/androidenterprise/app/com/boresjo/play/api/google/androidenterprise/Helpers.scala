package com.boresjo.play.api.google.androidenterprise

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaDevice: Conversion[List[Schema.Device], Option[List[Schema.Device]]] = (fun: List[Schema.Device]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putSchemaDeviceManagementTypeEnum: Conversion[Schema.Device.ManagementTypeEnum, Option[Schema.Device.ManagementTypeEnum]] = (fun: Schema.Device.ManagementTypeEnum) => Option(fun)
		given putSchemaPolicy: Conversion[Schema.Policy, Option[Schema.Policy]] = (fun: Schema.Policy) => Option(fun)
		given putSchemaDeviceReport: Conversion[Schema.DeviceReport, Option[Schema.DeviceReport]] = (fun: Schema.DeviceReport) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putSchemaPolicyAutoUpdatePolicyEnum: Conversion[Schema.Policy.AutoUpdatePolicyEnum, Option[Schema.Policy.AutoUpdatePolicyEnum]] = (fun: Schema.Policy.AutoUpdatePolicyEnum) => Option(fun)
		given putSchemaPolicyProductAvailabilityPolicyEnum: Conversion[Schema.Policy.ProductAvailabilityPolicyEnum, Option[Schema.Policy.ProductAvailabilityPolicyEnum]] = (fun: Schema.Policy.ProductAvailabilityPolicyEnum) => Option(fun)
		given putListSchemaProductPolicy: Conversion[List[Schema.ProductPolicy], Option[List[Schema.ProductPolicy]]] = (fun: List[Schema.ProductPolicy]) => Option(fun)
		given putSchemaMaintenanceWindow: Conversion[Schema.MaintenanceWindow, Option[Schema.MaintenanceWindow]] = (fun: Schema.MaintenanceWindow) => Option(fun)
		given putSchemaPolicyDeviceReportPolicyEnum: Conversion[Schema.Policy.DeviceReportPolicyEnum, Option[Schema.Policy.DeviceReportPolicyEnum]] = (fun: Schema.Policy.DeviceReportPolicyEnum) => Option(fun)
		given putListSchemaProductPolicyTracksEnum: Conversion[List[Schema.ProductPolicy.TracksEnum], Option[List[Schema.ProductPolicy.TracksEnum]]] = (fun: List[Schema.ProductPolicy.TracksEnum]) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putSchemaManagedConfiguration: Conversion[Schema.ManagedConfiguration, Option[Schema.ManagedConfiguration]] = (fun: Schema.ManagedConfiguration) => Option(fun)
		given putSchemaAutoInstallPolicy: Conversion[Schema.AutoInstallPolicy, Option[Schema.AutoInstallPolicy]] = (fun: Schema.AutoInstallPolicy) => Option(fun)
		given putSchemaProductPolicyAutoUpdateModeEnum: Conversion[Schema.ProductPolicy.AutoUpdateModeEnum, Option[Schema.ProductPolicy.AutoUpdateModeEnum]] = (fun: Schema.ProductPolicy.AutoUpdateModeEnum) => Option(fun)
		given putListSchemaEnterpriseAuthenticationAppLinkConfig: Conversion[List[Schema.EnterpriseAuthenticationAppLinkConfig], Option[List[Schema.EnterpriseAuthenticationAppLinkConfig]]] = (fun: List[Schema.EnterpriseAuthenticationAppLinkConfig]) => Option(fun)
		given putListSchemaManagedProperty: Conversion[List[Schema.ManagedProperty], Option[List[Schema.ManagedProperty]]] = (fun: List[Schema.ManagedProperty]) => Option(fun)
		given putSchemaConfigurationVariables: Conversion[Schema.ConfigurationVariables, Option[Schema.ConfigurationVariables]] = (fun: Schema.ConfigurationVariables) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaManagedPropertyBundle: Conversion[Schema.ManagedPropertyBundle, Option[Schema.ManagedPropertyBundle]] = (fun: Schema.ManagedPropertyBundle) => Option(fun)
		given putListSchemaManagedPropertyBundle: Conversion[List[Schema.ManagedPropertyBundle], Option[List[Schema.ManagedPropertyBundle]]] = (fun: List[Schema.ManagedPropertyBundle]) => Option(fun)
		given putListSchemaVariableSet: Conversion[List[Schema.VariableSet], Option[List[Schema.VariableSet]]] = (fun: List[Schema.VariableSet]) => Option(fun)
		given putSchemaAutoInstallPolicyAutoInstallModeEnum: Conversion[Schema.AutoInstallPolicy.AutoInstallModeEnum, Option[Schema.AutoInstallPolicy.AutoInstallModeEnum]] = (fun: Schema.AutoInstallPolicy.AutoInstallModeEnum) => Option(fun)
		given putListSchemaAutoInstallConstraint: Conversion[List[Schema.AutoInstallConstraint], Option[List[Schema.AutoInstallConstraint]]] = (fun: List[Schema.AutoInstallConstraint]) => Option(fun)
		given putSchemaAutoInstallConstraintNetworkTypeConstraintEnum: Conversion[Schema.AutoInstallConstraint.NetworkTypeConstraintEnum, Option[Schema.AutoInstallConstraint.NetworkTypeConstraintEnum]] = (fun: Schema.AutoInstallConstraint.NetworkTypeConstraintEnum) => Option(fun)
		given putSchemaAutoInstallConstraintChargingStateConstraintEnum: Conversion[Schema.AutoInstallConstraint.ChargingStateConstraintEnum, Option[Schema.AutoInstallConstraint.ChargingStateConstraintEnum]] = (fun: Schema.AutoInstallConstraint.ChargingStateConstraintEnum) => Option(fun)
		given putSchemaAutoInstallConstraintDeviceIdleStateConstraintEnum: Conversion[Schema.AutoInstallConstraint.DeviceIdleStateConstraintEnum, Option[Schema.AutoInstallConstraint.DeviceIdleStateConstraintEnum]] = (fun: Schema.AutoInstallConstraint.DeviceIdleStateConstraintEnum) => Option(fun)
		given putListSchemaAppState: Conversion[List[Schema.AppState], Option[List[Schema.AppState]]] = (fun: List[Schema.AppState]) => Option(fun)
		given putListSchemaKeyedAppState: Conversion[List[Schema.KeyedAppState], Option[List[Schema.KeyedAppState]]] = (fun: List[Schema.KeyedAppState]) => Option(fun)
		given putSchemaKeyedAppStateSeverityEnum: Conversion[Schema.KeyedAppState.SeverityEnum, Option[Schema.KeyedAppState.SeverityEnum]] = (fun: Schema.KeyedAppState.SeverityEnum) => Option(fun)
		given putSchemaDeviceStateAccountStateEnum: Conversion[Schema.DeviceState.AccountStateEnum, Option[Schema.DeviceState.AccountStateEnum]] = (fun: Schema.DeviceState.AccountStateEnum) => Option(fun)
		given putListSchemaEnterprise: Conversion[List[Schema.Enterprise], Option[List[Schema.Enterprise]]] = (fun: List[Schema.Enterprise]) => Option(fun)
		given putListSchemaAdministrator: Conversion[List[Schema.Administrator], Option[List[Schema.Administrator]]] = (fun: List[Schema.Administrator]) => Option(fun)
		given putSchemaGoogleAuthenticationSettings: Conversion[Schema.GoogleAuthenticationSettings, Option[Schema.GoogleAuthenticationSettings]] = (fun: Schema.GoogleAuthenticationSettings) => Option(fun)
		given putSchemaGoogleAuthenticationSettingsGoogleAuthenticationRequiredEnum: Conversion[Schema.GoogleAuthenticationSettings.GoogleAuthenticationRequiredEnum, Option[Schema.GoogleAuthenticationSettings.GoogleAuthenticationRequiredEnum]] = (fun: Schema.GoogleAuthenticationSettings.GoogleAuthenticationRequiredEnum) => Option(fun)
		given putSchemaGoogleAuthenticationSettingsDedicatedDevicesAllowedEnum: Conversion[Schema.GoogleAuthenticationSettings.DedicatedDevicesAllowedEnum, Option[Schema.GoogleAuthenticationSettings.DedicatedDevicesAllowedEnum]] = (fun: Schema.GoogleAuthenticationSettings.DedicatedDevicesAllowedEnum) => Option(fun)
		given putListSchemaNotification: Conversion[List[Schema.Notification], Option[List[Schema.Notification]]] = (fun: List[Schema.Notification]) => Option(fun)
		given putSchemaNotificationNotificationTypeEnum: Conversion[Schema.Notification.NotificationTypeEnum, Option[Schema.Notification.NotificationTypeEnum]] = (fun: Schema.Notification.NotificationTypeEnum) => Option(fun)
		given putSchemaProductApprovalEvent: Conversion[Schema.ProductApprovalEvent, Option[Schema.ProductApprovalEvent]] = (fun: Schema.ProductApprovalEvent) => Option(fun)
		given putSchemaInstallFailureEvent: Conversion[Schema.InstallFailureEvent, Option[Schema.InstallFailureEvent]] = (fun: Schema.InstallFailureEvent) => Option(fun)
		given putSchemaAppUpdateEvent: Conversion[Schema.AppUpdateEvent, Option[Schema.AppUpdateEvent]] = (fun: Schema.AppUpdateEvent) => Option(fun)
		given putSchemaNewPermissionsEvent: Conversion[Schema.NewPermissionsEvent, Option[Schema.NewPermissionsEvent]] = (fun: Schema.NewPermissionsEvent) => Option(fun)
		given putSchemaAppRestrictionsSchemaChangeEvent: Conversion[Schema.AppRestrictionsSchemaChangeEvent, Option[Schema.AppRestrictionsSchemaChangeEvent]] = (fun: Schema.AppRestrictionsSchemaChangeEvent) => Option(fun)
		given putSchemaProductAvailabilityChangeEvent: Conversion[Schema.ProductAvailabilityChangeEvent, Option[Schema.ProductAvailabilityChangeEvent]] = (fun: Schema.ProductAvailabilityChangeEvent) => Option(fun)
		given putSchemaNewDeviceEvent: Conversion[Schema.NewDeviceEvent, Option[Schema.NewDeviceEvent]] = (fun: Schema.NewDeviceEvent) => Option(fun)
		given putSchemaDeviceReportUpdateEvent: Conversion[Schema.DeviceReportUpdateEvent, Option[Schema.DeviceReportUpdateEvent]] = (fun: Schema.DeviceReportUpdateEvent) => Option(fun)
		given putSchemaProductApprovalEventApprovedEnum: Conversion[Schema.ProductApprovalEvent.ApprovedEnum, Option[Schema.ProductApprovalEvent.ApprovedEnum]] = (fun: Schema.ProductApprovalEvent.ApprovedEnum) => Option(fun)
		given putSchemaInstallFailureEventFailureReasonEnum: Conversion[Schema.InstallFailureEvent.FailureReasonEnum, Option[Schema.InstallFailureEvent.FailureReasonEnum]] = (fun: Schema.InstallFailureEvent.FailureReasonEnum) => Option(fun)
		given putSchemaProductAvailabilityChangeEventAvailabilityStatusEnum: Conversion[Schema.ProductAvailabilityChangeEvent.AvailabilityStatusEnum, Option[Schema.ProductAvailabilityChangeEvent.AvailabilityStatusEnum]] = (fun: Schema.ProductAvailabilityChangeEvent.AvailabilityStatusEnum) => Option(fun)
		given putSchemaNewDeviceEventManagementTypeEnum: Conversion[Schema.NewDeviceEvent.ManagementTypeEnum, Option[Schema.NewDeviceEvent.ManagementTypeEnum]] = (fun: Schema.NewDeviceEvent.ManagementTypeEnum) => Option(fun)
		given putSchemaStoreLayoutStoreLayoutTypeEnum: Conversion[Schema.StoreLayout.StoreLayoutTypeEnum, Option[Schema.StoreLayout.StoreLayoutTypeEnum]] = (fun: Schema.StoreLayout.StoreLayoutTypeEnum) => Option(fun)
		given putSchemaServiceAccountKey: Conversion[Schema.ServiceAccountKey, Option[Schema.ServiceAccountKey]] = (fun: Schema.ServiceAccountKey) => Option(fun)
		given putSchemaServiceAccountKeyTypeEnum: Conversion[Schema.ServiceAccountKey.TypeEnum, Option[Schema.ServiceAccountKey.TypeEnum]] = (fun: Schema.ServiceAccountKey.TypeEnum) => Option(fun)
		given putListSchemaAdministratorWebTokenSpecPermissionEnum: Conversion[List[Schema.AdministratorWebTokenSpec.PermissionEnum], Option[List[Schema.AdministratorWebTokenSpec.PermissionEnum]]] = (fun: List[Schema.AdministratorWebTokenSpec.PermissionEnum]) => Option(fun)
		given putSchemaAdministratorWebTokenSpecPlaySearch: Conversion[Schema.AdministratorWebTokenSpecPlaySearch, Option[Schema.AdministratorWebTokenSpecPlaySearch]] = (fun: Schema.AdministratorWebTokenSpecPlaySearch) => Option(fun)
		given putSchemaAdministratorWebTokenSpecPrivateApps: Conversion[Schema.AdministratorWebTokenSpecPrivateApps, Option[Schema.AdministratorWebTokenSpecPrivateApps]] = (fun: Schema.AdministratorWebTokenSpecPrivateApps) => Option(fun)
		given putSchemaAdministratorWebTokenSpecWebApps: Conversion[Schema.AdministratorWebTokenSpecWebApps, Option[Schema.AdministratorWebTokenSpecWebApps]] = (fun: Schema.AdministratorWebTokenSpecWebApps) => Option(fun)
		given putSchemaAdministratorWebTokenSpecStoreBuilder: Conversion[Schema.AdministratorWebTokenSpecStoreBuilder, Option[Schema.AdministratorWebTokenSpecStoreBuilder]] = (fun: Schema.AdministratorWebTokenSpecStoreBuilder) => Option(fun)
		given putSchemaAdministratorWebTokenSpecManagedConfigurations: Conversion[Schema.AdministratorWebTokenSpecManagedConfigurations, Option[Schema.AdministratorWebTokenSpecManagedConfigurations]] = (fun: Schema.AdministratorWebTokenSpecManagedConfigurations) => Option(fun)
		given putSchemaAdministratorWebTokenSpecZeroTouch: Conversion[Schema.AdministratorWebTokenSpecZeroTouch, Option[Schema.AdministratorWebTokenSpecZeroTouch]] = (fun: Schema.AdministratorWebTokenSpecZeroTouch) => Option(fun)
		given putSchemaEnrollmentToken: Conversion[Schema.EnrollmentToken, Option[Schema.EnrollmentToken]] = (fun: Schema.EnrollmentToken) => Option(fun)
		given putSchemaEnrollmentTokenEnrollmentTokenTypeEnum: Conversion[Schema.EnrollmentToken.EnrollmentTokenTypeEnum, Option[Schema.EnrollmentToken.EnrollmentTokenTypeEnum]] = (fun: Schema.EnrollmentToken.EnrollmentTokenTypeEnum) => Option(fun)
		given putListSchemaEntitlement: Conversion[List[Schema.Entitlement], Option[List[Schema.Entitlement]]] = (fun: List[Schema.Entitlement]) => Option(fun)
		given putSchemaEntitlementReasonEnum: Conversion[Schema.Entitlement.ReasonEnum, Option[Schema.Entitlement.ReasonEnum]] = (fun: Schema.Entitlement.ReasonEnum) => Option(fun)
		given putListSchemaUser: Conversion[List[Schema.User], Option[List[Schema.User]]] = (fun: List[Schema.User]) => Option(fun)
		given putSchemaUserManagementTypeEnum: Conversion[Schema.User.ManagementTypeEnum, Option[Schema.User.ManagementTypeEnum]] = (fun: Schema.User.ManagementTypeEnum) => Option(fun)
		given putSchemaUserAccountTypeEnum: Conversion[Schema.User.AccountTypeEnum, Option[Schema.User.AccountTypeEnum]] = (fun: Schema.User.AccountTypeEnum) => Option(fun)
		given putListSchemaGroupLicense: Conversion[List[Schema.GroupLicense], Option[List[Schema.GroupLicense]]] = (fun: List[Schema.GroupLicense]) => Option(fun)
		given putSchemaGroupLicenseAcquisitionKindEnum: Conversion[Schema.GroupLicense.AcquisitionKindEnum, Option[Schema.GroupLicense.AcquisitionKindEnum]] = (fun: Schema.GroupLicense.AcquisitionKindEnum) => Option(fun)
		given putSchemaGroupLicenseApprovalEnum: Conversion[Schema.GroupLicense.ApprovalEnum, Option[Schema.GroupLicense.ApprovalEnum]] = (fun: Schema.GroupLicense.ApprovalEnum) => Option(fun)
		given putSchemaGroupLicensePermissionsEnum: Conversion[Schema.GroupLicense.PermissionsEnum, Option[Schema.GroupLicense.PermissionsEnum]] = (fun: Schema.GroupLicense.PermissionsEnum) => Option(fun)
		given putListSchemaInstall: Conversion[List[Schema.Install], Option[List[Schema.Install]]] = (fun: List[Schema.Install]) => Option(fun)
		given putSchemaInstallInstallStateEnum: Conversion[Schema.Install.InstallStateEnum, Option[Schema.Install.InstallStateEnum]] = (fun: Schema.Install.InstallStateEnum) => Option(fun)
		given putListSchemaManagedConfiguration: Conversion[List[Schema.ManagedConfiguration], Option[List[Schema.ManagedConfiguration]]] = (fun: List[Schema.ManagedConfiguration]) => Option(fun)
		given putListSchemaManagedConfigurationsSettings: Conversion[List[Schema.ManagedConfigurationsSettings], Option[List[Schema.ManagedConfigurationsSettings]]] = (fun: List[Schema.ManagedConfigurationsSettings]) => Option(fun)
		given putListSchemaAppVersion: Conversion[List[Schema.AppVersion], Option[List[Schema.AppVersion]]] = (fun: List[Schema.AppVersion]) => Option(fun)
		given putSchemaProductDistributionChannelEnum: Conversion[Schema.Product.DistributionChannelEnum, Option[Schema.Product.DistributionChannelEnum]] = (fun: Schema.Product.DistributionChannelEnum) => Option(fun)
		given putSchemaProductProductPricingEnum: Conversion[Schema.Product.ProductPricingEnum, Option[Schema.Product.ProductPricingEnum]] = (fun: Schema.Product.ProductPricingEnum) => Option(fun)
		given putSchemaProductSigningCertificate: Conversion[Schema.ProductSigningCertificate, Option[Schema.ProductSigningCertificate]] = (fun: Schema.ProductSigningCertificate) => Option(fun)
		given putListSchemaProductAvailableTracksEnum: Conversion[List[Schema.Product.AvailableTracksEnum], Option[List[Schema.Product.AvailableTracksEnum]]] = (fun: List[Schema.Product.AvailableTracksEnum]) => Option(fun)
		given putListSchemaTrackInfo: Conversion[List[Schema.TrackInfo], Option[List[Schema.TrackInfo]]] = (fun: List[Schema.TrackInfo]) => Option(fun)
		given putSchemaProductContentRatingEnum: Conversion[Schema.Product.ContentRatingEnum, Option[Schema.Product.ContentRatingEnum]] = (fun: Schema.Product.ContentRatingEnum) => Option(fun)
		given putListSchemaProductPermission: Conversion[List[Schema.ProductPermission], Option[List[Schema.ProductPermission]]] = (fun: List[Schema.ProductPermission]) => Option(fun)
		given putListSchemaProductFeaturesEnum: Conversion[List[Schema.Product.FeaturesEnum], Option[List[Schema.Product.FeaturesEnum]]] = (fun: List[Schema.Product.FeaturesEnum]) => Option(fun)
		given putSchemaAppRestrictionsSchema: Conversion[Schema.AppRestrictionsSchema, Option[Schema.AppRestrictionsSchema]] = (fun: Schema.AppRestrictionsSchema) => Option(fun)
		given putSchemaAppVersionTrackEnum: Conversion[Schema.AppVersion.TrackEnum, Option[Schema.AppVersion.TrackEnum]] = (fun: Schema.AppVersion.TrackEnum) => Option(fun)
		given putSchemaProductPermissionStateEnum: Conversion[Schema.ProductPermission.StateEnum, Option[Schema.ProductPermission.StateEnum]] = (fun: Schema.ProductPermission.StateEnum) => Option(fun)
		given putListSchemaAppRestrictionsSchemaRestriction: Conversion[List[Schema.AppRestrictionsSchemaRestriction], Option[List[Schema.AppRestrictionsSchemaRestriction]]] = (fun: List[Schema.AppRestrictionsSchemaRestriction]) => Option(fun)
		given putSchemaAppRestrictionsSchemaRestrictionRestrictionTypeEnum: Conversion[Schema.AppRestrictionsSchemaRestriction.RestrictionTypeEnum, Option[Schema.AppRestrictionsSchemaRestriction.RestrictionTypeEnum]] = (fun: Schema.AppRestrictionsSchemaRestriction.RestrictionTypeEnum) => Option(fun)
		given putSchemaAppRestrictionsSchemaRestrictionRestrictionValue: Conversion[Schema.AppRestrictionsSchemaRestrictionRestrictionValue, Option[Schema.AppRestrictionsSchemaRestrictionRestrictionValue]] = (fun: Schema.AppRestrictionsSchemaRestrictionRestrictionValue) => Option(fun)
		given putSchemaAppRestrictionsSchemaRestrictionRestrictionValueTypeEnum: Conversion[Schema.AppRestrictionsSchemaRestrictionRestrictionValue.TypeEnum, Option[Schema.AppRestrictionsSchemaRestrictionRestrictionValue.TypeEnum]] = (fun: Schema.AppRestrictionsSchemaRestrictionRestrictionValue.TypeEnum) => Option(fun)
		given putSchemaPageInfo: Conversion[Schema.PageInfo, Option[Schema.PageInfo]] = (fun: Schema.PageInfo) => Option(fun)
		given putSchemaTokenPagination: Conversion[Schema.TokenPagination, Option[Schema.TokenPagination]] = (fun: Schema.TokenPagination) => Option(fun)
		given putListSchemaProduct: Conversion[List[Schema.Product], Option[List[Schema.Product]]] = (fun: List[Schema.Product]) => Option(fun)
		given putSchemaApprovalUrlInfo: Conversion[Schema.ApprovalUrlInfo, Option[Schema.ApprovalUrlInfo]] = (fun: Schema.ApprovalUrlInfo) => Option(fun)
		given putSchemaProductsApproveRequestApprovedPermissionsEnum: Conversion[Schema.ProductsApproveRequest.ApprovedPermissionsEnum, Option[Schema.ProductsApproveRequest.ApprovedPermissionsEnum]] = (fun: Schema.ProductsApproveRequest.ApprovedPermissionsEnum) => Option(fun)
		given putListSchemaServiceAccountKey: Conversion[List[Schema.ServiceAccountKey], Option[List[Schema.ServiceAccountKey]]] = (fun: List[Schema.ServiceAccountKey]) => Option(fun)
		given putListSchemaStoreCluster: Conversion[List[Schema.StoreCluster], Option[List[Schema.StoreCluster]]] = (fun: List[Schema.StoreCluster]) => Option(fun)
		given putListSchemaLocalizedText: Conversion[List[Schema.LocalizedText], Option[List[Schema.LocalizedText]]] = (fun: List[Schema.LocalizedText]) => Option(fun)
		given putListSchemaStorePage: Conversion[List[Schema.StorePage], Option[List[Schema.StorePage]]] = (fun: List[Schema.StorePage]) => Option(fun)
		given putSchemaProductSetProductSetBehaviorEnum: Conversion[Schema.ProductSet.ProductSetBehaviorEnum, Option[Schema.ProductSet.ProductSetBehaviorEnum]] = (fun: Schema.ProductSet.ProductSetBehaviorEnum) => Option(fun)
		given putListSchemaProductVisibility: Conversion[List[Schema.ProductVisibility], Option[List[Schema.ProductVisibility]]] = (fun: List[Schema.ProductVisibility]) => Option(fun)
		given putListSchemaProductVisibilityTracksEnum: Conversion[List[Schema.ProductVisibility.TracksEnum], Option[List[Schema.ProductVisibility.TracksEnum]]] = (fun: List[Schema.ProductVisibility.TracksEnum]) => Option(fun)
		given putListSchemaWebAppIcon: Conversion[List[Schema.WebAppIcon], Option[List[Schema.WebAppIcon]]] = (fun: List[Schema.WebAppIcon]) => Option(fun)
		given putSchemaWebAppDisplayModeEnum: Conversion[Schema.WebApp.DisplayModeEnum, Option[Schema.WebApp.DisplayModeEnum]] = (fun: Schema.WebApp.DisplayModeEnum) => Option(fun)
		given putListSchemaWebApp: Conversion[List[Schema.WebApp], Option[List[Schema.WebApp]]] = (fun: List[Schema.WebApp]) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
