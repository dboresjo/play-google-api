package com.boresjo.play.api.google.healthcare

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaLocation: Conversion[List[Schema.Location], Option[List[Schema.Location]]] = (fun: List[Schema.Location]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putMapStringJsValue: Conversion[Map[String, JsValue], Option[Map[String, JsValue]]] = (fun: Map[String, JsValue]) => Option(fun)
		given putSchemaPolicy: Conversion[Schema.Policy, Option[Schema.Policy]] = (fun: Schema.Policy) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListSchemaBinding: Conversion[List[Schema.Binding], Option[List[Schema.Binding]]] = (fun: List[Schema.Binding]) => Option(fun)
		given putListSchemaAuditConfig: Conversion[List[Schema.AuditConfig], Option[List[Schema.AuditConfig]]] = (fun: List[Schema.AuditConfig]) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putSchemaExpr: Conversion[Schema.Expr, Option[Schema.Expr]] = (fun: Schema.Expr) => Option(fun)
		given putListSchemaAuditLogConfig: Conversion[List[Schema.AuditLogConfig], Option[List[Schema.AuditLogConfig]]] = (fun: List[Schema.AuditLogConfig]) => Option(fun)
		given putSchemaAuditLogConfigLogTypeEnum: Conversion[Schema.AuditLogConfig.LogTypeEnum, Option[Schema.AuditLogConfig.LogTypeEnum]] = (fun: Schema.AuditLogConfig.LogTypeEnum) => Option(fun)
		given putListSchemaOperation: Conversion[List[Schema.Operation], Option[List[Schema.Operation]]] = (fun: List[Schema.Operation]) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putListSchemaConsentStore: Conversion[List[Schema.ConsentStore], Option[List[Schema.ConsentStore]]] = (fun: List[Schema.ConsentStore]) => Option(fun)
		given putSchemaAttributeDefinitionCategoryEnum: Conversion[Schema.AttributeDefinition.CategoryEnum, Option[Schema.AttributeDefinition.CategoryEnum]] = (fun: Schema.AttributeDefinition.CategoryEnum) => Option(fun)
		given putListSchemaAttributeDefinition: Conversion[List[Schema.AttributeDefinition], Option[List[Schema.AttributeDefinition]]] = (fun: List[Schema.AttributeDefinition]) => Option(fun)
		given putSchemaSignature: Conversion[Schema.Signature, Option[Schema.Signature]] = (fun: Schema.Signature) => Option(fun)
		given putListSchemaImage: Conversion[List[Schema.Image], Option[List[Schema.Image]]] = (fun: List[Schema.Image]) => Option(fun)
		given putSchemaImage: Conversion[Schema.Image, Option[Schema.Image]] = (fun: Schema.Image) => Option(fun)
		given putListSchemaConsentArtifact: Conversion[List[Schema.ConsentArtifact], Option[List[Schema.ConsentArtifact]]] = (fun: List[Schema.ConsentArtifact]) => Option(fun)
		given putListSchemaGoogleCloudHealthcareV1ConsentPolicy: Conversion[List[Schema.GoogleCloudHealthcareV1ConsentPolicy], Option[List[Schema.GoogleCloudHealthcareV1ConsentPolicy]]] = (fun: List[Schema.GoogleCloudHealthcareV1ConsentPolicy]) => Option(fun)
		given putSchemaConsentStateEnum: Conversion[Schema.Consent.StateEnum, Option[Schema.Consent.StateEnum]] = (fun: Schema.Consent.StateEnum) => Option(fun)
		given putListSchemaAttribute: Conversion[List[Schema.Attribute], Option[List[Schema.Attribute]]] = (fun: List[Schema.Attribute]) => Option(fun)
		given putListSchemaConsent: Conversion[List[Schema.Consent], Option[List[Schema.Consent]]] = (fun: List[Schema.Consent]) => Option(fun)
		given putListSchemaUserDataMapping: Conversion[List[Schema.UserDataMapping], Option[List[Schema.UserDataMapping]]] = (fun: List[Schema.UserDataMapping]) => Option(fun)
		given putSchemaConsentList: Conversion[Schema.ConsentList, Option[Schema.ConsentList]] = (fun: Schema.ConsentList) => Option(fun)
		given putSchemaCheckDataAccessRequestResponseViewEnum: Conversion[Schema.CheckDataAccessRequest.ResponseViewEnum, Option[Schema.CheckDataAccessRequest.ResponseViewEnum]] = (fun: Schema.CheckDataAccessRequest.ResponseViewEnum) => Option(fun)
		given putMapStringSchemaConsentEvaluation: Conversion[Map[String, Schema.ConsentEvaluation], Option[Map[String, Schema.ConsentEvaluation]]] = (fun: Map[String, Schema.ConsentEvaluation]) => Option(fun)
		given putSchemaConsentEvaluationEvaluationResultEnum: Conversion[Schema.ConsentEvaluation.EvaluationResultEnum, Option[Schema.ConsentEvaluation.EvaluationResultEnum]] = (fun: Schema.ConsentEvaluation.EvaluationResultEnum) => Option(fun)
		given putSchemaGoogleCloudHealthcareV1ConsentGcsDestination: Conversion[Schema.GoogleCloudHealthcareV1ConsentGcsDestination, Option[Schema.GoogleCloudHealthcareV1ConsentGcsDestination]] = (fun: Schema.GoogleCloudHealthcareV1ConsentGcsDestination) => Option(fun)
		given putSchemaEvaluateUserConsentsRequestResponseViewEnum: Conversion[Schema.EvaluateUserConsentsRequest.ResponseViewEnum, Option[Schema.EvaluateUserConsentsRequest.ResponseViewEnum]] = (fun: Schema.EvaluateUserConsentsRequest.ResponseViewEnum) => Option(fun)
		given putListSchemaResult: Conversion[List[Schema.Result], Option[List[Schema.Result]]] = (fun: List[Schema.Result]) => Option(fun)
		given putSchemaDeidentifyConfig: Conversion[Schema.DeidentifyConfig, Option[Schema.DeidentifyConfig]] = (fun: Schema.DeidentifyConfig) => Option(fun)
		given putSchemaFhirFilter: Conversion[Schema.FhirFilter, Option[Schema.FhirFilter]] = (fun: Schema.FhirFilter) => Option(fun)
		given putSchemaDicomConfig: Conversion[Schema.DicomConfig, Option[Schema.DicomConfig]] = (fun: Schema.DicomConfig) => Option(fun)
		given putSchemaFhirConfig: Conversion[Schema.FhirConfig, Option[Schema.FhirConfig]] = (fun: Schema.FhirConfig) => Option(fun)
		given putSchemaImageConfig: Conversion[Schema.ImageConfig, Option[Schema.ImageConfig]] = (fun: Schema.ImageConfig) => Option(fun)
		given putSchemaTextConfig: Conversion[Schema.TextConfig, Option[Schema.TextConfig]] = (fun: Schema.TextConfig) => Option(fun)
		given putSchemaTagFilterList: Conversion[Schema.TagFilterList, Option[Schema.TagFilterList]] = (fun: Schema.TagFilterList) => Option(fun)
		given putSchemaDicomConfigFilterProfileEnum: Conversion[Schema.DicomConfig.FilterProfileEnum, Option[Schema.DicomConfig.FilterProfileEnum]] = (fun: Schema.DicomConfig.FilterProfileEnum) => Option(fun)
		given putListSchemaFieldMetadata: Conversion[List[Schema.FieldMetadata], Option[List[Schema.FieldMetadata]]] = (fun: List[Schema.FieldMetadata]) => Option(fun)
		given putSchemaFieldMetadataActionEnum: Conversion[Schema.FieldMetadata.ActionEnum, Option[Schema.FieldMetadata.ActionEnum]] = (fun: Schema.FieldMetadata.ActionEnum) => Option(fun)
		given putSchemaImageConfigTextRedactionModeEnum: Conversion[Schema.ImageConfig.TextRedactionModeEnum, Option[Schema.ImageConfig.TextRedactionModeEnum]] = (fun: Schema.ImageConfig.TextRedactionModeEnum) => Option(fun)
		given putListSchemaInfoTypeTransformation: Conversion[List[Schema.InfoTypeTransformation], Option[List[Schema.InfoTypeTransformation]]] = (fun: List[Schema.InfoTypeTransformation]) => Option(fun)
		given putSchemaRedactConfig: Conversion[Schema.RedactConfig, Option[Schema.RedactConfig]] = (fun: Schema.RedactConfig) => Option(fun)
		given putSchemaCharacterMaskConfig: Conversion[Schema.CharacterMaskConfig, Option[Schema.CharacterMaskConfig]] = (fun: Schema.CharacterMaskConfig) => Option(fun)
		given putSchemaDateShiftConfig: Conversion[Schema.DateShiftConfig, Option[Schema.DateShiftConfig]] = (fun: Schema.DateShiftConfig) => Option(fun)
		given putSchemaCryptoHashConfig: Conversion[Schema.CryptoHashConfig, Option[Schema.CryptoHashConfig]] = (fun: Schema.CryptoHashConfig) => Option(fun)
		given putSchemaReplaceWithInfoTypeConfig: Conversion[Schema.ReplaceWithInfoTypeConfig, Option[Schema.ReplaceWithInfoTypeConfig]] = (fun: Schema.ReplaceWithInfoTypeConfig) => Option(fun)
		given putSchemaKmsWrappedCryptoKey: Conversion[Schema.KmsWrappedCryptoKey, Option[Schema.KmsWrappedCryptoKey]] = (fun: Schema.KmsWrappedCryptoKey) => Option(fun)
		given putSchemaResources: Conversion[Schema.Resources, Option[Schema.Resources]] = (fun: Schema.Resources) => Option(fun)
		given putSchemaDicomFilterConfig: Conversion[Schema.DicomFilterConfig, Option[Schema.DicomFilterConfig]] = (fun: Schema.DicomFilterConfig) => Option(fun)
		given putSchemaEncryptionSpec: Conversion[Schema.EncryptionSpec, Option[Schema.EncryptionSpec]] = (fun: Schema.EncryptionSpec) => Option(fun)
		given putListSchemaDataset: Conversion[List[Schema.Dataset], Option[List[Schema.Dataset]]] = (fun: List[Schema.Dataset]) => Option(fun)
		given putSchemaStructuredStorageInfo: Conversion[Schema.StructuredStorageInfo, Option[Schema.StructuredStorageInfo]] = (fun: Schema.StructuredStorageInfo) => Option(fun)
		given putSchemaBlobStorageInfo: Conversion[Schema.BlobStorageInfo, Option[Schema.BlobStorageInfo]] = (fun: Schema.BlobStorageInfo) => Option(fun)
		given putSchemaBlobStorageInfoStorageClassEnum: Conversion[Schema.BlobStorageInfo.StorageClassEnum, Option[Schema.BlobStorageInfo.StorageClassEnum]] = (fun: Schema.BlobStorageInfo.StorageClassEnum) => Option(fun)
		given putSchemaBlobStorageSettings: Conversion[Schema.BlobStorageSettings, Option[Schema.BlobStorageSettings]] = (fun: Schema.BlobStorageSettings) => Option(fun)
		given putSchemaBlobStorageSettingsBlobStorageClassEnum: Conversion[Schema.BlobStorageSettings.BlobStorageClassEnum, Option[Schema.BlobStorageSettings.BlobStorageClassEnum]] = (fun: Schema.BlobStorageSettings.BlobStorageClassEnum) => Option(fun)
		given putSchemaNotificationConfig: Conversion[Schema.NotificationConfig, Option[Schema.NotificationConfig]] = (fun: Schema.NotificationConfig) => Option(fun)
		given putListSchemaGoogleCloudHealthcareV1DicomStreamConfig: Conversion[List[Schema.GoogleCloudHealthcareV1DicomStreamConfig], Option[List[Schema.GoogleCloudHealthcareV1DicomStreamConfig]]] = (fun: List[Schema.GoogleCloudHealthcareV1DicomStreamConfig]) => Option(fun)
		given putSchemaGoogleCloudHealthcareV1DicomBigQueryDestination: Conversion[Schema.GoogleCloudHealthcareV1DicomBigQueryDestination, Option[Schema.GoogleCloudHealthcareV1DicomBigQueryDestination]] = (fun: Schema.GoogleCloudHealthcareV1DicomBigQueryDestination) => Option(fun)
		given putSchemaGoogleCloudHealthcareV1DicomBigQueryDestinationWriteDispositionEnum: Conversion[Schema.GoogleCloudHealthcareV1DicomBigQueryDestination.WriteDispositionEnum, Option[Schema.GoogleCloudHealthcareV1DicomBigQueryDestination.WriteDispositionEnum]] = (fun: Schema.GoogleCloudHealthcareV1DicomBigQueryDestination.WriteDispositionEnum) => Option(fun)
		given putListSchemaDicomStore: Conversion[List[Schema.DicomStore], Option[List[Schema.DicomStore]]] = (fun: List[Schema.DicomStore]) => Option(fun)
		given putSchemaGoogleCloudHealthcareV1DicomGcsSource: Conversion[Schema.GoogleCloudHealthcareV1DicomGcsSource, Option[Schema.GoogleCloudHealthcareV1DicomGcsSource]] = (fun: Schema.GoogleCloudHealthcareV1DicomGcsSource) => Option(fun)
		given putSchemaGoogleCloudHealthcareV1DicomGcsDestination: Conversion[Schema.GoogleCloudHealthcareV1DicomGcsDestination, Option[Schema.GoogleCloudHealthcareV1DicomGcsDestination]] = (fun: Schema.GoogleCloudHealthcareV1DicomGcsDestination) => Option(fun)
		given putSchemaParserConfig: Conversion[Schema.ParserConfig, Option[Schema.ParserConfig]] = (fun: Schema.ParserConfig) => Option(fun)
		given putListSchemaHl7V2NotificationConfig: Conversion[List[Schema.Hl7V2NotificationConfig], Option[List[Schema.Hl7V2NotificationConfig]]] = (fun: List[Schema.Hl7V2NotificationConfig]) => Option(fun)
		given putSchemaSchemaPackage: Conversion[Schema.SchemaPackage, Option[Schema.SchemaPackage]] = (fun: Schema.SchemaPackage) => Option(fun)
		given putSchemaParserConfigVersionEnum: Conversion[Schema.ParserConfig.VersionEnum, Option[Schema.ParserConfig.VersionEnum]] = (fun: Schema.ParserConfig.VersionEnum) => Option(fun)
		given putSchemaSchemaPackageSchematizedParsingTypeEnum: Conversion[Schema.SchemaPackage.SchematizedParsingTypeEnum, Option[Schema.SchemaPackage.SchematizedParsingTypeEnum]] = (fun: Schema.SchemaPackage.SchematizedParsingTypeEnum) => Option(fun)
		given putListSchemaHl7SchemaConfig: Conversion[List[Schema.Hl7SchemaConfig], Option[List[Schema.Hl7SchemaConfig]]] = (fun: List[Schema.Hl7SchemaConfig]) => Option(fun)
		given putListSchemaHl7TypesConfig: Conversion[List[Schema.Hl7TypesConfig], Option[List[Schema.Hl7TypesConfig]]] = (fun: List[Schema.Hl7TypesConfig]) => Option(fun)
		given putSchemaSchemaPackageUnexpectedSegmentHandlingEnum: Conversion[Schema.SchemaPackage.UnexpectedSegmentHandlingEnum, Option[Schema.SchemaPackage.UnexpectedSegmentHandlingEnum]] = (fun: Schema.SchemaPackage.UnexpectedSegmentHandlingEnum) => Option(fun)
		given putListSchemaVersionSource: Conversion[List[Schema.VersionSource], Option[List[Schema.VersionSource]]] = (fun: List[Schema.VersionSource]) => Option(fun)
		given putMapStringSchemaSchemaGroup: Conversion[Map[String, Schema.SchemaGroup], Option[Map[String, Schema.SchemaGroup]]] = (fun: Map[String, Schema.SchemaGroup]) => Option(fun)
		given putListSchemaGroupOrSegment: Conversion[List[Schema.GroupOrSegment], Option[List[Schema.GroupOrSegment]]] = (fun: List[Schema.GroupOrSegment]) => Option(fun)
		given putSchemaSchemaSegment: Conversion[Schema.SchemaSegment, Option[Schema.SchemaSegment]] = (fun: Schema.SchemaSegment) => Option(fun)
		given putSchemaSchemaGroup: Conversion[Schema.SchemaGroup, Option[Schema.SchemaGroup]] = (fun: Schema.SchemaGroup) => Option(fun)
		given putListSchemaType: Conversion[List[Schema.Type], Option[List[Schema.Type]]] = (fun: List[Schema.Type]) => Option(fun)
		given putSchemaTypePrimitiveEnum: Conversion[Schema.Type.PrimitiveEnum, Option[Schema.Type.PrimitiveEnum]] = (fun: Schema.Type.PrimitiveEnum) => Option(fun)
		given putListSchemaField: Conversion[List[Schema.Field], Option[List[Schema.Field]]] = (fun: List[Schema.Field]) => Option(fun)
		given putListSchemaHl7V2Store: Conversion[List[Schema.Hl7V2Store], Option[List[Schema.Hl7V2Store]]] = (fun: List[Schema.Hl7V2Store]) => Option(fun)
		given putSchemaMessage: Conversion[Schema.Message, Option[Schema.Message]] = (fun: Schema.Message) => Option(fun)
		given putListSchemaPatientId: Conversion[List[Schema.PatientId], Option[List[Schema.PatientId]]] = (fun: List[Schema.PatientId]) => Option(fun)
		given putSchemaParsedData: Conversion[Schema.ParsedData, Option[Schema.ParsedData]] = (fun: Schema.ParsedData) => Option(fun)
		given putSchemaSchematizedData: Conversion[Schema.SchematizedData, Option[Schema.SchematizedData]] = (fun: Schema.SchematizedData) => Option(fun)
		given putListSchemaSegment: Conversion[List[Schema.Segment], Option[List[Schema.Segment]]] = (fun: List[Schema.Segment]) => Option(fun)
		given putListSchemaMessage: Conversion[List[Schema.Message], Option[List[Schema.Message]]] = (fun: List[Schema.Message]) => Option(fun)
		given putSchemaGcsDestination: Conversion[Schema.GcsDestination, Option[Schema.GcsDestination]] = (fun: Schema.GcsDestination) => Option(fun)
		given putSchemaPubsubDestination: Conversion[Schema.PubsubDestination, Option[Schema.PubsubDestination]] = (fun: Schema.PubsubDestination) => Option(fun)
		given putSchemaGcsDestinationMessageViewEnum: Conversion[Schema.GcsDestination.MessageViewEnum, Option[Schema.GcsDestination.MessageViewEnum]] = (fun: Schema.GcsDestination.MessageViewEnum) => Option(fun)
		given putSchemaGcsDestinationContentStructureEnum: Conversion[Schema.GcsDestination.ContentStructureEnum, Option[Schema.GcsDestination.ContentStructureEnum]] = (fun: Schema.GcsDestination.ContentStructureEnum) => Option(fun)
		given putSchemaGcsSource: Conversion[Schema.GcsSource, Option[Schema.GcsSource]] = (fun: Schema.GcsSource) => Option(fun)
		given putListSchemaHl7V2StoreMetric: Conversion[List[Schema.Hl7V2StoreMetric], Option[List[Schema.Hl7V2StoreMetric]]] = (fun: List[Schema.Hl7V2StoreMetric]) => Option(fun)
		given putSchemaRollbackHl7V2MessagesRequestChangeTypeEnum: Conversion[Schema.RollbackHl7V2MessagesRequest.ChangeTypeEnum, Option[Schema.RollbackHl7V2MessagesRequest.ChangeTypeEnum]] = (fun: Schema.RollbackHl7V2MessagesRequest.ChangeTypeEnum) => Option(fun)
		given putSchemaRollbackHL7MessagesFilteringFields: Conversion[Schema.RollbackHL7MessagesFilteringFields, Option[Schema.RollbackHL7MessagesFilteringFields]] = (fun: Schema.RollbackHL7MessagesFilteringFields) => Option(fun)
		given putSchemaFhirStoreVersionEnum: Conversion[Schema.FhirStore.VersionEnum, Option[Schema.FhirStore.VersionEnum]] = (fun: Schema.FhirStore.VersionEnum) => Option(fun)
		given putListSchemaStreamConfig: Conversion[List[Schema.StreamConfig], Option[List[Schema.StreamConfig]]] = (fun: List[Schema.StreamConfig]) => Option(fun)
		given putSchemaValidationConfig: Conversion[Schema.ValidationConfig, Option[Schema.ValidationConfig]] = (fun: Schema.ValidationConfig) => Option(fun)
		given putSchemaFhirStoreComplexDataTypeReferenceParsingEnum: Conversion[Schema.FhirStore.ComplexDataTypeReferenceParsingEnum, Option[Schema.FhirStore.ComplexDataTypeReferenceParsingEnum]] = (fun: Schema.FhirStore.ComplexDataTypeReferenceParsingEnum) => Option(fun)
		given putListSchemaFhirNotificationConfig: Conversion[List[Schema.FhirNotificationConfig], Option[List[Schema.FhirNotificationConfig]]] = (fun: List[Schema.FhirNotificationConfig]) => Option(fun)
		given putSchemaGoogleCloudHealthcareV1FhirBigQueryDestination: Conversion[Schema.GoogleCloudHealthcareV1FhirBigQueryDestination, Option[Schema.GoogleCloudHealthcareV1FhirBigQueryDestination]] = (fun: Schema.GoogleCloudHealthcareV1FhirBigQueryDestination) => Option(fun)
		given putSchemaDeidentifiedStoreDestination: Conversion[Schema.DeidentifiedStoreDestination, Option[Schema.DeidentifiedStoreDestination]] = (fun: Schema.DeidentifiedStoreDestination) => Option(fun)
		given putSchemaSchemaConfig: Conversion[Schema.SchemaConfig, Option[Schema.SchemaConfig]] = (fun: Schema.SchemaConfig) => Option(fun)
		given putSchemaGoogleCloudHealthcareV1FhirBigQueryDestinationWriteDispositionEnum: Conversion[Schema.GoogleCloudHealthcareV1FhirBigQueryDestination.WriteDispositionEnum, Option[Schema.GoogleCloudHealthcareV1FhirBigQueryDestination.WriteDispositionEnum]] = (fun: Schema.GoogleCloudHealthcareV1FhirBigQueryDestination.WriteDispositionEnum) => Option(fun)
		given putSchemaSchemaConfigSchemaTypeEnum: Conversion[Schema.SchemaConfig.SchemaTypeEnum, Option[Schema.SchemaConfig.SchemaTypeEnum]] = (fun: Schema.SchemaConfig.SchemaTypeEnum) => Option(fun)
		given putSchemaTimePartitioning: Conversion[Schema.TimePartitioning, Option[Schema.TimePartitioning]] = (fun: Schema.TimePartitioning) => Option(fun)
		given putSchemaTimePartitioningTypeEnum: Conversion[Schema.TimePartitioning.TypeEnum, Option[Schema.TimePartitioning.TypeEnum]] = (fun: Schema.TimePartitioning.TypeEnum) => Option(fun)
		given putListSchemaFhirStore: Conversion[List[Schema.FhirStore], Option[List[Schema.FhirStore]]] = (fun: List[Schema.FhirStore]) => Option(fun)
		given putSchemaImportResourcesRequestContentStructureEnum: Conversion[Schema.ImportResourcesRequest.ContentStructureEnum, Option[Schema.ImportResourcesRequest.ContentStructureEnum]] = (fun: Schema.ImportResourcesRequest.ContentStructureEnum) => Option(fun)
		given putSchemaGoogleCloudHealthcareV1FhirGcsSource: Conversion[Schema.GoogleCloudHealthcareV1FhirGcsSource, Option[Schema.GoogleCloudHealthcareV1FhirGcsSource]] = (fun: Schema.GoogleCloudHealthcareV1FhirGcsSource) => Option(fun)
		given putSchemaGoogleCloudHealthcareV1FhirGcsDestination: Conversion[Schema.GoogleCloudHealthcareV1FhirGcsDestination, Option[Schema.GoogleCloudHealthcareV1FhirGcsDestination]] = (fun: Schema.GoogleCloudHealthcareV1FhirGcsDestination) => Option(fun)
		given putListSchemaFhirStoreMetric: Conversion[List[Schema.FhirStoreMetric], Option[List[Schema.FhirStoreMetric]]] = (fun: List[Schema.FhirStoreMetric]) => Option(fun)
		given putSchemaRollbackFhirResourceFilteringFields: Conversion[Schema.RollbackFhirResourceFilteringFields, Option[Schema.RollbackFhirResourceFilteringFields]] = (fun: Schema.RollbackFhirResourceFilteringFields) => Option(fun)
		given putSchemaRollbackFhirResourcesRequestChangeTypeEnum: Conversion[Schema.RollbackFhirResourcesRequest.ChangeTypeEnum, Option[Schema.RollbackFhirResourcesRequest.ChangeTypeEnum]] = (fun: Schema.RollbackFhirResourcesRequest.ChangeTypeEnum) => Option(fun)
		given putListSchemaAnalyzeEntitiesRequestLicensedVocabulariesEnum: Conversion[List[Schema.AnalyzeEntitiesRequest.LicensedVocabulariesEnum], Option[List[Schema.AnalyzeEntitiesRequest.LicensedVocabulariesEnum]]] = (fun: List[Schema.AnalyzeEntitiesRequest.LicensedVocabulariesEnum]) => Option(fun)
		given putSchemaAnalyzeEntitiesRequestAlternativeOutputFormatEnum: Conversion[Schema.AnalyzeEntitiesRequest.AlternativeOutputFormatEnum, Option[Schema.AnalyzeEntitiesRequest.AlternativeOutputFormatEnum]] = (fun: Schema.AnalyzeEntitiesRequest.AlternativeOutputFormatEnum) => Option(fun)
		given putListSchemaEntityMention: Conversion[List[Schema.EntityMention], Option[List[Schema.EntityMention]]] = (fun: List[Schema.EntityMention]) => Option(fun)
		given putListSchemaEntity: Conversion[List[Schema.Entity], Option[List[Schema.Entity]]] = (fun: List[Schema.Entity]) => Option(fun)
		given putListSchemaEntityMentionRelationship: Conversion[List[Schema.EntityMentionRelationship], Option[List[Schema.EntityMentionRelationship]]] = (fun: List[Schema.EntityMentionRelationship]) => Option(fun)
		given putSchemaTextSpan: Conversion[Schema.TextSpan, Option[Schema.TextSpan]] = (fun: Schema.TextSpan) => Option(fun)
		given putListSchemaLinkedEntity: Conversion[List[Schema.LinkedEntity], Option[List[Schema.LinkedEntity]]] = (fun: List[Schema.LinkedEntity]) => Option(fun)
		given putSchemaFeature: Conversion[Schema.Feature, Option[Schema.Feature]] = (fun: Schema.Feature) => Option(fun)
		given putBigDecimal: Conversion[BigDecimal, Option[BigDecimal]] = (fun: BigDecimal) => Option(fun)
		given putSchemaProgressCounter: Conversion[Schema.ProgressCounter, Option[Schema.ProgressCounter]] = (fun: Schema.ProgressCounter) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
