package com.boresjo.play.api.google.vmwareengine

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaOperation: Conversion[List[Schema.Operation], Option[List[Schema.Operation]]] = (fun: List[Schema.Operation]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putMapStringJsValue: Conversion[Map[String, JsValue], Option[Map[String, JsValue]]] = (fun: Map[String, JsValue]) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putListSchemaPrivateCloud: Conversion[List[Schema.PrivateCloud], Option[List[Schema.PrivateCloud]]] = (fun: List[Schema.PrivateCloud]) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putSchemaPrivateCloudStateEnum: Conversion[Schema.PrivateCloud.StateEnum, Option[Schema.PrivateCloud.StateEnum]] = (fun: Schema.PrivateCloud.StateEnum) => Option(fun)
		given putSchemaNetworkConfig: Conversion[Schema.NetworkConfig, Option[Schema.NetworkConfig]] = (fun: Schema.NetworkConfig) => Option(fun)
		given putSchemaManagementCluster: Conversion[Schema.ManagementCluster, Option[Schema.ManagementCluster]] = (fun: Schema.ManagementCluster) => Option(fun)
		given putSchemaHcx: Conversion[Schema.Hcx, Option[Schema.Hcx]] = (fun: Schema.Hcx) => Option(fun)
		given putSchemaNsx: Conversion[Schema.Nsx, Option[Schema.Nsx]] = (fun: Schema.Nsx) => Option(fun)
		given putSchemaVcenter: Conversion[Schema.Vcenter, Option[Schema.Vcenter]] = (fun: Schema.Vcenter) => Option(fun)
		given putSchemaPrivateCloudTypeEnum: Conversion[Schema.PrivateCloud.TypeEnum, Option[Schema.PrivateCloud.TypeEnum]] = (fun: Schema.PrivateCloud.TypeEnum) => Option(fun)
		given putMapStringSchemaNodeTypeConfig: Conversion[Map[String, Schema.NodeTypeConfig], Option[Map[String, Schema.NodeTypeConfig]]] = (fun: Map[String, Schema.NodeTypeConfig]) => Option(fun)
		given putSchemaStretchedClusterConfig: Conversion[Schema.StretchedClusterConfig, Option[Schema.StretchedClusterConfig]] = (fun: Schema.StretchedClusterConfig) => Option(fun)
		given putSchemaHcxStateEnum: Conversion[Schema.Hcx.StateEnum, Option[Schema.Hcx.StateEnum]] = (fun: Schema.Hcx.StateEnum) => Option(fun)
		given putSchemaNsxStateEnum: Conversion[Schema.Nsx.StateEnum, Option[Schema.Nsx.StateEnum]] = (fun: Schema.Nsx.StateEnum) => Option(fun)
		given putSchemaVcenterStateEnum: Conversion[Schema.Vcenter.StateEnum, Option[Schema.Vcenter.StateEnum]] = (fun: Schema.Vcenter.StateEnum) => Option(fun)
		given putListSchemaCluster: Conversion[List[Schema.Cluster], Option[List[Schema.Cluster]]] = (fun: List[Schema.Cluster]) => Option(fun)
		given putSchemaClusterStateEnum: Conversion[Schema.Cluster.StateEnum, Option[Schema.Cluster.StateEnum]] = (fun: Schema.Cluster.StateEnum) => Option(fun)
		given putSchemaAutoscalingSettings: Conversion[Schema.AutoscalingSettings, Option[Schema.AutoscalingSettings]] = (fun: Schema.AutoscalingSettings) => Option(fun)
		given putMapStringSchemaAutoscalingPolicy: Conversion[Map[String, Schema.AutoscalingPolicy], Option[Map[String, Schema.AutoscalingPolicy]]] = (fun: Map[String, Schema.AutoscalingPolicy]) => Option(fun)
		given putSchemaThresholds: Conversion[Schema.Thresholds, Option[Schema.Thresholds]] = (fun: Schema.Thresholds) => Option(fun)
		given putListSchemaNode: Conversion[List[Schema.Node], Option[List[Schema.Node]]] = (fun: List[Schema.Node]) => Option(fun)
		given putSchemaNodeStateEnum: Conversion[Schema.Node.StateEnum, Option[Schema.Node.StateEnum]] = (fun: Schema.Node.StateEnum) => Option(fun)
		given putListSchemaExternalAddress: Conversion[List[Schema.ExternalAddress], Option[List[Schema.ExternalAddress]]] = (fun: List[Schema.ExternalAddress]) => Option(fun)
		given putSchemaExternalAddressStateEnum: Conversion[Schema.ExternalAddress.StateEnum, Option[Schema.ExternalAddress.StateEnum]] = (fun: Schema.ExternalAddress.StateEnum) => Option(fun)
		given putListSchemaSubnet: Conversion[List[Schema.Subnet], Option[List[Schema.Subnet]]] = (fun: List[Schema.Subnet]) => Option(fun)
		given putSchemaSubnetStateEnum: Conversion[Schema.Subnet.StateEnum, Option[Schema.Subnet.StateEnum]] = (fun: Schema.Subnet.StateEnum) => Option(fun)
		given putListSchemaExternalAccessRule: Conversion[List[Schema.ExternalAccessRule], Option[List[Schema.ExternalAccessRule]]] = (fun: List[Schema.ExternalAccessRule]) => Option(fun)
		given putSchemaExternalAccessRuleActionEnum: Conversion[Schema.ExternalAccessRule.ActionEnum, Option[Schema.ExternalAccessRule.ActionEnum]] = (fun: Schema.ExternalAccessRule.ActionEnum) => Option(fun)
		given putListSchemaIpRange: Conversion[List[Schema.IpRange], Option[List[Schema.IpRange]]] = (fun: List[Schema.IpRange]) => Option(fun)
		given putSchemaExternalAccessRuleStateEnum: Conversion[Schema.ExternalAccessRule.StateEnum, Option[Schema.ExternalAccessRule.StateEnum]] = (fun: Schema.ExternalAccessRule.StateEnum) => Option(fun)
		given putListSchemaLoggingServer: Conversion[List[Schema.LoggingServer], Option[List[Schema.LoggingServer]]] = (fun: List[Schema.LoggingServer]) => Option(fun)
		given putSchemaLoggingServerProtocolEnum: Conversion[Schema.LoggingServer.ProtocolEnum, Option[Schema.LoggingServer.ProtocolEnum]] = (fun: Schema.LoggingServer.ProtocolEnum) => Option(fun)
		given putSchemaLoggingServerSourceTypeEnum: Conversion[Schema.LoggingServer.SourceTypeEnum, Option[Schema.LoggingServer.SourceTypeEnum]] = (fun: Schema.LoggingServer.SourceTypeEnum) => Option(fun)
		given putListSchemaNodeType: Conversion[List[Schema.NodeType], Option[List[Schema.NodeType]]] = (fun: List[Schema.NodeType]) => Option(fun)
		given putListInt: Conversion[List[Int], Option[List[Int]]] = (fun: List[Int]) => Option(fun)
		given putSchemaNodeTypeKindEnum: Conversion[Schema.NodeType.KindEnum, Option[Schema.NodeType.KindEnum]] = (fun: Schema.NodeType.KindEnum) => Option(fun)
		given putListSchemaNodeTypeCapabilitiesEnum: Conversion[List[Schema.NodeType.CapabilitiesEnum], Option[List[Schema.NodeType.CapabilitiesEnum]]] = (fun: List[Schema.NodeType.CapabilitiesEnum]) => Option(fun)
		given putListSchemaForwardingRule: Conversion[List[Schema.ForwardingRule], Option[List[Schema.ForwardingRule]]] = (fun: List[Schema.ForwardingRule]) => Option(fun)
		given putSchemaNetworkPeeringStateEnum: Conversion[Schema.NetworkPeering.StateEnum, Option[Schema.NetworkPeering.StateEnum]] = (fun: Schema.NetworkPeering.StateEnum) => Option(fun)
		given putSchemaNetworkPeeringPeerNetworkTypeEnum: Conversion[Schema.NetworkPeering.PeerNetworkTypeEnum, Option[Schema.NetworkPeering.PeerNetworkTypeEnum]] = (fun: Schema.NetworkPeering.PeerNetworkTypeEnum) => Option(fun)
		given putListSchemaNetworkPeering: Conversion[List[Schema.NetworkPeering], Option[List[Schema.NetworkPeering]]] = (fun: List[Schema.NetworkPeering]) => Option(fun)
		given putListSchemaPeeringRoute: Conversion[List[Schema.PeeringRoute], Option[List[Schema.PeeringRoute]]] = (fun: List[Schema.PeeringRoute]) => Option(fun)
		given putSchemaPeeringRouteTypeEnum: Conversion[Schema.PeeringRoute.TypeEnum, Option[Schema.PeeringRoute.TypeEnum]] = (fun: Schema.PeeringRoute.TypeEnum) => Option(fun)
		given putSchemaPeeringRouteDirectionEnum: Conversion[Schema.PeeringRoute.DirectionEnum, Option[Schema.PeeringRoute.DirectionEnum]] = (fun: Schema.PeeringRoute.DirectionEnum) => Option(fun)
		given putSchemaHcxActivationKeyStateEnum: Conversion[Schema.HcxActivationKey.StateEnum, Option[Schema.HcxActivationKey.StateEnum]] = (fun: Schema.HcxActivationKey.StateEnum) => Option(fun)
		given putListSchemaHcxActivationKey: Conversion[List[Schema.HcxActivationKey], Option[List[Schema.HcxActivationKey]]] = (fun: List[Schema.HcxActivationKey]) => Option(fun)
		given putSchemaNetworkService: Conversion[Schema.NetworkService, Option[Schema.NetworkService]] = (fun: Schema.NetworkService) => Option(fun)
		given putSchemaNetworkServiceStateEnum: Conversion[Schema.NetworkService.StateEnum, Option[Schema.NetworkService.StateEnum]] = (fun: Schema.NetworkService.StateEnum) => Option(fun)
		given putListSchemaNetworkPolicy: Conversion[List[Schema.NetworkPolicy], Option[List[Schema.NetworkPolicy]]] = (fun: List[Schema.NetworkPolicy]) => Option(fun)
		given putListSchemaManagementDnsZoneBinding: Conversion[List[Schema.ManagementDnsZoneBinding], Option[List[Schema.ManagementDnsZoneBinding]]] = (fun: List[Schema.ManagementDnsZoneBinding]) => Option(fun)
		given putSchemaManagementDnsZoneBindingStateEnum: Conversion[Schema.ManagementDnsZoneBinding.StateEnum, Option[Schema.ManagementDnsZoneBinding.StateEnum]] = (fun: Schema.ManagementDnsZoneBinding.StateEnum) => Option(fun)
		given putListSchemaVpcNetwork: Conversion[List[Schema.VpcNetwork], Option[List[Schema.VpcNetwork]]] = (fun: List[Schema.VpcNetwork]) => Option(fun)
		given putSchemaVmwareEngineNetworkStateEnum: Conversion[Schema.VmwareEngineNetwork.StateEnum, Option[Schema.VmwareEngineNetwork.StateEnum]] = (fun: Schema.VmwareEngineNetwork.StateEnum) => Option(fun)
		given putSchemaVmwareEngineNetworkTypeEnum: Conversion[Schema.VmwareEngineNetwork.TypeEnum, Option[Schema.VmwareEngineNetwork.TypeEnum]] = (fun: Schema.VmwareEngineNetwork.TypeEnum) => Option(fun)
		given putSchemaVpcNetworkTypeEnum: Conversion[Schema.VpcNetwork.TypeEnum, Option[Schema.VpcNetwork.TypeEnum]] = (fun: Schema.VpcNetwork.TypeEnum) => Option(fun)
		given putListSchemaVmwareEngineNetwork: Conversion[List[Schema.VmwareEngineNetwork], Option[List[Schema.VmwareEngineNetwork]]] = (fun: List[Schema.VmwareEngineNetwork]) => Option(fun)
		given putSchemaPrivateConnectionStateEnum: Conversion[Schema.PrivateConnection.StateEnum, Option[Schema.PrivateConnection.StateEnum]] = (fun: Schema.PrivateConnection.StateEnum) => Option(fun)
		given putSchemaPrivateConnectionTypeEnum: Conversion[Schema.PrivateConnection.TypeEnum, Option[Schema.PrivateConnection.TypeEnum]] = (fun: Schema.PrivateConnection.TypeEnum) => Option(fun)
		given putSchemaPrivateConnectionRoutingModeEnum: Conversion[Schema.PrivateConnection.RoutingModeEnum, Option[Schema.PrivateConnection.RoutingModeEnum]] = (fun: Schema.PrivateConnection.RoutingModeEnum) => Option(fun)
		given putSchemaPrivateConnectionPeeringStateEnum: Conversion[Schema.PrivateConnection.PeeringStateEnum, Option[Schema.PrivateConnection.PeeringStateEnum]] = (fun: Schema.PrivateConnection.PeeringStateEnum) => Option(fun)
		given putListSchemaPrivateConnection: Conversion[List[Schema.PrivateConnection], Option[List[Schema.PrivateConnection]]] = (fun: List[Schema.PrivateConnection]) => Option(fun)
		given putSchemaPrincipal: Conversion[Schema.Principal, Option[Schema.Principal]] = (fun: Schema.Principal) => Option(fun)
		given putListSchemaPrincipal: Conversion[List[Schema.Principal], Option[List[Schema.Principal]]] = (fun: List[Schema.Principal]) => Option(fun)
		given putListSchemaLocation: Conversion[List[Schema.Location], Option[List[Schema.Location]]] = (fun: List[Schema.Location]) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putSchemaPolicy: Conversion[Schema.Policy, Option[Schema.Policy]] = (fun: Schema.Policy) => Option(fun)
		given putListSchemaBinding: Conversion[List[Schema.Binding], Option[List[Schema.Binding]]] = (fun: List[Schema.Binding]) => Option(fun)
		given putListSchemaAuditConfig: Conversion[List[Schema.AuditConfig], Option[List[Schema.AuditConfig]]] = (fun: List[Schema.AuditConfig]) => Option(fun)
		given putSchemaExpr: Conversion[Schema.Expr, Option[Schema.Expr]] = (fun: Schema.Expr) => Option(fun)
		given putListSchemaAuditLogConfig: Conversion[List[Schema.AuditLogConfig], Option[List[Schema.AuditLogConfig]]] = (fun: List[Schema.AuditLogConfig]) => Option(fun)
		given putSchemaAuditLogConfigLogTypeEnum: Conversion[Schema.AuditLogConfig.LogTypeEnum, Option[Schema.AuditLogConfig.LogTypeEnum]] = (fun: Schema.AuditLogConfig.LogTypeEnum) => Option(fun)
		given putListSchemaLocationMetadataCapabilitiesEnum: Conversion[List[Schema.LocationMetadata.CapabilitiesEnum], Option[List[Schema.LocationMetadata.CapabilitiesEnum]]] = (fun: List[Schema.LocationMetadata.CapabilitiesEnum]) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
