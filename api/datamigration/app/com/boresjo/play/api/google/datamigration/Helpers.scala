package com.boresjo.play.api.google.datamigration

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaOperation: Conversion[List[Schema.Operation], Option[List[Schema.Operation]]] = (fun: List[Schema.Operation]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putMapStringJsValue: Conversion[Map[String, JsValue], Option[Map[String, JsValue]]] = (fun: Map[String, JsValue]) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putListSchemaMigrationJob: Conversion[List[Schema.MigrationJob], Option[List[Schema.MigrationJob]]] = (fun: List[Schema.MigrationJob]) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putSchemaMigrationJobStateEnum: Conversion[Schema.MigrationJob.StateEnum, Option[Schema.MigrationJob.StateEnum]] = (fun: Schema.MigrationJob.StateEnum) => Option(fun)
		given putSchemaMigrationJobPhaseEnum: Conversion[Schema.MigrationJob.PhaseEnum, Option[Schema.MigrationJob.PhaseEnum]] = (fun: Schema.MigrationJob.PhaseEnum) => Option(fun)
		given putSchemaMigrationJobTypeEnum: Conversion[Schema.MigrationJob.TypeEnum, Option[Schema.MigrationJob.TypeEnum]] = (fun: Schema.MigrationJob.TypeEnum) => Option(fun)
		given putSchemaDumpFlags: Conversion[Schema.DumpFlags, Option[Schema.DumpFlags]] = (fun: Schema.DumpFlags) => Option(fun)
		given putSchemaReverseSshConnectivity: Conversion[Schema.ReverseSshConnectivity, Option[Schema.ReverseSshConnectivity]] = (fun: Schema.ReverseSshConnectivity) => Option(fun)
		given putSchemaVpcPeeringConnectivity: Conversion[Schema.VpcPeeringConnectivity, Option[Schema.VpcPeeringConnectivity]] = (fun: Schema.VpcPeeringConnectivity) => Option(fun)
		given putSchemaStaticIpConnectivity: Conversion[Schema.StaticIpConnectivity, Option[Schema.StaticIpConnectivity]] = (fun: Schema.StaticIpConnectivity) => Option(fun)
		given putSchemaDatabaseType: Conversion[Schema.DatabaseType, Option[Schema.DatabaseType]] = (fun: Schema.DatabaseType) => Option(fun)
		given putSchemaConversionWorkspaceInfo: Conversion[Schema.ConversionWorkspaceInfo, Option[Schema.ConversionWorkspaceInfo]] = (fun: Schema.ConversionWorkspaceInfo) => Option(fun)
		given putSchemaPerformanceConfig: Conversion[Schema.PerformanceConfig, Option[Schema.PerformanceConfig]] = (fun: Schema.PerformanceConfig) => Option(fun)
		given putSchemaSqlServerHomogeneousMigrationJobConfig: Conversion[Schema.SqlServerHomogeneousMigrationJobConfig, Option[Schema.SqlServerHomogeneousMigrationJobConfig]] = (fun: Schema.SqlServerHomogeneousMigrationJobConfig) => Option(fun)
		given putSchemaMigrationJobDumpTypeEnum: Conversion[Schema.MigrationJob.DumpTypeEnum, Option[Schema.MigrationJob.DumpTypeEnum]] = (fun: Schema.MigrationJob.DumpTypeEnum) => Option(fun)
		given putSchemaOracleToPostgresConfig: Conversion[Schema.OracleToPostgresConfig, Option[Schema.OracleToPostgresConfig]] = (fun: Schema.OracleToPostgresConfig) => Option(fun)
		given putListSchemaDumpFlag: Conversion[List[Schema.DumpFlag], Option[List[Schema.DumpFlag]]] = (fun: List[Schema.DumpFlag]) => Option(fun)
		given putSchemaDatabaseTypeProviderEnum: Conversion[Schema.DatabaseType.ProviderEnum, Option[Schema.DatabaseType.ProviderEnum]] = (fun: Schema.DatabaseType.ProviderEnum) => Option(fun)
		given putSchemaDatabaseTypeEngineEnum: Conversion[Schema.DatabaseType.EngineEnum, Option[Schema.DatabaseType.EngineEnum]] = (fun: Schema.DatabaseType.EngineEnum) => Option(fun)
		given putSchemaPerformanceConfigDumpParallelLevelEnum: Conversion[Schema.PerformanceConfig.DumpParallelLevelEnum, Option[Schema.PerformanceConfig.DumpParallelLevelEnum]] = (fun: Schema.PerformanceConfig.DumpParallelLevelEnum) => Option(fun)
		given putListSchemaSqlServerDatabaseBackup: Conversion[List[Schema.SqlServerDatabaseBackup], Option[List[Schema.SqlServerDatabaseBackup]]] = (fun: List[Schema.SqlServerDatabaseBackup]) => Option(fun)
		given putSchemaSqlServerEncryptionOptions: Conversion[Schema.SqlServerEncryptionOptions, Option[Schema.SqlServerEncryptionOptions]] = (fun: Schema.SqlServerEncryptionOptions) => Option(fun)
		given putSchemaOracleSourceConfig: Conversion[Schema.OracleSourceConfig, Option[Schema.OracleSourceConfig]] = (fun: Schema.OracleSourceConfig) => Option(fun)
		given putSchemaPostgresDestinationConfig: Conversion[Schema.PostgresDestinationConfig, Option[Schema.PostgresDestinationConfig]] = (fun: Schema.PostgresDestinationConfig) => Option(fun)
		given putSchemaLogMiner: Conversion[Schema.LogMiner, Option[Schema.LogMiner]] = (fun: Schema.LogMiner) => Option(fun)
		given putSchemaBinaryLogParser: Conversion[Schema.BinaryLogParser, Option[Schema.BinaryLogParser]] = (fun: Schema.BinaryLogParser) => Option(fun)
		given putSchemaOracleAsmLogFileAccess: Conversion[Schema.OracleAsmLogFileAccess, Option[Schema.OracleAsmLogFileAccess]] = (fun: Schema.OracleAsmLogFileAccess) => Option(fun)
		given putSchemaLogFileDirectories: Conversion[Schema.LogFileDirectories, Option[Schema.LogFileDirectories]] = (fun: Schema.LogFileDirectories) => Option(fun)
		given putSchemaMigrationJob: Conversion[Schema.MigrationJob, Option[Schema.MigrationJob]] = (fun: Schema.MigrationJob) => Option(fun)
		given putSchemaVmCreationConfig: Conversion[Schema.VmCreationConfig, Option[Schema.VmCreationConfig]] = (fun: Schema.VmCreationConfig) => Option(fun)
		given putSchemaVmSelectionConfig: Conversion[Schema.VmSelectionConfig, Option[Schema.VmSelectionConfig]] = (fun: Schema.VmSelectionConfig) => Option(fun)
		given putListSchemaConnectionProfile: Conversion[List[Schema.ConnectionProfile], Option[List[Schema.ConnectionProfile]]] = (fun: List[Schema.ConnectionProfile]) => Option(fun)
		given putSchemaConnectionProfileStateEnum: Conversion[Schema.ConnectionProfile.StateEnum, Option[Schema.ConnectionProfile.StateEnum]] = (fun: Schema.ConnectionProfile.StateEnum) => Option(fun)
		given putSchemaConnectionProfileRoleEnum: Conversion[Schema.ConnectionProfile.RoleEnum, Option[Schema.ConnectionProfile.RoleEnum]] = (fun: Schema.ConnectionProfile.RoleEnum) => Option(fun)
		given putSchemaMySqlConnectionProfile: Conversion[Schema.MySqlConnectionProfile, Option[Schema.MySqlConnectionProfile]] = (fun: Schema.MySqlConnectionProfile) => Option(fun)
		given putSchemaPostgreSqlConnectionProfile: Conversion[Schema.PostgreSqlConnectionProfile, Option[Schema.PostgreSqlConnectionProfile]] = (fun: Schema.PostgreSqlConnectionProfile) => Option(fun)
		given putSchemaSqlServerConnectionProfile: Conversion[Schema.SqlServerConnectionProfile, Option[Schema.SqlServerConnectionProfile]] = (fun: Schema.SqlServerConnectionProfile) => Option(fun)
		given putSchemaOracleConnectionProfile: Conversion[Schema.OracleConnectionProfile, Option[Schema.OracleConnectionProfile]] = (fun: Schema.OracleConnectionProfile) => Option(fun)
		given putSchemaCloudSqlConnectionProfile: Conversion[Schema.CloudSqlConnectionProfile, Option[Schema.CloudSqlConnectionProfile]] = (fun: Schema.CloudSqlConnectionProfile) => Option(fun)
		given putSchemaAlloyDbConnectionProfile: Conversion[Schema.AlloyDbConnectionProfile, Option[Schema.AlloyDbConnectionProfile]] = (fun: Schema.AlloyDbConnectionProfile) => Option(fun)
		given putSchemaConnectionProfileProviderEnum: Conversion[Schema.ConnectionProfile.ProviderEnum, Option[Schema.ConnectionProfile.ProviderEnum]] = (fun: Schema.ConnectionProfile.ProviderEnum) => Option(fun)
		given putSchemaSslConfig: Conversion[Schema.SslConfig, Option[Schema.SslConfig]] = (fun: Schema.SslConfig) => Option(fun)
		given putSchemaSslConfigTypeEnum: Conversion[Schema.SslConfig.TypeEnum, Option[Schema.SslConfig.TypeEnum]] = (fun: Schema.SslConfig.TypeEnum) => Option(fun)
		given putSchemaPostgreSqlConnectionProfileNetworkArchitectureEnum: Conversion[Schema.PostgreSqlConnectionProfile.NetworkArchitectureEnum, Option[Schema.PostgreSqlConnectionProfile.NetworkArchitectureEnum]] = (fun: Schema.PostgreSqlConnectionProfile.NetworkArchitectureEnum) => Option(fun)
		given putSchemaPrivateServiceConnectConnectivity: Conversion[Schema.PrivateServiceConnectConnectivity, Option[Schema.PrivateServiceConnectConnectivity]] = (fun: Schema.PrivateServiceConnectConnectivity) => Option(fun)
		given putSchemaSqlServerBackups: Conversion[Schema.SqlServerBackups, Option[Schema.SqlServerBackups]] = (fun: Schema.SqlServerBackups) => Option(fun)
		given putSchemaForwardSshTunnelConnectivity: Conversion[Schema.ForwardSshTunnelConnectivity, Option[Schema.ForwardSshTunnelConnectivity]] = (fun: Schema.ForwardSshTunnelConnectivity) => Option(fun)
		given putSchemaPrivateConnectivity: Conversion[Schema.PrivateConnectivity, Option[Schema.PrivateConnectivity]] = (fun: Schema.PrivateConnectivity) => Option(fun)
		given putSchemaStaticServiceIpConnectivity: Conversion[Schema.StaticServiceIpConnectivity, Option[Schema.StaticServiceIpConnectivity]] = (fun: Schema.StaticServiceIpConnectivity) => Option(fun)
		given putSchemaOracleAsmConfig: Conversion[Schema.OracleAsmConfig, Option[Schema.OracleAsmConfig]] = (fun: Schema.OracleAsmConfig) => Option(fun)
		given putSchemaCloudSqlSettings: Conversion[Schema.CloudSqlSettings, Option[Schema.CloudSqlSettings]] = (fun: Schema.CloudSqlSettings) => Option(fun)
		given putSchemaCloudSqlSettingsDatabaseVersionEnum: Conversion[Schema.CloudSqlSettings.DatabaseVersionEnum, Option[Schema.CloudSqlSettings.DatabaseVersionEnum]] = (fun: Schema.CloudSqlSettings.DatabaseVersionEnum) => Option(fun)
		given putSchemaCloudSqlSettingsActivationPolicyEnum: Conversion[Schema.CloudSqlSettings.ActivationPolicyEnum, Option[Schema.CloudSqlSettings.ActivationPolicyEnum]] = (fun: Schema.CloudSqlSettings.ActivationPolicyEnum) => Option(fun)
		given putSchemaSqlIpConfig: Conversion[Schema.SqlIpConfig, Option[Schema.SqlIpConfig]] = (fun: Schema.SqlIpConfig) => Option(fun)
		given putSchemaCloudSqlSettingsDataDiskTypeEnum: Conversion[Schema.CloudSqlSettings.DataDiskTypeEnum, Option[Schema.CloudSqlSettings.DataDiskTypeEnum]] = (fun: Schema.CloudSqlSettings.DataDiskTypeEnum) => Option(fun)
		given putSchemaCloudSqlSettingsAvailabilityTypeEnum: Conversion[Schema.CloudSqlSettings.AvailabilityTypeEnum, Option[Schema.CloudSqlSettings.AvailabilityTypeEnum]] = (fun: Schema.CloudSqlSettings.AvailabilityTypeEnum) => Option(fun)
		given putSchemaCloudSqlSettingsEditionEnum: Conversion[Schema.CloudSqlSettings.EditionEnum, Option[Schema.CloudSqlSettings.EditionEnum]] = (fun: Schema.CloudSqlSettings.EditionEnum) => Option(fun)
		given putSchemaDataCacheConfig: Conversion[Schema.DataCacheConfig, Option[Schema.DataCacheConfig]] = (fun: Schema.DataCacheConfig) => Option(fun)
		given putListSchemaSqlAclEntry: Conversion[List[Schema.SqlAclEntry], Option[List[Schema.SqlAclEntry]]] = (fun: List[Schema.SqlAclEntry]) => Option(fun)
		given putSchemaAlloyDbSettings: Conversion[Schema.AlloyDbSettings, Option[Schema.AlloyDbSettings]] = (fun: Schema.AlloyDbSettings) => Option(fun)
		given putSchemaUserPassword: Conversion[Schema.UserPassword, Option[Schema.UserPassword]] = (fun: Schema.UserPassword) => Option(fun)
		given putSchemaPrimaryInstanceSettings: Conversion[Schema.PrimaryInstanceSettings, Option[Schema.PrimaryInstanceSettings]] = (fun: Schema.PrimaryInstanceSettings) => Option(fun)
		given putSchemaEncryptionConfig: Conversion[Schema.EncryptionConfig, Option[Schema.EncryptionConfig]] = (fun: Schema.EncryptionConfig) => Option(fun)
		given putSchemaAlloyDbSettingsDatabaseVersionEnum: Conversion[Schema.AlloyDbSettings.DatabaseVersionEnum, Option[Schema.AlloyDbSettings.DatabaseVersionEnum]] = (fun: Schema.AlloyDbSettings.DatabaseVersionEnum) => Option(fun)
		given putSchemaMachineConfig: Conversion[Schema.MachineConfig, Option[Schema.MachineConfig]] = (fun: Schema.MachineConfig) => Option(fun)
		given putSchemaInstanceNetworkConfig: Conversion[Schema.InstanceNetworkConfig, Option[Schema.InstanceNetworkConfig]] = (fun: Schema.InstanceNetworkConfig) => Option(fun)
		given putListSchemaAuthorizedNetwork: Conversion[List[Schema.AuthorizedNetwork], Option[List[Schema.AuthorizedNetwork]]] = (fun: List[Schema.AuthorizedNetwork]) => Option(fun)
		given putSchemaPrivateConnectionStateEnum: Conversion[Schema.PrivateConnection.StateEnum, Option[Schema.PrivateConnection.StateEnum]] = (fun: Schema.PrivateConnection.StateEnum) => Option(fun)
		given putSchemaVpcPeeringConfig: Conversion[Schema.VpcPeeringConfig, Option[Schema.VpcPeeringConfig]] = (fun: Schema.VpcPeeringConfig) => Option(fun)
		given putListSchemaPrivateConnection: Conversion[List[Schema.PrivateConnection], Option[List[Schema.PrivateConnection]]] = (fun: List[Schema.PrivateConnection]) => Option(fun)
		given putSchemaDatabaseEngineInfo: Conversion[Schema.DatabaseEngineInfo, Option[Schema.DatabaseEngineInfo]] = (fun: Schema.DatabaseEngineInfo) => Option(fun)
		given putSchemaDatabaseEngineInfoEngineEnum: Conversion[Schema.DatabaseEngineInfo.EngineEnum, Option[Schema.DatabaseEngineInfo.EngineEnum]] = (fun: Schema.DatabaseEngineInfo.EngineEnum) => Option(fun)
		given putListSchemaConversionWorkspace: Conversion[List[Schema.ConversionWorkspace], Option[List[Schema.ConversionWorkspace]]] = (fun: List[Schema.ConversionWorkspace]) => Option(fun)
		given putSchemaMappingRuleStateEnum: Conversion[Schema.MappingRule.StateEnum, Option[Schema.MappingRule.StateEnum]] = (fun: Schema.MappingRule.StateEnum) => Option(fun)
		given putSchemaMappingRuleRuleScopeEnum: Conversion[Schema.MappingRule.RuleScopeEnum, Option[Schema.MappingRule.RuleScopeEnum]] = (fun: Schema.MappingRule.RuleScopeEnum) => Option(fun)
		given putSchemaMappingRuleFilter: Conversion[Schema.MappingRuleFilter, Option[Schema.MappingRuleFilter]] = (fun: Schema.MappingRuleFilter) => Option(fun)
		given putSchemaSingleEntityRename: Conversion[Schema.SingleEntityRename, Option[Schema.SingleEntityRename]] = (fun: Schema.SingleEntityRename) => Option(fun)
		given putSchemaMultiEntityRename: Conversion[Schema.MultiEntityRename, Option[Schema.MultiEntityRename]] = (fun: Schema.MultiEntityRename) => Option(fun)
		given putSchemaEntityMove: Conversion[Schema.EntityMove, Option[Schema.EntityMove]] = (fun: Schema.EntityMove) => Option(fun)
		given putSchemaSingleColumnChange: Conversion[Schema.SingleColumnChange, Option[Schema.SingleColumnChange]] = (fun: Schema.SingleColumnChange) => Option(fun)
		given putSchemaMultiColumnDatatypeChange: Conversion[Schema.MultiColumnDatatypeChange, Option[Schema.MultiColumnDatatypeChange]] = (fun: Schema.MultiColumnDatatypeChange) => Option(fun)
		given putSchemaConditionalColumnSetValue: Conversion[Schema.ConditionalColumnSetValue, Option[Schema.ConditionalColumnSetValue]] = (fun: Schema.ConditionalColumnSetValue) => Option(fun)
		given putSchemaConvertRowIdToColumn: Conversion[Schema.ConvertRowIdToColumn, Option[Schema.ConvertRowIdToColumn]] = (fun: Schema.ConvertRowIdToColumn) => Option(fun)
		given putSchemaSetTablePrimaryKey: Conversion[Schema.SetTablePrimaryKey, Option[Schema.SetTablePrimaryKey]] = (fun: Schema.SetTablePrimaryKey) => Option(fun)
		given putSchemaSinglePackageChange: Conversion[Schema.SinglePackageChange, Option[Schema.SinglePackageChange]] = (fun: Schema.SinglePackageChange) => Option(fun)
		given putSchemaSourceSqlChange: Conversion[Schema.SourceSqlChange, Option[Schema.SourceSqlChange]] = (fun: Schema.SourceSqlChange) => Option(fun)
		given putSchemaFilterTableColumns: Conversion[Schema.FilterTableColumns, Option[Schema.FilterTableColumns]] = (fun: Schema.FilterTableColumns) => Option(fun)
		given putSchemaMultiEntityRenameSourceNameTransformationEnum: Conversion[Schema.MultiEntityRename.SourceNameTransformationEnum, Option[Schema.MultiEntityRename.SourceNameTransformationEnum]] = (fun: Schema.MultiEntityRename.SourceNameTransformationEnum) => Option(fun)
		given putSchemaSourceTextFilter: Conversion[Schema.SourceTextFilter, Option[Schema.SourceTextFilter]] = (fun: Schema.SourceTextFilter) => Option(fun)
		given putSchemaSourceNumericFilter: Conversion[Schema.SourceNumericFilter, Option[Schema.SourceNumericFilter]] = (fun: Schema.SourceNumericFilter) => Option(fun)
		given putSchemaSourceNumericFilterNumericFilterOptionEnum: Conversion[Schema.SourceNumericFilter.NumericFilterOptionEnum, Option[Schema.SourceNumericFilter.NumericFilterOptionEnum]] = (fun: Schema.SourceNumericFilter.NumericFilterOptionEnum) => Option(fun)
		given putSchemaValueTransformation: Conversion[Schema.ValueTransformation, Option[Schema.ValueTransformation]] = (fun: Schema.ValueTransformation) => Option(fun)
		given putSchemaEmpty: Conversion[Schema.Empty, Option[Schema.Empty]] = (fun: Schema.Empty) => Option(fun)
		given putSchemaValueListFilter: Conversion[Schema.ValueListFilter, Option[Schema.ValueListFilter]] = (fun: Schema.ValueListFilter) => Option(fun)
		given putSchemaIntComparisonFilter: Conversion[Schema.IntComparisonFilter, Option[Schema.IntComparisonFilter]] = (fun: Schema.IntComparisonFilter) => Option(fun)
		given putSchemaDoubleComparisonFilter: Conversion[Schema.DoubleComparisonFilter, Option[Schema.DoubleComparisonFilter]] = (fun: Schema.DoubleComparisonFilter) => Option(fun)
		given putSchemaAssignSpecificValue: Conversion[Schema.AssignSpecificValue, Option[Schema.AssignSpecificValue]] = (fun: Schema.AssignSpecificValue) => Option(fun)
		given putSchemaRoundToScale: Conversion[Schema.RoundToScale, Option[Schema.RoundToScale]] = (fun: Schema.RoundToScale) => Option(fun)
		given putSchemaApplyHash: Conversion[Schema.ApplyHash, Option[Schema.ApplyHash]] = (fun: Schema.ApplyHash) => Option(fun)
		given putSchemaValueListFilterValuePresentListEnum: Conversion[Schema.ValueListFilter.ValuePresentListEnum, Option[Schema.ValueListFilter.ValuePresentListEnum]] = (fun: Schema.ValueListFilter.ValuePresentListEnum) => Option(fun)
		given putSchemaIntComparisonFilterValueComparisonEnum: Conversion[Schema.IntComparisonFilter.ValueComparisonEnum, Option[Schema.IntComparisonFilter.ValueComparisonEnum]] = (fun: Schema.IntComparisonFilter.ValueComparisonEnum) => Option(fun)
		given putSchemaDoubleComparisonFilterValueComparisonEnum: Conversion[Schema.DoubleComparisonFilter.ValueComparisonEnum, Option[Schema.DoubleComparisonFilter.ValueComparisonEnum]] = (fun: Schema.DoubleComparisonFilter.ValueComparisonEnum) => Option(fun)
		given putBigDecimal: Conversion[BigDecimal, Option[BigDecimal]] = (fun: BigDecimal) => Option(fun)
		given putListSchemaMappingRule: Conversion[List[Schema.MappingRule], Option[List[Schema.MappingRule]]] = (fun: List[Schema.MappingRule]) => Option(fun)
		given putSchemaImportMappingRulesRequestRulesFormatEnum: Conversion[Schema.ImportMappingRulesRequest.RulesFormatEnum, Option[Schema.ImportMappingRulesRequest.RulesFormatEnum]] = (fun: Schema.ImportMappingRulesRequest.RulesFormatEnum) => Option(fun)
		given putListSchemaRulesFile: Conversion[List[Schema.RulesFile], Option[List[Schema.RulesFile]]] = (fun: List[Schema.RulesFile]) => Option(fun)
		given putListSchemaDatabaseEntity: Conversion[List[Schema.DatabaseEntity], Option[List[Schema.DatabaseEntity]]] = (fun: List[Schema.DatabaseEntity]) => Option(fun)
		given putSchemaDatabaseEntityTreeEnum: Conversion[Schema.DatabaseEntity.TreeEnum, Option[Schema.DatabaseEntity.TreeEnum]] = (fun: Schema.DatabaseEntity.TreeEnum) => Option(fun)
		given putSchemaDatabaseEntityEntityTypeEnum: Conversion[Schema.DatabaseEntity.EntityTypeEnum, Option[Schema.DatabaseEntity.EntityTypeEnum]] = (fun: Schema.DatabaseEntity.EntityTypeEnum) => Option(fun)
		given putListSchemaEntityMapping: Conversion[List[Schema.EntityMapping], Option[List[Schema.EntityMapping]]] = (fun: List[Schema.EntityMapping]) => Option(fun)
		given putListSchemaEntityDdl: Conversion[List[Schema.EntityDdl], Option[List[Schema.EntityDdl]]] = (fun: List[Schema.EntityDdl]) => Option(fun)
		given putListSchemaEntityIssue: Conversion[List[Schema.EntityIssue], Option[List[Schema.EntityIssue]]] = (fun: List[Schema.EntityIssue]) => Option(fun)
		given putSchemaDatabaseInstanceEntity: Conversion[Schema.DatabaseInstanceEntity, Option[Schema.DatabaseInstanceEntity]] = (fun: Schema.DatabaseInstanceEntity) => Option(fun)
		given putSchemaSchemaEntity: Conversion[Schema.SchemaEntity, Option[Schema.SchemaEntity]] = (fun: Schema.SchemaEntity) => Option(fun)
		given putSchemaTableEntity: Conversion[Schema.TableEntity, Option[Schema.TableEntity]] = (fun: Schema.TableEntity) => Option(fun)
		given putSchemaViewEntity: Conversion[Schema.ViewEntity, Option[Schema.ViewEntity]] = (fun: Schema.ViewEntity) => Option(fun)
		given putSchemaSequenceEntity: Conversion[Schema.SequenceEntity, Option[Schema.SequenceEntity]] = (fun: Schema.SequenceEntity) => Option(fun)
		given putSchemaStoredProcedureEntity: Conversion[Schema.StoredProcedureEntity, Option[Schema.StoredProcedureEntity]] = (fun: Schema.StoredProcedureEntity) => Option(fun)
		given putSchemaFunctionEntity: Conversion[Schema.FunctionEntity, Option[Schema.FunctionEntity]] = (fun: Schema.FunctionEntity) => Option(fun)
		given putSchemaSynonymEntity: Conversion[Schema.SynonymEntity, Option[Schema.SynonymEntity]] = (fun: Schema.SynonymEntity) => Option(fun)
		given putSchemaPackageEntity: Conversion[Schema.PackageEntity, Option[Schema.PackageEntity]] = (fun: Schema.PackageEntity) => Option(fun)
		given putSchemaUDTEntity: Conversion[Schema.UDTEntity, Option[Schema.UDTEntity]] = (fun: Schema.UDTEntity) => Option(fun)
		given putSchemaMaterializedViewEntity: Conversion[Schema.MaterializedViewEntity, Option[Schema.MaterializedViewEntity]] = (fun: Schema.MaterializedViewEntity) => Option(fun)
		given putSchemaEntityMappingSourceTypeEnum: Conversion[Schema.EntityMapping.SourceTypeEnum, Option[Schema.EntityMapping.SourceTypeEnum]] = (fun: Schema.EntityMapping.SourceTypeEnum) => Option(fun)
		given putSchemaEntityMappingDraftTypeEnum: Conversion[Schema.EntityMapping.DraftTypeEnum, Option[Schema.EntityMapping.DraftTypeEnum]] = (fun: Schema.EntityMapping.DraftTypeEnum) => Option(fun)
		given putListSchemaEntityMappingLogEntry: Conversion[List[Schema.EntityMappingLogEntry], Option[List[Schema.EntityMappingLogEntry]]] = (fun: List[Schema.EntityMappingLogEntry]) => Option(fun)
		given putSchemaEntityDdlEntityTypeEnum: Conversion[Schema.EntityDdl.EntityTypeEnum, Option[Schema.EntityDdl.EntityTypeEnum]] = (fun: Schema.EntityDdl.EntityTypeEnum) => Option(fun)
		given putSchemaEntityIssueTypeEnum: Conversion[Schema.EntityIssue.TypeEnum, Option[Schema.EntityIssue.TypeEnum]] = (fun: Schema.EntityIssue.TypeEnum) => Option(fun)
		given putSchemaEntityIssueSeverityEnum: Conversion[Schema.EntityIssue.SeverityEnum, Option[Schema.EntityIssue.SeverityEnum]] = (fun: Schema.EntityIssue.SeverityEnum) => Option(fun)
		given putSchemaPosition: Conversion[Schema.Position, Option[Schema.Position]] = (fun: Schema.Position) => Option(fun)
		given putSchemaEntityIssueEntityTypeEnum: Conversion[Schema.EntityIssue.EntityTypeEnum, Option[Schema.EntityIssue.EntityTypeEnum]] = (fun: Schema.EntityIssue.EntityTypeEnum) => Option(fun)
		given putListSchemaColumnEntity: Conversion[List[Schema.ColumnEntity], Option[List[Schema.ColumnEntity]]] = (fun: List[Schema.ColumnEntity]) => Option(fun)
		given putListSchemaConstraintEntity: Conversion[List[Schema.ConstraintEntity], Option[List[Schema.ConstraintEntity]]] = (fun: List[Schema.ConstraintEntity]) => Option(fun)
		given putListSchemaIndexEntity: Conversion[List[Schema.IndexEntity], Option[List[Schema.IndexEntity]]] = (fun: List[Schema.IndexEntity]) => Option(fun)
		given putListSchemaTriggerEntity: Conversion[List[Schema.TriggerEntity], Option[List[Schema.TriggerEntity]]] = (fun: List[Schema.TriggerEntity]) => Option(fun)
		given putListBoolean: Conversion[List[Boolean], Option[List[Boolean]]] = (fun: List[Boolean]) => Option(fun)
		given putSchemaSynonymEntitySourceTypeEnum: Conversion[Schema.SynonymEntity.SourceTypeEnum, Option[Schema.SynonymEntity.SourceTypeEnum]] = (fun: Schema.SynonymEntity.SourceTypeEnum) => Option(fun)
		given putListSchemaBackgroundJobLogEntry: Conversion[List[Schema.BackgroundJobLogEntry], Option[List[Schema.BackgroundJobLogEntry]]] = (fun: List[Schema.BackgroundJobLogEntry]) => Option(fun)
		given putSchemaBackgroundJobLogEntryJobTypeEnum: Conversion[Schema.BackgroundJobLogEntry.JobTypeEnum, Option[Schema.BackgroundJobLogEntry.JobTypeEnum]] = (fun: Schema.BackgroundJobLogEntry.JobTypeEnum) => Option(fun)
		given putSchemaBackgroundJobLogEntryCompletionStateEnum: Conversion[Schema.BackgroundJobLogEntry.CompletionStateEnum, Option[Schema.BackgroundJobLogEntry.CompletionStateEnum]] = (fun: Schema.BackgroundJobLogEntry.CompletionStateEnum) => Option(fun)
		given putSchemaSeedJobDetails: Conversion[Schema.SeedJobDetails, Option[Schema.SeedJobDetails]] = (fun: Schema.SeedJobDetails) => Option(fun)
		given putSchemaImportRulesJobDetails: Conversion[Schema.ImportRulesJobDetails, Option[Schema.ImportRulesJobDetails]] = (fun: Schema.ImportRulesJobDetails) => Option(fun)
		given putSchemaConvertJobDetails: Conversion[Schema.ConvertJobDetails, Option[Schema.ConvertJobDetails]] = (fun: Schema.ConvertJobDetails) => Option(fun)
		given putSchemaApplyJobDetails: Conversion[Schema.ApplyJobDetails, Option[Schema.ApplyJobDetails]] = (fun: Schema.ApplyJobDetails) => Option(fun)
		given putSchemaImportRulesJobDetailsFileFormatEnum: Conversion[Schema.ImportRulesJobDetails.FileFormatEnum, Option[Schema.ImportRulesJobDetails.FileFormatEnum]] = (fun: Schema.ImportRulesJobDetails.FileFormatEnum) => Option(fun)
		given putListSchemaLocation: Conversion[List[Schema.Location], Option[List[Schema.Location]]] = (fun: List[Schema.Location]) => Option(fun)
		given putSchemaPolicy: Conversion[Schema.Policy, Option[Schema.Policy]] = (fun: Schema.Policy) => Option(fun)
		given putListSchemaBinding: Conversion[List[Schema.Binding], Option[List[Schema.Binding]]] = (fun: List[Schema.Binding]) => Option(fun)
		given putListSchemaAuditConfig: Conversion[List[Schema.AuditConfig], Option[List[Schema.AuditConfig]]] = (fun: List[Schema.AuditConfig]) => Option(fun)
		given putSchemaExpr: Conversion[Schema.Expr, Option[Schema.Expr]] = (fun: Schema.Expr) => Option(fun)
		given putListSchemaAuditLogConfig: Conversion[List[Schema.AuditLogConfig], Option[List[Schema.AuditLogConfig]]] = (fun: List[Schema.AuditLogConfig]) => Option(fun)
		given putSchemaAuditLogConfigLogTypeEnum: Conversion[Schema.AuditLogConfig.LogTypeEnum, Option[Schema.AuditLogConfig.LogTypeEnum]] = (fun: Schema.AuditLogConfig.LogTypeEnum) => Option(fun)
		given putSchemaMigrationJobVerificationErrorErrorCodeEnum: Conversion[Schema.MigrationJobVerificationError.ErrorCodeEnum, Option[Schema.MigrationJobVerificationError.ErrorCodeEnum]] = (fun: Schema.MigrationJobVerificationError.ErrorCodeEnum) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
