package com.boresjo.play.api.google.spanner

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, AuthToken, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaScan: Conversion[List[Schema.Scan], Option[List[Schema.Scan]]] = (fun: List[Schema.Scan]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putMapStringJsValue: Conversion[Map[String, JsValue], Option[Map[String, JsValue]]] = (fun: Map[String, JsValue]) => Option(fun)
		given putSchemaScanData: Conversion[Schema.ScanData, Option[Schema.ScanData]] = (fun: Schema.ScanData) => Option(fun)
		given putSchemaVisualizationData: Conversion[Schema.VisualizationData, Option[Schema.VisualizationData]] = (fun: Schema.VisualizationData) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putListSchemaPrefixNode: Conversion[List[Schema.PrefixNode], Option[List[Schema.PrefixNode]]] = (fun: List[Schema.PrefixNode]) => Option(fun)
		given putListSchemaMetric: Conversion[List[Schema.Metric], Option[List[Schema.Metric]]] = (fun: List[Schema.Metric]) => Option(fun)
		given putListSchemaDiagnosticMessage: Conversion[List[Schema.DiagnosticMessage], Option[List[Schema.DiagnosticMessage]]] = (fun: List[Schema.DiagnosticMessage]) => Option(fun)
		given putSchemaVisualizationDataKeyUnitEnum: Conversion[Schema.VisualizationData.KeyUnitEnum, Option[Schema.VisualizationData.KeyUnitEnum]] = (fun: Schema.VisualizationData.KeyUnitEnum) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putSchemaLocalizedString: Conversion[Schema.LocalizedString, Option[Schema.LocalizedString]] = (fun: Schema.LocalizedString) => Option(fun)
		given putBigDecimal: Conversion[BigDecimal, Option[BigDecimal]] = (fun: BigDecimal) => Option(fun)
		given putSchemaMetricAggregationEnum: Conversion[Schema.Metric.AggregationEnum, Option[Schema.Metric.AggregationEnum]] = (fun: Schema.Metric.AggregationEnum) => Option(fun)
		given putSchemaMetricMatrix: Conversion[Schema.MetricMatrix, Option[Schema.MetricMatrix]] = (fun: Schema.MetricMatrix) => Option(fun)
		given putSchemaDerivedMetric: Conversion[Schema.DerivedMetric, Option[Schema.DerivedMetric]] = (fun: Schema.DerivedMetric) => Option(fun)
		given putMapStringSchemaIndexedHotKey: Conversion[Map[String, Schema.IndexedHotKey], Option[Map[String, Schema.IndexedHotKey]]] = (fun: Map[String, Schema.IndexedHotKey]) => Option(fun)
		given putMapStringSchemaIndexedKeyRangeInfos: Conversion[Map[String, Schema.IndexedKeyRangeInfos], Option[Map[String, Schema.IndexedKeyRangeInfos]]] = (fun: Map[String, Schema.IndexedKeyRangeInfos]) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putListSchemaMetricMatrixRow: Conversion[List[Schema.MetricMatrixRow], Option[List[Schema.MetricMatrixRow]]] = (fun: List[Schema.MetricMatrixRow]) => Option(fun)
		given putListBigDecimal: Conversion[List[BigDecimal], Option[List[BigDecimal]]] = (fun: List[BigDecimal]) => Option(fun)
		given putMapStringInt: Conversion[Map[String, Int], Option[Map[String, Int]]] = (fun: Map[String, Int]) => Option(fun)
		given putMapStringSchemaKeyRangeInfos: Conversion[Map[String, Schema.KeyRangeInfos], Option[Map[String, Schema.KeyRangeInfos]]] = (fun: Map[String, Schema.KeyRangeInfos]) => Option(fun)
		given putListSchemaKeyRangeInfo: Conversion[List[Schema.KeyRangeInfo], Option[List[Schema.KeyRangeInfo]]] = (fun: List[Schema.KeyRangeInfo]) => Option(fun)
		given putListSchemaContextValue: Conversion[List[Schema.ContextValue], Option[List[Schema.ContextValue]]] = (fun: List[Schema.ContextValue]) => Option(fun)
		given putSchemaContextValueSeverityEnum: Conversion[Schema.ContextValue.SeverityEnum, Option[Schema.ContextValue.SeverityEnum]] = (fun: Schema.ContextValue.SeverityEnum) => Option(fun)
		given putSchemaDiagnosticMessageSeverityEnum: Conversion[Schema.DiagnosticMessage.SeverityEnum, Option[Schema.DiagnosticMessage.SeverityEnum]] = (fun: Schema.DiagnosticMessage.SeverityEnum) => Option(fun)
		given putListSchemaOperation: Conversion[List[Schema.Operation], Option[List[Schema.Operation]]] = (fun: List[Schema.Operation]) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putListSchemaDatabase: Conversion[List[Schema.Database], Option[List[Schema.Database]]] = (fun: List[Schema.Database]) => Option(fun)
		given putSchemaDatabaseStateEnum: Conversion[Schema.Database.StateEnum, Option[Schema.Database.StateEnum]] = (fun: Schema.Database.StateEnum) => Option(fun)
		given putSchemaRestoreInfo: Conversion[Schema.RestoreInfo, Option[Schema.RestoreInfo]] = (fun: Schema.RestoreInfo) => Option(fun)
		given putSchemaEncryptionConfig: Conversion[Schema.EncryptionConfig, Option[Schema.EncryptionConfig]] = (fun: Schema.EncryptionConfig) => Option(fun)
		given putListSchemaEncryptionInfo: Conversion[List[Schema.EncryptionInfo], Option[List[Schema.EncryptionInfo]]] = (fun: List[Schema.EncryptionInfo]) => Option(fun)
		given putSchemaDatabaseDatabaseDialectEnum: Conversion[Schema.Database.DatabaseDialectEnum, Option[Schema.Database.DatabaseDialectEnum]] = (fun: Schema.Database.DatabaseDialectEnum) => Option(fun)
		given putSchemaQuorumInfo: Conversion[Schema.QuorumInfo, Option[Schema.QuorumInfo]] = (fun: Schema.QuorumInfo) => Option(fun)
		given putSchemaRestoreInfoSourceTypeEnum: Conversion[Schema.RestoreInfo.SourceTypeEnum, Option[Schema.RestoreInfo.SourceTypeEnum]] = (fun: Schema.RestoreInfo.SourceTypeEnum) => Option(fun)
		given putSchemaBackupInfo: Conversion[Schema.BackupInfo, Option[Schema.BackupInfo]] = (fun: Schema.BackupInfo) => Option(fun)
		given putSchemaEncryptionInfoEncryptionTypeEnum: Conversion[Schema.EncryptionInfo.EncryptionTypeEnum, Option[Schema.EncryptionInfo.EncryptionTypeEnum]] = (fun: Schema.EncryptionInfo.EncryptionTypeEnum) => Option(fun)
		given putSchemaQuorumType: Conversion[Schema.QuorumType, Option[Schema.QuorumType]] = (fun: Schema.QuorumType) => Option(fun)
		given putSchemaQuorumInfoInitiatorEnum: Conversion[Schema.QuorumInfo.InitiatorEnum, Option[Schema.QuorumInfo.InitiatorEnum]] = (fun: Schema.QuorumInfo.InitiatorEnum) => Option(fun)
		given putSchemaSingleRegionQuorum: Conversion[Schema.SingleRegionQuorum, Option[Schema.SingleRegionQuorum]] = (fun: Schema.SingleRegionQuorum) => Option(fun)
		given putSchemaDualRegionQuorum: Conversion[Schema.DualRegionQuorum, Option[Schema.DualRegionQuorum]] = (fun: Schema.DualRegionQuorum) => Option(fun)
		given putSchemaCreateDatabaseRequestDatabaseDialectEnum: Conversion[Schema.CreateDatabaseRequest.DatabaseDialectEnum, Option[Schema.CreateDatabaseRequest.DatabaseDialectEnum]] = (fun: Schema.CreateDatabaseRequest.DatabaseDialectEnum) => Option(fun)
		given putSchemaPolicy: Conversion[Schema.Policy, Option[Schema.Policy]] = (fun: Schema.Policy) => Option(fun)
		given putListSchemaBinding: Conversion[List[Schema.Binding], Option[List[Schema.Binding]]] = (fun: List[Schema.Binding]) => Option(fun)
		given putSchemaExpr: Conversion[Schema.Expr, Option[Schema.Expr]] = (fun: Schema.Expr) => Option(fun)
		given putSchemaGetPolicyOptions: Conversion[Schema.GetPolicyOptions, Option[Schema.GetPolicyOptions]] = (fun: Schema.GetPolicyOptions) => Option(fun)
		given putSchemaBackupStateEnum: Conversion[Schema.Backup.StateEnum, Option[Schema.Backup.StateEnum]] = (fun: Schema.Backup.StateEnum) => Option(fun)
		given putSchemaEncryptionInfo: Conversion[Schema.EncryptionInfo, Option[Schema.EncryptionInfo]] = (fun: Schema.EncryptionInfo) => Option(fun)
		given putSchemaBackupDatabaseDialectEnum: Conversion[Schema.Backup.DatabaseDialectEnum, Option[Schema.Backup.DatabaseDialectEnum]] = (fun: Schema.Backup.DatabaseDialectEnum) => Option(fun)
		given putSchemaCopyBackupEncryptionConfig: Conversion[Schema.CopyBackupEncryptionConfig, Option[Schema.CopyBackupEncryptionConfig]] = (fun: Schema.CopyBackupEncryptionConfig) => Option(fun)
		given putSchemaCopyBackupEncryptionConfigEncryptionTypeEnum: Conversion[Schema.CopyBackupEncryptionConfig.EncryptionTypeEnum, Option[Schema.CopyBackupEncryptionConfig.EncryptionTypeEnum]] = (fun: Schema.CopyBackupEncryptionConfig.EncryptionTypeEnum) => Option(fun)
		given putListSchemaBackup: Conversion[List[Schema.Backup], Option[List[Schema.Backup]]] = (fun: List[Schema.Backup]) => Option(fun)
		given putSchemaRestoreDatabaseEncryptionConfig: Conversion[Schema.RestoreDatabaseEncryptionConfig, Option[Schema.RestoreDatabaseEncryptionConfig]] = (fun: Schema.RestoreDatabaseEncryptionConfig) => Option(fun)
		given putSchemaRestoreDatabaseEncryptionConfigEncryptionTypeEnum: Conversion[Schema.RestoreDatabaseEncryptionConfig.EncryptionTypeEnum, Option[Schema.RestoreDatabaseEncryptionConfig.EncryptionTypeEnum]] = (fun: Schema.RestoreDatabaseEncryptionConfig.EncryptionTypeEnum) => Option(fun)
		given putListSchemaDatabaseRole: Conversion[List[Schema.DatabaseRole], Option[List[Schema.DatabaseRole]]] = (fun: List[Schema.DatabaseRole]) => Option(fun)
		given putSchemaBackupScheduleSpec: Conversion[Schema.BackupScheduleSpec, Option[Schema.BackupScheduleSpec]] = (fun: Schema.BackupScheduleSpec) => Option(fun)
		given putSchemaCreateBackupEncryptionConfig: Conversion[Schema.CreateBackupEncryptionConfig, Option[Schema.CreateBackupEncryptionConfig]] = (fun: Schema.CreateBackupEncryptionConfig) => Option(fun)
		given putSchemaFullBackupSpec: Conversion[Schema.FullBackupSpec, Option[Schema.FullBackupSpec]] = (fun: Schema.FullBackupSpec) => Option(fun)
		given putSchemaIncrementalBackupSpec: Conversion[Schema.IncrementalBackupSpec, Option[Schema.IncrementalBackupSpec]] = (fun: Schema.IncrementalBackupSpec) => Option(fun)
		given putSchemaCrontabSpec: Conversion[Schema.CrontabSpec, Option[Schema.CrontabSpec]] = (fun: Schema.CrontabSpec) => Option(fun)
		given putSchemaCreateBackupEncryptionConfigEncryptionTypeEnum: Conversion[Schema.CreateBackupEncryptionConfig.EncryptionTypeEnum, Option[Schema.CreateBackupEncryptionConfig.EncryptionTypeEnum]] = (fun: Schema.CreateBackupEncryptionConfig.EncryptionTypeEnum) => Option(fun)
		given putListSchemaBackupSchedule: Conversion[List[Schema.BackupSchedule], Option[List[Schema.BackupSchedule]]] = (fun: List[Schema.BackupSchedule]) => Option(fun)
		given putListSchemaInstanceConfig: Conversion[List[Schema.InstanceConfig], Option[List[Schema.InstanceConfig]]] = (fun: List[Schema.InstanceConfig]) => Option(fun)
		given putSchemaInstanceConfigConfigTypeEnum: Conversion[Schema.InstanceConfig.ConfigTypeEnum, Option[Schema.InstanceConfig.ConfigTypeEnum]] = (fun: Schema.InstanceConfig.ConfigTypeEnum) => Option(fun)
		given putListSchemaReplicaInfo: Conversion[List[Schema.ReplicaInfo], Option[List[Schema.ReplicaInfo]]] = (fun: List[Schema.ReplicaInfo]) => Option(fun)
		given putSchemaInstanceConfigStateEnum: Conversion[Schema.InstanceConfig.StateEnum, Option[Schema.InstanceConfig.StateEnum]] = (fun: Schema.InstanceConfig.StateEnum) => Option(fun)
		given putSchemaInstanceConfigFreeInstanceAvailabilityEnum: Conversion[Schema.InstanceConfig.FreeInstanceAvailabilityEnum, Option[Schema.InstanceConfig.FreeInstanceAvailabilityEnum]] = (fun: Schema.InstanceConfig.FreeInstanceAvailabilityEnum) => Option(fun)
		given putSchemaInstanceConfigQuorumTypeEnum: Conversion[Schema.InstanceConfig.QuorumTypeEnum, Option[Schema.InstanceConfig.QuorumTypeEnum]] = (fun: Schema.InstanceConfig.QuorumTypeEnum) => Option(fun)
		given putSchemaReplicaInfoTypeEnum: Conversion[Schema.ReplicaInfo.TypeEnum, Option[Schema.ReplicaInfo.TypeEnum]] = (fun: Schema.ReplicaInfo.TypeEnum) => Option(fun)
		given putSchemaInstanceConfig: Conversion[Schema.InstanceConfig, Option[Schema.InstanceConfig]] = (fun: Schema.InstanceConfig) => Option(fun)
		given putListSchemaInstance: Conversion[List[Schema.Instance], Option[List[Schema.Instance]]] = (fun: List[Schema.Instance]) => Option(fun)
		given putListSchemaReplicaComputeCapacity: Conversion[List[Schema.ReplicaComputeCapacity], Option[List[Schema.ReplicaComputeCapacity]]] = (fun: List[Schema.ReplicaComputeCapacity]) => Option(fun)
		given putSchemaAutoscalingConfig: Conversion[Schema.AutoscalingConfig, Option[Schema.AutoscalingConfig]] = (fun: Schema.AutoscalingConfig) => Option(fun)
		given putSchemaInstanceStateEnum: Conversion[Schema.Instance.StateEnum, Option[Schema.Instance.StateEnum]] = (fun: Schema.Instance.StateEnum) => Option(fun)
		given putSchemaInstanceInstanceTypeEnum: Conversion[Schema.Instance.InstanceTypeEnum, Option[Schema.Instance.InstanceTypeEnum]] = (fun: Schema.Instance.InstanceTypeEnum) => Option(fun)
		given putSchemaFreeInstanceMetadata: Conversion[Schema.FreeInstanceMetadata, Option[Schema.FreeInstanceMetadata]] = (fun: Schema.FreeInstanceMetadata) => Option(fun)
		given putSchemaInstanceEditionEnum: Conversion[Schema.Instance.EditionEnum, Option[Schema.Instance.EditionEnum]] = (fun: Schema.Instance.EditionEnum) => Option(fun)
		given putSchemaInstanceDefaultBackupScheduleTypeEnum: Conversion[Schema.Instance.DefaultBackupScheduleTypeEnum, Option[Schema.Instance.DefaultBackupScheduleTypeEnum]] = (fun: Schema.Instance.DefaultBackupScheduleTypeEnum) => Option(fun)
		given putSchemaInstanceReplicaSelection: Conversion[Schema.InstanceReplicaSelection, Option[Schema.InstanceReplicaSelection]] = (fun: Schema.InstanceReplicaSelection) => Option(fun)
		given putSchemaAutoscalingLimits: Conversion[Schema.AutoscalingLimits, Option[Schema.AutoscalingLimits]] = (fun: Schema.AutoscalingLimits) => Option(fun)
		given putSchemaAutoscalingTargets: Conversion[Schema.AutoscalingTargets, Option[Schema.AutoscalingTargets]] = (fun: Schema.AutoscalingTargets) => Option(fun)
		given putListSchemaAsymmetricAutoscalingOption: Conversion[List[Schema.AsymmetricAutoscalingOption], Option[List[Schema.AsymmetricAutoscalingOption]]] = (fun: List[Schema.AsymmetricAutoscalingOption]) => Option(fun)
		given putSchemaAutoscalingConfigOverrides: Conversion[Schema.AutoscalingConfigOverrides, Option[Schema.AutoscalingConfigOverrides]] = (fun: Schema.AutoscalingConfigOverrides) => Option(fun)
		given putSchemaFreeInstanceMetadataExpireBehaviorEnum: Conversion[Schema.FreeInstanceMetadata.ExpireBehaviorEnum, Option[Schema.FreeInstanceMetadata.ExpireBehaviorEnum]] = (fun: Schema.FreeInstanceMetadata.ExpireBehaviorEnum) => Option(fun)
		given putListSchemaInstancePartition: Conversion[List[Schema.InstancePartition], Option[List[Schema.InstancePartition]]] = (fun: List[Schema.InstancePartition]) => Option(fun)
		given putSchemaInstancePartitionStateEnum: Conversion[Schema.InstancePartition.StateEnum, Option[Schema.InstancePartition.StateEnum]] = (fun: Schema.InstancePartition.StateEnum) => Option(fun)
		given putSchemaInstance: Conversion[Schema.Instance, Option[Schema.Instance]] = (fun: Schema.Instance) => Option(fun)
		given putSchemaInstancePartition: Conversion[Schema.InstancePartition, Option[Schema.InstancePartition]] = (fun: Schema.InstancePartition) => Option(fun)
		given putSchemaSession: Conversion[Schema.Session, Option[Schema.Session]] = (fun: Schema.Session) => Option(fun)
		given putListSchemaSession: Conversion[List[Schema.Session], Option[List[Schema.Session]]] = (fun: List[Schema.Session]) => Option(fun)
		given putSchemaTransactionSelector: Conversion[Schema.TransactionSelector, Option[Schema.TransactionSelector]] = (fun: Schema.TransactionSelector) => Option(fun)
		given putMapStringSchemaType: Conversion[Map[String, Schema.Type], Option[Map[String, Schema.Type]]] = (fun: Map[String, Schema.Type]) => Option(fun)
		given putSchemaExecuteSqlRequestQueryModeEnum: Conversion[Schema.ExecuteSqlRequest.QueryModeEnum, Option[Schema.ExecuteSqlRequest.QueryModeEnum]] = (fun: Schema.ExecuteSqlRequest.QueryModeEnum) => Option(fun)
		given putSchemaQueryOptions: Conversion[Schema.QueryOptions, Option[Schema.QueryOptions]] = (fun: Schema.QueryOptions) => Option(fun)
		given putSchemaRequestOptions: Conversion[Schema.RequestOptions, Option[Schema.RequestOptions]] = (fun: Schema.RequestOptions) => Option(fun)
		given putSchemaDirectedReadOptions: Conversion[Schema.DirectedReadOptions, Option[Schema.DirectedReadOptions]] = (fun: Schema.DirectedReadOptions) => Option(fun)
		given putSchemaTransactionOptions: Conversion[Schema.TransactionOptions, Option[Schema.TransactionOptions]] = (fun: Schema.TransactionOptions) => Option(fun)
		given putSchemaReadWrite: Conversion[Schema.ReadWrite, Option[Schema.ReadWrite]] = (fun: Schema.ReadWrite) => Option(fun)
		given putSchemaPartitionedDml: Conversion[Schema.PartitionedDml, Option[Schema.PartitionedDml]] = (fun: Schema.PartitionedDml) => Option(fun)
		given putSchemaReadOnly: Conversion[Schema.ReadOnly, Option[Schema.ReadOnly]] = (fun: Schema.ReadOnly) => Option(fun)
		given putSchemaReadWriteReadLockModeEnum: Conversion[Schema.ReadWrite.ReadLockModeEnum, Option[Schema.ReadWrite.ReadLockModeEnum]] = (fun: Schema.ReadWrite.ReadLockModeEnum) => Option(fun)
		given putSchemaTypeCodeEnum: Conversion[Schema.Type.CodeEnum, Option[Schema.Type.CodeEnum]] = (fun: Schema.Type.CodeEnum) => Option(fun)
		given putSchemaType: Conversion[Schema.Type, Option[Schema.Type]] = (fun: Schema.Type) => Option(fun)
		given putSchemaStructType: Conversion[Schema.StructType, Option[Schema.StructType]] = (fun: Schema.StructType) => Option(fun)
		given putSchemaTypeTypeAnnotationEnum: Conversion[Schema.Type.TypeAnnotationEnum, Option[Schema.Type.TypeAnnotationEnum]] = (fun: Schema.Type.TypeAnnotationEnum) => Option(fun)
		given putListSchemaField: Conversion[List[Schema.Field], Option[List[Schema.Field]]] = (fun: List[Schema.Field]) => Option(fun)
		given putSchemaRequestOptionsPriorityEnum: Conversion[Schema.RequestOptions.PriorityEnum, Option[Schema.RequestOptions.PriorityEnum]] = (fun: Schema.RequestOptions.PriorityEnum) => Option(fun)
		given putSchemaIncludeReplicas: Conversion[Schema.IncludeReplicas, Option[Schema.IncludeReplicas]] = (fun: Schema.IncludeReplicas) => Option(fun)
		given putSchemaExcludeReplicas: Conversion[Schema.ExcludeReplicas, Option[Schema.ExcludeReplicas]] = (fun: Schema.ExcludeReplicas) => Option(fun)
		given putListSchemaReplicaSelection: Conversion[List[Schema.ReplicaSelection], Option[List[Schema.ReplicaSelection]]] = (fun: List[Schema.ReplicaSelection]) => Option(fun)
		given putSchemaReplicaSelectionTypeEnum: Conversion[Schema.ReplicaSelection.TypeEnum, Option[Schema.ReplicaSelection.TypeEnum]] = (fun: Schema.ReplicaSelection.TypeEnum) => Option(fun)
		given putSchemaResultSetMetadata: Conversion[Schema.ResultSetMetadata, Option[Schema.ResultSetMetadata]] = (fun: Schema.ResultSetMetadata) => Option(fun)
		given putListListJsValue: Conversion[List[List[JsValue]], Option[List[List[JsValue]]]] = (fun: List[List[JsValue]]) => Option(fun)
		given putSchemaResultSetStats: Conversion[Schema.ResultSetStats, Option[Schema.ResultSetStats]] = (fun: Schema.ResultSetStats) => Option(fun)
		given putSchemaMultiplexedSessionPrecommitToken: Conversion[Schema.MultiplexedSessionPrecommitToken, Option[Schema.MultiplexedSessionPrecommitToken]] = (fun: Schema.MultiplexedSessionPrecommitToken) => Option(fun)
		given putSchemaTransaction: Conversion[Schema.Transaction, Option[Schema.Transaction]] = (fun: Schema.Transaction) => Option(fun)
		given putSchemaQueryPlan: Conversion[Schema.QueryPlan, Option[Schema.QueryPlan]] = (fun: Schema.QueryPlan) => Option(fun)
		given putListSchemaPlanNode: Conversion[List[Schema.PlanNode], Option[List[Schema.PlanNode]]] = (fun: List[Schema.PlanNode]) => Option(fun)
		given putSchemaQueryAdvisorResult: Conversion[Schema.QueryAdvisorResult, Option[Schema.QueryAdvisorResult]] = (fun: Schema.QueryAdvisorResult) => Option(fun)
		given putSchemaPlanNodeKindEnum: Conversion[Schema.PlanNode.KindEnum, Option[Schema.PlanNode.KindEnum]] = (fun: Schema.PlanNode.KindEnum) => Option(fun)
		given putListSchemaChildLink: Conversion[List[Schema.ChildLink], Option[List[Schema.ChildLink]]] = (fun: List[Schema.ChildLink]) => Option(fun)
		given putSchemaShortRepresentation: Conversion[Schema.ShortRepresentation, Option[Schema.ShortRepresentation]] = (fun: Schema.ShortRepresentation) => Option(fun)
		given putListSchemaIndexAdvice: Conversion[List[Schema.IndexAdvice], Option[List[Schema.IndexAdvice]]] = (fun: List[Schema.IndexAdvice]) => Option(fun)
		given putListJsValue: Conversion[List[JsValue], Option[List[JsValue]]] = (fun: List[JsValue]) => Option(fun)
		given putListSchemaStatement: Conversion[List[Schema.Statement], Option[List[Schema.Statement]]] = (fun: List[Schema.Statement]) => Option(fun)
		given putListSchemaResultSet: Conversion[List[Schema.ResultSet], Option[List[Schema.ResultSet]]] = (fun: List[Schema.ResultSet]) => Option(fun)
		given putSchemaKeySet: Conversion[Schema.KeySet, Option[Schema.KeySet]] = (fun: Schema.KeySet) => Option(fun)
		given putSchemaReadRequestOrderByEnum: Conversion[Schema.ReadRequest.OrderByEnum, Option[Schema.ReadRequest.OrderByEnum]] = (fun: Schema.ReadRequest.OrderByEnum) => Option(fun)
		given putSchemaReadRequestLockHintEnum: Conversion[Schema.ReadRequest.LockHintEnum, Option[Schema.ReadRequest.LockHintEnum]] = (fun: Schema.ReadRequest.LockHintEnum) => Option(fun)
		given putListSchemaKeyRange: Conversion[List[Schema.KeyRange], Option[List[Schema.KeyRange]]] = (fun: List[Schema.KeyRange]) => Option(fun)
		given putSchemaMutation: Conversion[Schema.Mutation, Option[Schema.Mutation]] = (fun: Schema.Mutation) => Option(fun)
		given putSchemaWrite: Conversion[Schema.Write, Option[Schema.Write]] = (fun: Schema.Write) => Option(fun)
		given putSchemaDelete: Conversion[Schema.Delete, Option[Schema.Delete]] = (fun: Schema.Delete) => Option(fun)
		given putListSchemaMutation: Conversion[List[Schema.Mutation], Option[List[Schema.Mutation]]] = (fun: List[Schema.Mutation]) => Option(fun)
		given putSchemaCommitStats: Conversion[Schema.CommitStats, Option[Schema.CommitStats]] = (fun: Schema.CommitStats) => Option(fun)
		given putSchemaPartitionOptions: Conversion[Schema.PartitionOptions, Option[Schema.PartitionOptions]] = (fun: Schema.PartitionOptions) => Option(fun)
		given putListSchemaPartition: Conversion[List[Schema.Partition], Option[List[Schema.Partition]]] = (fun: List[Schema.Partition]) => Option(fun)
		given putListSchemaMutationGroup: Conversion[List[Schema.MutationGroup], Option[List[Schema.MutationGroup]]] = (fun: List[Schema.MutationGroup]) => Option(fun)
		given putListInt: Conversion[List[Int], Option[List[Int]]] = (fun: List[Int]) => Option(fun)
		given putSchemaOperationProgress: Conversion[Schema.OperationProgress, Option[Schema.OperationProgress]] = (fun: Schema.OperationProgress) => Option(fun)
		given putSchemaCreateInstanceMetadataExpectedFulfillmentPeriodEnum: Conversion[Schema.CreateInstanceMetadata.ExpectedFulfillmentPeriodEnum, Option[Schema.CreateInstanceMetadata.ExpectedFulfillmentPeriodEnum]] = (fun: Schema.CreateInstanceMetadata.ExpectedFulfillmentPeriodEnum) => Option(fun)
		given putSchemaInstanceOperationProgress: Conversion[Schema.InstanceOperationProgress, Option[Schema.InstanceOperationProgress]] = (fun: Schema.InstanceOperationProgress) => Option(fun)
		given putSchemaChangeQuorumRequest: Conversion[Schema.ChangeQuorumRequest, Option[Schema.ChangeQuorumRequest]] = (fun: Schema.ChangeQuorumRequest) => Option(fun)
		given putSchemaRestoreDatabaseMetadataSourceTypeEnum: Conversion[Schema.RestoreDatabaseMetadata.SourceTypeEnum, Option[Schema.RestoreDatabaseMetadata.SourceTypeEnum]] = (fun: Schema.RestoreDatabaseMetadata.SourceTypeEnum) => Option(fun)
		given putListSchemaOperationProgress: Conversion[List[Schema.OperationProgress], Option[List[Schema.OperationProgress]]] = (fun: List[Schema.OperationProgress]) => Option(fun)
		given putListSchemaDdlStatementActionInfo: Conversion[List[Schema.DdlStatementActionInfo], Option[List[Schema.DdlStatementActionInfo]]] = (fun: List[Schema.DdlStatementActionInfo]) => Option(fun)
		given putSchemaUpdateDatabaseRequest: Conversion[Schema.UpdateDatabaseRequest, Option[Schema.UpdateDatabaseRequest]] = (fun: Schema.UpdateDatabaseRequest) => Option(fun)
		given putSchemaDatabase: Conversion[Schema.Database, Option[Schema.Database]] = (fun: Schema.Database) => Option(fun)
		given putSchemaUpdateInstanceMetadataExpectedFulfillmentPeriodEnum: Conversion[Schema.UpdateInstanceMetadata.ExpectedFulfillmentPeriodEnum, Option[Schema.UpdateInstanceMetadata.ExpectedFulfillmentPeriodEnum]] = (fun: Schema.UpdateInstanceMetadata.ExpectedFulfillmentPeriodEnum) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
