package com.boresjo.play.api.google.androidmanagement

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Schema {
	case class ListOperationsResponse(
	  /** A list of operations that matches the specified filter in the request. */
		operations: Option[List[Schema.Operation]] = None,
	  /** The standard List next-page token. */
		nextPageToken: Option[String] = None
	)
	
	case class Operation(
	  /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}. */
		name: Option[String] = None,
	  /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
		metadata: Option[Map[String, JsValue]] = None,
	  /** If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available. */
		done: Option[Boolean] = None,
	  /** The error result of the operation in case of failure or cancellation. */
		error: Option[Schema.Status] = None,
	  /** The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse. */
		response: Option[Map[String, JsValue]] = None
	)
	
	case class Status(
	  /** The status code, which should be an enum value of google.rpc.Code. */
		code: Option[Int] = None,
	  /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
		message: Option[String] = None,
	  /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
		details: Option[List[Map[String, JsValue]]] = None
	)
	
	case class Empty(
	
	)
	
	case class SignupUrl(
	  /** The name of the resource. Use this value in the signupUrl field when calling enterprises.create to complete the enterprise signup flow. */
		name: Option[String] = None,
	  /** A URL where an enterprise admin can register their enterprise. The page can't be rendered in an iframe. */
		url: Option[String] = None
	)
	
	object Enterprise {
		enum EnabledNotificationTypesEnum extends Enum[EnabledNotificationTypesEnum] { case NOTIFICATION_TYPE_UNSPECIFIED, ENROLLMENT, COMPLIANCE_REPORT, STATUS_REPORT, COMMAND, USAGE_LOGS }
	}
	case class Enterprise(
	  /** The name of the enterprise which is generated by the server during creation, in the form enterprises/{enterpriseId}. */
		name: Option[String] = None,
	  /** The types of Google Pub/Sub notifications enabled for the enterprise. */
		enabledNotificationTypes: Option[List[Schema.Enterprise.EnabledNotificationTypesEnum]] = None,
	  /** The topic which Pub/Sub notifications are published to, in the form projects/{project}/topics/{topic}. This field is only required if Pub/Sub notifications are enabled. */
		pubsubTopic: Option[String] = None,
	  /** A color in RGB format that indicates the predominant color to display in the device management app UI. The color components are stored as follows: (red << 16) | (green << 8) | blue, where the value of each component is between 0 and 255, inclusive. */
		primaryColor: Option[Int] = None,
	  /** An image displayed as a logo during device provisioning. Supported types are: image/bmp, image/gif, image/x-ico, image/jpeg, image/png, image/webp, image/vnd.wap.wbmp, image/x-adobe-dng. */
		logo: Option[Schema.ExternalData] = None,
	  /** The name of the enterprise displayed to users. This field has a maximum length of 100 characters. */
		enterpriseDisplayName: Option[String] = None,
	  /** Terms and conditions that must be accepted when provisioning a device for this enterprise. A page of terms is generated for each value in this list. */
		termsAndConditions: Option[List[Schema.TermsAndConditions]] = None,
	  /** Deprecated and unused. */
		appAutoApprovalEnabled: Option[Boolean] = None,
	  /** Sign-in details of the enterprise. */
		signinDetails: Option[List[Schema.SigninDetail]] = None,
	  /** The enterprise contact info of an EMM-managed enterprise. */
		contactInfo: Option[Schema.ContactInfo] = None,
	  /** Settings for Google-provided user authentication. */
		googleAuthenticationSettings: Option[Schema.GoogleAuthenticationSettings] = None
	)
	
	case class ExternalData(
	  /** The absolute URL to the data, which must use either the http or https scheme. Android Device Policy doesn't provide any credentials in the GET request, so the URL must be publicly accessible. Including a long, random component in the URL may be used to prevent attackers from discovering the URL. */
		url: Option[String] = None,
	  /** The base-64 encoded SHA-256 hash of the content hosted at url. If the content doesn't match this hash, Android Device Policy won't use the data. */
		sha256Hash: Option[String] = None
	)
	
	case class TermsAndConditions(
	  /** A short header which appears above the HTML content. */
		header: Option[Schema.UserFacingMessage] = None,
	  /** A well-formatted HTML string. It will be parsed on the client with android.text.Html#fromHtml. */
		content: Option[Schema.UserFacingMessage] = None
	)
	
	case class UserFacingMessage(
	  /** A map containing pairs, where locale is a well-formed BCP 47 language (https://www.w3.org/International/articles/language-tags/) code, such as en-US, es-ES, or fr. */
		localizedMessages: Option[Map[String, String]] = None,
	  /** The default message displayed if no localized message is specified or the user's locale doesn't match with any of the localized messages. A default message must be provided if any localized messages are provided. */
		defaultMessage: Option[String] = None
	)
	
	object SigninDetail {
		enum AllowPersonalUsageEnum extends Enum[AllowPersonalUsageEnum] { case ALLOW_PERSONAL_USAGE_UNSPECIFIED, PERSONAL_USAGE_ALLOWED, PERSONAL_USAGE_DISALLOWED, PERSONAL_USAGE_DISALLOWED_USERLESS }
		enum DefaultStatusEnum extends Enum[DefaultStatusEnum] { case SIGNIN_DETAIL_DEFAULT_STATUS_UNSPECIFIED, SIGNIN_DETAIL_IS_DEFAULT, SIGNIN_DETAIL_IS_NOT_DEFAULT }
	}
	case class SigninDetail(
	  /** Sign-in URL for authentication when device is provisioned with a sign-in enrollment token. The sign-in endpoint should finish authentication flow with a URL in the form of https://enterprise.google.com/android/enroll?et= for a successful login, or https://enterprise.google.com/android/enroll/invalid for a failed login. */
		signinUrl: Option[String] = None,
	  /** An enterprise wide enrollment token used to trigger custom sign-in flow. This is a read-only field generated by the server. */
		signinEnrollmentToken: Option[String] = None,
	  /** A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC, the NFC record must contain a serialized java.util.Properties representation of the properties in the JSON. This is a read-only field generated by the server. */
		qrCode: Option[String] = None,
	  /** Controls whether personal usage is allowed on a device provisioned with this enrollment token.For company-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage requires the user provision the device as a fully managed device.For personally-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage will prevent the device from provisioning. Personal usage cannot be disabled on personally-owned device. */
		allowPersonalUsage: Option[Schema.SigninDetail.AllowPersonalUsageEnum] = None,
	  /** An EMM-specified metadata to distinguish between instances of SigninDetail. */
		tokenTag: Option[String] = None,
	  /** Optional. Whether the sign-in URL should be used by default for the enterprise. The SigninDetail with defaultStatus set to SIGNIN_DETAIL_IS_DEFAULT is used for Google account enrollment method. Only one of an enterprise's signinDetails can have defaultStatus set to SIGNIN_DETAIL_IS_DEFAULT. If an Enterprise has at least one signinDetails and none of them have defaultStatus set to SIGNIN_DETAIL_IS_DEFAULT then the first one from the list is selected and has set defaultStatus to SIGNIN_DETAIL_IS_DEFAULT. If no signinDetails specified for the Enterprise then the Google Account device enrollment will fail. */
		defaultStatus: Option[Schema.SigninDetail.DefaultStatusEnum] = None
	)
	
	case class ContactInfo(
	  /** Email address for a point of contact, which will be used to send important announcements related to managed Google Play. */
		contactEmail: Option[String] = None,
	  /** The name of the data protection officer. */
		dataProtectionOfficerName: Option[String] = None,
	  /** The email of the data protection officer. The email is validated but not verified. */
		dataProtectionOfficerEmail: Option[String] = None,
	  /** The phone number of the data protection officer The phone number is validated but not verified. */
		dataProtectionOfficerPhone: Option[String] = None,
	  /** The name of the EU representative. */
		euRepresentativeName: Option[String] = None,
	  /** The email of the EU representative. The email is validated but not verified. */
		euRepresentativeEmail: Option[String] = None,
	  /** The phone number of the EU representative. The phone number is validated but not verified. */
		euRepresentativePhone: Option[String] = None
	)
	
	object GoogleAuthenticationSettings {
		enum GoogleAuthenticationRequiredEnum extends Enum[GoogleAuthenticationRequiredEnum] { case GOOGLE_AUTHENTICATION_REQUIRED_UNSPECIFIED, NOT_REQUIRED, REQUIRED }
	}
	case class GoogleAuthenticationSettings(
	  /** Output only. Whether users need to be authenticated by Google during the enrollment process. IT admin can specify if Google authentication is enabled for the enterprise for knowledge worker devices. This value can be set only via the Google Admin Console. Google authentication can be used with signin_url In the case where Google authentication is required and a signin_url is specified, Google authentication will be launched before signin_url. */
		googleAuthenticationRequired: Option[Schema.GoogleAuthenticationSettings.GoogleAuthenticationRequiredEnum] = None
	)
	
	case class ListEnterprisesResponse(
	  /** The list of enterprises. */
		enterprises: Option[List[Schema.Enterprise]] = None,
	  /** If there are more results, a token to retrieve next page of results. */
		nextPageToken: Option[String] = None
	)
	
	object EnrollmentToken {
		enum AllowPersonalUsageEnum extends Enum[AllowPersonalUsageEnum] { case ALLOW_PERSONAL_USAGE_UNSPECIFIED, PERSONAL_USAGE_ALLOWED, PERSONAL_USAGE_DISALLOWED, PERSONAL_USAGE_DISALLOWED_USERLESS }
	}
	case class EnrollmentToken(
	  /** The name of the enrollment token, which is generated by the server during creation, in the form enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId}. */
		name: Option[String] = None,
	  /** The token value that's passed to the device and authorizes the device to enroll. This is a read-only field generated by the server. */
		value: Option[String] = None,
	  /** The length of time the enrollment token is valid, ranging from 1 minute to Durations.MAX_VALUE (https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/util/Durations.html#MAX_VALUE), approximately 10,000 years. If not specified, the default duration is 1 hour. Please note that if requested duration causes the resulting expiration_timestamp to exceed Timestamps.MAX_VALUE (https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/util/Timestamps.html#MAX_VALUE), then expiration_timestamp is coerced to Timestamps.MAX_VALUE. */
		duration: Option[String] = None,
	  /** The expiration time of the token. This is a read-only field generated by the server. */
		expirationTimestamp: Option[String] = None,
	  /** The name of the policy initially applied to the enrolled device, in the form enterprises/{enterpriseId}/policies/{policyId}. If not specified, the policy_name for the device’s user is applied. If user_name is also not specified, enterprises/{enterpriseId}/policies/default is applied by default. When updating this field, you can specify only the policyId as long as the policyId doesn’t contain any slashes. The rest of the policy name will be inferred. */
		policyName: Option[String] = None,
	  /** Optional, arbitrary data associated with the enrollment token. This could contain, for example, the ID of an org unit the device is assigned to after enrollment. After a device enrolls with the token, this data will be exposed in the enrollment_token_data field of the Device resource. The data must be 1024 characters or less; otherwise, the creation request will fail. */
		additionalData: Option[String] = None,
	  /** A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC, the NFC record must contain a serialized java.util.Properties representation of the properties in the JSON. */
		qrCode: Option[String] = None,
	  /** Whether the enrollment token is for one time use only. If the flag is set to true, only one device can use it for registration. */
		oneTimeOnly: Option[Boolean] = None,
	  /** This field is deprecated and the value is ignored. */
		user: Option[Schema.User] = None,
	  /** Controls whether personal usage is allowed on a device provisioned with this enrollment token.For company-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage requires the user provision the device as a fully managed device.For personally-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage will prevent the device from provisioning. Personal usage cannot be disabled on personally-owned device. */
		allowPersonalUsage: Option[Schema.EnrollmentToken.AllowPersonalUsageEnum] = None
	)
	
	case class User(
	  /** A unique identifier you create for this user, such as user342 or asset#44418. This field must be set when the user is created and can't be updated. This field must not contain personally identifiable information (PII). This identifier must be 1024 characters or less; otherwise, the update policy request will fail. */
		accountIdentifier: Option[String] = None
	)
	
	case class ListEnrollmentTokensResponse(
	  /** The list of enrollment tokens. */
		enrollmentTokens: Option[List[Schema.EnrollmentToken]] = None,
	  /** If there are more results, a token to retrieve next page of results. */
		nextPageToken: Option[String] = None
	)
	
	object WebToken {
		enum PermissionsEnum extends Enum[PermissionsEnum] { case WEB_TOKEN_PERMISSION_UNSPECIFIED, APPROVE_APPS }
		enum EnabledFeaturesEnum extends Enum[EnabledFeaturesEnum] { case FEATURE_UNSPECIFIED, PLAY_SEARCH, PRIVATE_APPS, WEB_APPS, STORE_BUILDER, MANAGED_CONFIGURATIONS, ZERO_TOUCH_CUSTOMER_MANAGEMENT }
	}
	case class WebToken(
	  /** The name of the web token, which is generated by the server during creation in the form enterprises/{enterpriseId}/webTokens/{webTokenId}. */
		name: Option[String] = None,
	  /** The token value which is used in the hosting page to generate the iframe with the embedded UI. This is a read-only field generated by the server. */
		value: Option[String] = None,
	  /** Permissions available to an admin in the embedded UI. An admin must have all of these permissions in order to view the UI. This field is deprecated. */
		permissions: Option[List[Schema.WebToken.PermissionsEnum]] = None,
	  /** The URL of the parent frame hosting the iframe with the embedded UI. To prevent XSS, the iframe may not be hosted at other URLs. The URL must use the https scheme. */
		parentFrameUrl: Option[String] = None,
	  /** The features to enable. Use this if you want to control exactly which feature(s) will be activated; leave empty to allow all features.Restrictions / things to note: - If no features are listed here, all features are enabled — this is the default behavior where you give access to all features to your admins. - This must not contain any FEATURE_UNSPECIFIED values. - Repeated values are ignored  */
		enabledFeatures: Option[List[Schema.WebToken.EnabledFeaturesEnum]] = None
	)
	
	object Device {
		enum ManagementModeEnum extends Enum[ManagementModeEnum] { case MANAGEMENT_MODE_UNSPECIFIED, DEVICE_OWNER, PROFILE_OWNER }
		enum StateEnum extends Enum[StateEnum] { case DEVICE_STATE_UNSPECIFIED, ACTIVE, DISABLED, DELETED, PROVISIONING, LOST, PREPARING_FOR_MIGRATION, DEACTIVATED_BY_DEVICE_FINANCE }
		enum AppliedStateEnum extends Enum[AppliedStateEnum] { case DEVICE_STATE_UNSPECIFIED, ACTIVE, DISABLED, DELETED, PROVISIONING, LOST, PREPARING_FOR_MIGRATION, DEACTIVATED_BY_DEVICE_FINANCE }
		enum OwnershipEnum extends Enum[OwnershipEnum] { case OWNERSHIP_UNSPECIFIED, COMPANY_OWNED, PERSONALLY_OWNED }
	}
	case class Device(
	  /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}. */
		name: Option[String] = None,
	  /** The resource name of the user that owns this device in the form enterprises/{enterpriseId}/users/{userId}. */
		userName: Option[String] = None,
	  /** The type of management mode Android Device Policy takes on the device. This influences which policy settings are supported. */
		managementMode: Option[Schema.Device.ManagementModeEnum] = None,
	  /** The state to be applied to the device. This field can be modified by a patch request. Note that when calling enterprises.devices.patch, ACTIVE and DISABLED are the only allowable values. To enter the device into a DELETED state, call enterprises.devices.delete. */
		state: Option[Schema.Device.StateEnum] = None,
	  /** The state currently applied to the device. */
		appliedState: Option[Schema.Device.AppliedStateEnum] = None,
	  /** Whether the device is compliant with its policy. */
		policyCompliant: Option[Boolean] = None,
	  /** Details about policy settings that the device is not compliant with. */
		nonComplianceDetails: Option[List[Schema.NonComplianceDetail]] = None,
	  /** The time of device enrollment. */
		enrollmentTime: Option[String] = None,
	  /** The last time the device sent a status report. */
		lastStatusReportTime: Option[String] = None,
	  /** Deprecated. */
		lastPolicyComplianceReportTime: Option[String] = None,
	  /** The last time the device fetched its policy. */
		lastPolicySyncTime: Option[String] = None,
	  /** The name of the policy applied to the device, in the form enterprises/{enterpriseId}/policies/{policyId}. If not specified, the policy_name for the device's user is applied. This field can be modified by a patch request. You can specify only the policyId when calling enterprises.devices.patch, as long as the policyId doesn’t contain any slashes. The rest of the policy name is inferred. */
		policyName: Option[String] = None,
	  /** The name of the policy currently applied to the device. */
		appliedPolicyName: Option[String] = None,
	  /** The version of the policy currently applied to the device. */
		appliedPolicyVersion: Option[String] = None,
	  /** The API level of the Android platform version running on the device. */
		apiLevel: Option[Int] = None,
	  /** If the device was enrolled with an enrollment token with additional data provided, this field contains that data. */
		enrollmentTokenData: Option[String] = None,
	  /** If the device was enrolled with an enrollment token, this field contains the name of the token. */
		enrollmentTokenName: Option[String] = None,
	  /** If the device state is DISABLED, an optional message that is displayed on the device indicating the reason the device is disabled. This field can be modified by a patch request. */
		disabledReason: Option[Schema.UserFacingMessage] = None,
	  /** Detailed information about the device software. This information is only available if softwareInfoEnabled is true in the device's policy. */
		softwareInfo: Option[Schema.SoftwareInfo] = None,
	  /** Detailed information about the device hardware. */
		hardwareInfo: Option[Schema.HardwareInfo] = None,
	  /** Detailed information about displays on the device. This information is only available if displayInfoEnabled is true in the device's policy. */
		displays: Option[List[Schema.Display]] = None,
	  /** Reports for apps installed on the device. This information is only available when application_reports_enabled is true in the device's policy. */
		applicationReports: Option[List[Schema.ApplicationReport]] = None,
	  /** If the same physical device has been enrolled multiple times, this field contains its previous device names. The serial number is used as the unique identifier to determine if the same physical device has enrolled previously. The names are in chronological order. */
		previousDeviceNames: Option[List[String]] = None,
	  /** Device network information. This information is only available if networkInfoEnabled is true in the device's policy. */
		networkInfo: Option[Schema.NetworkInfo] = None,
	  /** Memory information: contains information about device memory and storage. */
		memoryInfo: Option[Schema.MemoryInfo] = None,
	  /** Events related to memory and storage measurements in chronological order. This information is only available if memoryInfoEnabled is true in the device's policy.Events are retained for a certain period of time and old events are deleted. */
		memoryEvents: Option[List[Schema.MemoryEvent]] = None,
	  /** Power management events on the device in chronological order. This information is only available if powerManagementEventsEnabled is true in the device's policy. */
		powerManagementEvents: Option[List[Schema.PowerManagementEvent]] = None,
	  /** Hardware status samples in chronological order. This information is only available if hardwareStatusEnabled is true in the device's policy. */
		hardwareStatusSamples: Option[List[Schema.HardwareStatus]] = None,
	  /** Device settings information. This information is only available if deviceSettingsEnabled is true in the device's policy. */
		deviceSettings: Option[Schema.DeviceSettings] = None,
	  /** The user who owns the device. */
		user: Option[Schema.User] = None,
	  /** Map of selected system properties name and value related to the device. This information is only available if systemPropertiesEnabled is true in the device's policy. */
		systemProperties: Option[Map[String, String]] = None,
	  /** Device's security posture value that reflects how secure the device is. */
		securityPosture: Option[Schema.SecurityPosture] = None,
	  /** Ownership of the managed device. */
		ownership: Option[Schema.Device.OwnershipEnum] = None,
	  /** Information about Common Criteria Mode—security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/) (CC).This information is only available if statusReportingSettings.commonCriteriaModeEnabled is true in the device's policy the device is company-owned. */
		commonCriteriaModeInfo: Option[Schema.CommonCriteriaModeInfo] = None,
	  /** The password requirements currently applied to the device. The applied requirements may be slightly different from those specified in passwordPolicies in some cases. fieldPath is set based on passwordPolicies. */
		appliedPasswordPolicies: Option[List[Schema.PasswordRequirements]] = None,
	  /** Output only. Information related to whether this device was migrated from being managed by another Device Policy Controller (DPC). */
		dpcMigrationInfo: Option[Schema.DpcMigrationInfo] = None
	)
	
	object NonComplianceDetail {
		enum NonComplianceReasonEnum extends Enum[NonComplianceReasonEnum] { case NON_COMPLIANCE_REASON_UNSPECIFIED, API_LEVEL, MANAGEMENT_MODE, USER_ACTION, INVALID_VALUE, APP_NOT_INSTALLED, UNSUPPORTED, APP_INSTALLED, PENDING, APP_INCOMPATIBLE, APP_NOT_UPDATED, DEVICE_INCOMPATIBLE }
		enum InstallationFailureReasonEnum extends Enum[InstallationFailureReasonEnum] { case INSTALLATION_FAILURE_REASON_UNSPECIFIED, INSTALLATION_FAILURE_REASON_UNKNOWN, IN_PROGRESS, NOT_FOUND, NOT_COMPATIBLE_WITH_DEVICE, NOT_APPROVED, PERMISSIONS_NOT_ACCEPTED, NOT_AVAILABLE_IN_COUNTRY, NO_LICENSES_REMAINING, NOT_ENROLLED, USER_INVALID, NETWORK_ERROR_UNRELIABLE_CONNECTION, INSUFFICIENT_STORAGE }
		enum SpecificNonComplianceReasonEnum extends Enum[SpecificNonComplianceReasonEnum] { case SPECIFIC_NON_COMPLIANCE_REASON_UNSPECIFIED, PASSWORD_POLICIES_USER_CREDENTIALS_CONFIRMATION_REQUIRED, PASSWORD_POLICIES_PASSWORD_EXPIRED, PASSWORD_POLICIES_PASSWORD_NOT_SUFFICIENT, ONC_WIFI_INVALID_VALUE, ONC_WIFI_API_LEVEL, ONC_WIFI_INVALID_ENTERPRISE_CONFIG, ONC_WIFI_USER_SHOULD_REMOVE_NETWORK, ONC_WIFI_KEY_PAIR_ALIAS_NOT_CORRESPONDING_TO_EXISTING_KEY }
	}
	case class NonComplianceDetail(
	  /** The name of the policy setting. This is the JSON field name of a top-level Policy field. */
		settingName: Option[String] = None,
	  /** The reason the device is not in compliance with the setting. */
		nonComplianceReason: Option[Schema.NonComplianceDetail.NonComplianceReasonEnum] = None,
	  /** The package name indicating which app is out of compliance, if applicable. */
		packageName: Option[String] = None,
	  /** For settings with nested fields, if a particular nested field is out of compliance, this specifies the full path to the offending field. The path is formatted in the same way the policy JSON field would be referenced in JavaScript, that is: 1) For object-typed fields, the field name is followed by a dot then by a subfield name. 2) For array-typed fields, the field name is followed by the array index enclosed in brackets. For example, to indicate a problem with the url field in the externalData field in the 3rd application, the path would be applications[2].externalData.url */
		fieldPath: Option[String] = None,
	  /** If the policy setting could not be applied, the current value of the setting on the device. */
		currentValue: Option[JsValue] = None,
	  /** If package_name is set and the non-compliance reason is APP_NOT_INSTALLED or APP_NOT_UPDATED, the detailed reason the app can't be installed or updated. */
		installationFailureReason: Option[Schema.NonComplianceDetail.InstallationFailureReasonEnum] = None,
	  /** The policy-specific reason the device is not in compliance with the setting. */
		specificNonComplianceReason: Option[Schema.NonComplianceDetail.SpecificNonComplianceReasonEnum] = None,
	  /** Additional context for specific_non_compliance_reason. */
		specificNonComplianceContext: Option[Schema.SpecificNonComplianceContext] = None
	)
	
	case class SpecificNonComplianceContext(
	  /** Additional context for non-compliance related to Wi-Fi configuration. See ONC_WIFI_INVALID_VALUE and ONC_WIFI_API_LEVEL */
		oncWifiContext: Option[Schema.OncWifiContext] = None,
	  /** Additional context for non-compliance related to password policies. See PASSWORD_POLICIES_PASSWORD_EXPIRED and PASSWORD_POLICIES_PASSWORD_NOT_SUFFICIENT. */
		passwordPoliciesContext: Option[Schema.PasswordPoliciesContext] = None
	)
	
	case class OncWifiContext(
	  /** The GUID of non-compliant Wi-Fi configuration. */
		wifiGuid: Option[String] = None
	)
	
	object PasswordPoliciesContext {
		enum PasswordPolicyScopeEnum extends Enum[PasswordPolicyScopeEnum] { case SCOPE_UNSPECIFIED, SCOPE_DEVICE, SCOPE_PROFILE }
	}
	case class PasswordPoliciesContext(
	  /** The scope of non-compliant password. */
		passwordPolicyScope: Option[Schema.PasswordPoliciesContext.PasswordPolicyScopeEnum] = None
	)
	
	case class SoftwareInfo(
	  /** The user-visible Android version string. For example, 6.0.1. */
		androidVersion: Option[String] = None,
	  /** The Android Device Policy app version code. */
		androidDevicePolicyVersionCode: Option[Int] = None,
	  /** The Android Device Policy app version as displayed to the user. */
		androidDevicePolicyVersionName: Option[String] = None,
	  /** Android build ID string meant for displaying to the user. For example, shamu-userdebug 6.0.1 MOB30I 2756745 dev-keys. */
		androidBuildNumber: Option[String] = None,
	  /** Kernel version, for example, 2.6.32.9-g103d848. */
		deviceKernelVersion: Option[String] = None,
	  /** The system bootloader version number, e.g. 0.6.7. */
		bootloaderVersion: Option[String] = None,
	  /** Build time. */
		androidBuildTime: Option[String] = None,
	  /** Security patch level, e.g. 2016-05-01. */
		securityPatchLevel: Option[String] = None,
	  /** An IETF BCP 47 language code for the primary locale on the device. */
		primaryLanguageCode: Option[String] = None,
	  /** SHA-256 hash of android.content.pm.Signature (https://developer.android.com/reference/android/content/pm/Signature.html) associated with the system package, which can be used to verify that the system build hasn't been modified. */
		deviceBuildSignature: Option[String] = None,
	  /** Information about a potential pending system update. */
		systemUpdateInfo: Option[Schema.SystemUpdateInfo] = None
	)
	
	object SystemUpdateInfo {
		enum UpdateStatusEnum extends Enum[UpdateStatusEnum] { case UPDATE_STATUS_UNKNOWN, UP_TO_DATE, UNKNOWN_UPDATE_AVAILABLE, SECURITY_UPDATE_AVAILABLE, OS_UPDATE_AVAILABLE }
	}
	case class SystemUpdateInfo(
	  /** The status of an update: whether an update exists and what type it is. */
		updateStatus: Option[Schema.SystemUpdateInfo.UpdateStatusEnum] = None,
	  /** The time when the update was first available. A zero value indicates that this field is not set. This field is set only if an update is available (that is, updateStatus is neither UPDATE_STATUS_UNKNOWN nor UP_TO_DATE). */
		updateReceivedTime: Option[String] = None
	)
	
	case class HardwareInfo(
	  /** Brand of the device. For example, Google. */
		brand: Option[String] = None,
	  /** Name of the hardware. For example, Angler. */
		hardware: Option[String] = None,
	  /** Baseband version. For example, MDM9625_104662.22.05.34p. */
		deviceBasebandVersion: Option[String] = None,
	  /** Manufacturer. For example, Motorola. */
		manufacturer: Option[String] = None,
	  /** The device serial number. */
		serialNumber: Option[String] = None,
	  /** The model of the device. For example, Asus Nexus 7. */
		model: Option[String] = None,
	  /** Battery shutdown temperature thresholds in Celsius for each battery on the device. */
		batteryShutdownTemperatures: Option[List[BigDecimal]] = None,
	  /** Battery throttling temperature thresholds in Celsius for each battery on the device. */
		batteryThrottlingTemperatures: Option[List[BigDecimal]] = None,
	  /** CPU shutdown temperature thresholds in Celsius for each CPU on the device. */
		cpuShutdownTemperatures: Option[List[BigDecimal]] = None,
	  /** CPU throttling temperature thresholds in Celsius for each CPU on the device. */
		cpuThrottlingTemperatures: Option[List[BigDecimal]] = None,
	  /** GPU shutdown temperature thresholds in Celsius for each GPU on the device. */
		gpuShutdownTemperatures: Option[List[BigDecimal]] = None,
	  /** GPU throttling temperature thresholds in Celsius for each GPU on the device. */
		gpuThrottlingTemperatures: Option[List[BigDecimal]] = None,
	  /** Device skin shutdown temperature thresholds in Celsius. */
		skinShutdownTemperatures: Option[List[BigDecimal]] = None,
	  /** Device skin throttling temperature thresholds in Celsius. */
		skinThrottlingTemperatures: Option[List[BigDecimal]] = None,
	  /** Output only. ID that uniquely identifies a personally-owned device in a particular organization. On the same physical device when enrolled with the same organization, this ID persists across setups and even factory resets. This ID is available on personally-owned devices with a work profile on devices running Android 12 and above. */
		enterpriseSpecificId: Option[String] = None
	)
	
	object Display {
		enum StateEnum extends Enum[StateEnum] { case DISPLAY_STATE_UNSPECIFIED, OFF, ON, DOZE, SUSPENDED }
	}
	case class Display(
	  /** Name of the display. */
		name: Option[String] = None,
	  /** Unique display id. */
		displayId: Option[Int] = None,
	  /** Refresh rate of the display in frames per second. */
		refreshRate: Option[Int] = None,
	  /** State of the display. */
		state: Option[Schema.Display.StateEnum] = None,
	  /** Display width in pixels. */
		width: Option[Int] = None,
	  /** Display height in pixels. */
		height: Option[Int] = None,
	  /** Display density expressed as dots-per-inch. */
		density: Option[Int] = None
	)
	
	object ApplicationReport {
		enum ApplicationSourceEnum extends Enum[ApplicationSourceEnum] { case APPLICATION_SOURCE_UNSPECIFIED, SYSTEM_APP_FACTORY_VERSION, SYSTEM_APP_UPDATED_VERSION, INSTALLED_FROM_PLAY_STORE }
		enum StateEnum extends Enum[StateEnum] { case APPLICATION_STATE_UNSPECIFIED, REMOVED, INSTALLED }
		enum UserFacingTypeEnum extends Enum[UserFacingTypeEnum] { case USER_FACING_TYPE_UNSPECIFIED, NOT_USER_FACING, USER_FACING }
	}
	case class ApplicationReport(
	  /** Package name of the app. */
		packageName: Option[String] = None,
	  /** The app version as displayed to the user. */
		versionName: Option[String] = None,
	  /** The app version code, which can be used to determine whether one version is more recent than another. */
		versionCode: Option[Int] = None,
	  /** The list of app events which have occurred in the last 30 hours. */
		events: Option[List[Schema.ApplicationEvent]] = None,
	  /** The display name of the app. */
		displayName: Option[String] = None,
	  /** The SHA-256 hash of the app's APK file, which can be used to verify the app hasn't been modified. Each byte of the hash value is represented as a two-digit hexadecimal number. */
		packageSha256Hash: Option[String] = None,
	  /** The SHA-1 hash of each android.content.pm.Signature (https://developer.android.com/reference/android/content/pm/Signature.html) associated with the app package. Each byte of each hash value is represented as a two-digit hexadecimal number. */
		signingKeyCertFingerprints: Option[List[String]] = None,
	  /** The package name of the app that installed this app. */
		installerPackageName: Option[String] = None,
	  /** The source of the package. */
		applicationSource: Option[Schema.ApplicationReport.ApplicationSourceEnum] = None,
	  /** Application state. */
		state: Option[Schema.ApplicationReport.StateEnum] = None,
	  /** List of keyed app states reported by the app. */
		keyedAppStates: Option[List[Schema.KeyedAppState]] = None,
	  /** Whether the app is user facing. */
		userFacingType: Option[Schema.ApplicationReport.UserFacingTypeEnum] = None
	)
	
	object ApplicationEvent {
		enum EventTypeEnum extends Enum[EventTypeEnum] { case APPLICATION_EVENT_TYPE_UNSPECIFIED, INSTALLED, CHANGED, DATA_CLEARED, REMOVED, REPLACED, RESTARTED, PINNED, UNPINNED }
	}
	case class ApplicationEvent(
	  /** App event type. */
		eventType: Option[Schema.ApplicationEvent.EventTypeEnum] = None,
	  /** The creation time of the event. */
		createTime: Option[String] = None
	)
	
	object KeyedAppState {
		enum SeverityEnum extends Enum[SeverityEnum] { case SEVERITY_UNSPECIFIED, INFO, ERROR }
	}
	case class KeyedAppState(
	  /** The key for the app state. Acts as a point of reference for what the app is providing state for. For example, when providing managed configuration feedback, this key could be the managed configuration key. */
		key: Option[String] = None,
	  /** The severity of the app state. */
		severity: Option[Schema.KeyedAppState.SeverityEnum] = None,
	  /** Optionally, a free-form message string to explain the app state. If the state was triggered by a particular value (e.g. a managed configuration value), it should be included in the message. */
		message: Option[String] = None,
	  /** Optionally, a machine-readable value to be read by the EMM. For example, setting values that the admin can choose to query against in the EMM console (e.g. “notify me if the battery_warning data < 10”). */
		data: Option[String] = None,
	  /** The creation time of the app state on the device. */
		createTime: Option[String] = None,
	  /** The time the app state was most recently updated. */
		lastUpdateTime: Option[String] = None
	)
	
	case class NetworkInfo(
	  /** IMEI number of the GSM device. For example, A1000031212. */
		imei: Option[String] = None,
	  /** MEID number of the CDMA device. For example, A00000292788E1. */
		meid: Option[String] = None,
	  /** Wi-Fi MAC address of the device. For example, 7c:11:11:11:11:11. */
		wifiMacAddress: Option[String] = None,
	  /** Alphabetic name of current registered operator. For example, Vodafone. */
		networkOperatorName: Option[String] = None,
	  /** Provides telephony information associated with each SIM card on the device. Only supported on fully managed devices starting from Android API level 23. */
		telephonyInfos: Option[List[Schema.TelephonyInfo]] = None
	)
	
	case class TelephonyInfo(
	  /** The phone number associated with this SIM card. */
		phoneNumber: Option[String] = None,
	  /** The carrier name associated with this SIM card. */
		carrierName: Option[String] = None,
	  /** Output only. The ICCID associated with this SIM card. */
		iccId: Option[String] = None
	)
	
	case class MemoryInfo(
	  /** Total RAM on device in bytes. */
		totalRam: Option[String] = None,
	  /** Total internal storage on device in bytes. */
		totalInternalStorage: Option[String] = None
	)
	
	object MemoryEvent {
		enum EventTypeEnum extends Enum[EventTypeEnum] { case MEMORY_EVENT_TYPE_UNSPECIFIED, RAM_MEASURED, INTERNAL_STORAGE_MEASURED, EXTERNAL_STORAGE_DETECTED, EXTERNAL_STORAGE_REMOVED, EXTERNAL_STORAGE_MEASURED }
	}
	case class MemoryEvent(
	  /** Event type. */
		eventType: Option[Schema.MemoryEvent.EventTypeEnum] = None,
	  /** The creation time of the event. */
		createTime: Option[String] = None,
	  /** The number of free bytes in the medium, or for EXTERNAL_STORAGE_DETECTED, the total capacity in bytes of the storage medium. */
		byteCount: Option[String] = None
	)
	
	object PowerManagementEvent {
		enum EventTypeEnum extends Enum[EventTypeEnum] { case POWER_MANAGEMENT_EVENT_TYPE_UNSPECIFIED, BATTERY_LEVEL_COLLECTED, POWER_CONNECTED, POWER_DISCONNECTED, BATTERY_LOW, BATTERY_OKAY, BOOT_COMPLETED, SHUTDOWN }
	}
	case class PowerManagementEvent(
	  /** Event type. */
		eventType: Option[Schema.PowerManagementEvent.EventTypeEnum] = None,
	  /** The creation time of the event. */
		createTime: Option[String] = None,
	  /** For BATTERY_LEVEL_COLLECTED events, the battery level as a percentage. */
		batteryLevel: Option[BigDecimal] = None
	)
	
	case class HardwareStatus(
	  /** The time the measurements were taken. */
		createTime: Option[String] = None,
	  /** Current battery temperatures in Celsius for each battery on the device. */
		batteryTemperatures: Option[List[BigDecimal]] = None,
	  /** Current CPU temperatures in Celsius for each CPU on the device. */
		cpuTemperatures: Option[List[BigDecimal]] = None,
	  /** Current GPU temperatures in Celsius for each GPU on the device. */
		gpuTemperatures: Option[List[BigDecimal]] = None,
	  /** Current device skin temperatures in Celsius. */
		skinTemperatures: Option[List[BigDecimal]] = None,
	  /** Fan speeds in RPM for each fan on the device. Empty array means that there are no fans or fan speed is not supported on the system. */
		fanSpeeds: Option[List[BigDecimal]] = None,
	  /** CPU usages in percentage for each core available on the device. Usage is 0 for each unplugged core. Empty array implies that CPU usage is not supported in the system. */
		cpuUsages: Option[List[BigDecimal]] = None
	)
	
	object DeviceSettings {
		enum EncryptionStatusEnum extends Enum[EncryptionStatusEnum] { case ENCRYPTION_STATUS_UNSPECIFIED, UNSUPPORTED, INACTIVE, ACTIVATING, ACTIVE, ACTIVE_DEFAULT_KEY, ACTIVE_PER_USER }
	}
	case class DeviceSettings(
	  /** Whether the device is secured with PIN/password. */
		isDeviceSecure: Option[Boolean] = None,
	  /** Whether installing apps from unknown sources is enabled. */
		unknownSourcesEnabled: Option[Boolean] = None,
	  /** Whether developer mode is enabled on the device. */
		developmentSettingsEnabled: Option[Boolean] = None,
	  /** Whether ADB (https://developer.android.com/studio/command-line/adb.html) is enabled on the device. */
		adbEnabled: Option[Boolean] = None,
	  /** Whether the storage encryption is enabled. */
		isEncrypted: Option[Boolean] = None,
	  /** Encryption status from DevicePolicyManager. */
		encryptionStatus: Option[Schema.DeviceSettings.EncryptionStatusEnum] = None,
	  /** Whether Google Play Protect verification (https://support.google.com/accounts/answer/2812853) is enforced on the device. */
		verifyAppsEnabled: Option[Boolean] = None
	)
	
	object SecurityPosture {
		enum DevicePostureEnum extends Enum[DevicePostureEnum] { case POSTURE_UNSPECIFIED, SECURE, AT_RISK, POTENTIALLY_COMPROMISED }
	}
	case class SecurityPosture(
	  /** Device's security posture value. */
		devicePosture: Option[Schema.SecurityPosture.DevicePostureEnum] = None,
	  /** Additional details regarding the security posture of the device. */
		postureDetails: Option[List[Schema.PostureDetail]] = None
	)
	
	object PostureDetail {
		enum SecurityRiskEnum extends Enum[SecurityRiskEnum] { case SECURITY_RISK_UNSPECIFIED, UNKNOWN_OS, COMPROMISED_OS, HARDWARE_BACKED_EVALUATION_FAILED }
	}
	case class PostureDetail(
	  /** A specific security risk that negatively affects the security posture of the device. */
		securityRisk: Option[Schema.PostureDetail.SecurityRiskEnum] = None,
	  /** Corresponding admin-facing advice to mitigate this security risk and improve the security posture of the device. */
		advice: Option[List[Schema.UserFacingMessage]] = None
	)
	
	object CommonCriteriaModeInfo {
		enum CommonCriteriaModeStatusEnum extends Enum[CommonCriteriaModeStatusEnum] { case COMMON_CRITERIA_MODE_STATUS_UNKNOWN, COMMON_CRITERIA_MODE_DISABLED, COMMON_CRITERIA_MODE_ENABLED }
		enum PolicySignatureVerificationStatusEnum extends Enum[PolicySignatureVerificationStatusEnum] { case POLICY_SIGNATURE_VERIFICATION_STATUS_UNSPECIFIED, POLICY_SIGNATURE_VERIFICATION_DISABLED, POLICY_SIGNATURE_VERIFICATION_SUCCEEDED, POLICY_SIGNATURE_VERIFICATION_NOT_SUPPORTED, POLICY_SIGNATURE_VERIFICATION_FAILED }
	}
	case class CommonCriteriaModeInfo(
	  /** Whether Common Criteria Mode is enabled. */
		commonCriteriaModeStatus: Option[Schema.CommonCriteriaModeInfo.CommonCriteriaModeStatusEnum] = None,
	  /** Output only. The status of policy signature verification. */
		policySignatureVerificationStatus: Option[Schema.CommonCriteriaModeInfo.PolicySignatureVerificationStatusEnum] = None
	)
	
	object PasswordRequirements {
		enum PasswordQualityEnum extends Enum[PasswordQualityEnum] { case PASSWORD_QUALITY_UNSPECIFIED, BIOMETRIC_WEAK, SOMETHING, NUMERIC, NUMERIC_COMPLEX, ALPHABETIC, ALPHANUMERIC, COMPLEX, COMPLEXITY_LOW, COMPLEXITY_MEDIUM, COMPLEXITY_HIGH }
		enum PasswordScopeEnum extends Enum[PasswordScopeEnum] { case SCOPE_UNSPECIFIED, SCOPE_DEVICE, SCOPE_PROFILE }
		enum RequirePasswordUnlockEnum extends Enum[RequirePasswordUnlockEnum] { case REQUIRE_PASSWORD_UNLOCK_UNSPECIFIED, USE_DEFAULT_DEVICE_TIMEOUT, REQUIRE_EVERY_DAY }
		enum UnifiedLockSettingsEnum extends Enum[UnifiedLockSettingsEnum] { case UNIFIED_LOCK_SETTINGS_UNSPECIFIED, ALLOW_UNIFIED_WORK_AND_PERSONAL_LOCK, REQUIRE_SEPARATE_WORK_LOCK }
	}
	case class PasswordRequirements(
	  /** The minimum allowed password length. A value of 0 means there is no restriction. Only enforced when password_quality is NUMERIC, NUMERIC_COMPLEX, ALPHABETIC, ALPHANUMERIC, or COMPLEX. */
		passwordMinimumLength: Option[Int] = None,
	  /** Minimum number of letters required in the password. Only enforced when password_quality is COMPLEX. */
		passwordMinimumLetters: Option[Int] = None,
	  /** Minimum number of lower case letters required in the password. Only enforced when password_quality is COMPLEX. */
		passwordMinimumLowerCase: Option[Int] = None,
	  /** Minimum number of non-letter characters (numerical digits or symbols) required in the password. Only enforced when password_quality is COMPLEX. */
		passwordMinimumNonLetter: Option[Int] = None,
	  /** Minimum number of numerical digits required in the password. Only enforced when password_quality is COMPLEX. */
		passwordMinimumNumeric: Option[Int] = None,
	  /** Minimum number of symbols required in the password. Only enforced when password_quality is COMPLEX. */
		passwordMinimumSymbols: Option[Int] = None,
	  /** Minimum number of upper case letters required in the password. Only enforced when password_quality is COMPLEX. */
		passwordMinimumUpperCase: Option[Int] = None,
	  /** The required password quality. */
		passwordQuality: Option[Schema.PasswordRequirements.PasswordQualityEnum] = None,
	  /** The length of the password history. After setting this field, the user won't be able to enter a new password that is the same as any password in the history. A value of 0 means there is no restriction. */
		passwordHistoryLength: Option[Int] = None,
	  /** Number of incorrect device-unlock passwords that can be entered before a device is wiped. A value of 0 means there is no restriction. */
		maximumFailedPasswordsForWipe: Option[Int] = None,
	  /** Password expiration timeout. */
		passwordExpirationTimeout: Option[String] = None,
	  /** The scope that the password requirement applies to. */
		passwordScope: Option[Schema.PasswordRequirements.PasswordScopeEnum] = None,
	  /** The length of time after a device or work profile is unlocked using a strong form of authentication (password, PIN, pattern) that it can be unlocked using any other authentication method (e.g. fingerprint, trust agents, face). After the specified time period elapses, only strong forms of authentication can be used to unlock the device or work profile. */
		requirePasswordUnlock: Option[Schema.PasswordRequirements.RequirePasswordUnlockEnum] = None,
	  /** Controls whether a unified lock is allowed for the device and the work profile, on devices running Android 9 and above with a work profile. This can be set only if password_scope is set to SCOPE_PROFILE, the policy will be rejected otherwise. If user has not set a separate work lock and this field is set to REQUIRE_SEPARATE_WORK_LOCK, a NonComplianceDetail is reported with nonComplianceReason set to USER_ACTION. */
		unifiedLockSettings: Option[Schema.PasswordRequirements.UnifiedLockSettingsEnum] = None
	)
	
	case class DpcMigrationInfo(
	  /** Output only. If this device was migrated from another DPC, this is its package name. Not populated otherwise. */
		previousDpc: Option[String] = None,
	  /** Output only. If this device was migrated from another DPC, the additionalData field of the migration token is populated here. */
		additionalData: Option[String] = None
	)
	
	case class ListDevicesResponse(
	  /** The list of devices. */
		devices: Option[List[Schema.Device]] = None,
	  /** If there are more results, a token to retrieve next page of results. */
		nextPageToken: Option[String] = None
	)
	
	object Policy {
		enum KeyguardDisabledFeaturesEnum extends Enum[KeyguardDisabledFeaturesEnum] { case KEYGUARD_DISABLED_FEATURE_UNSPECIFIED, CAMERA, NOTIFICATIONS, UNREDACTED_NOTIFICATIONS, TRUST_AGENTS, DISABLE_FINGERPRINT, DISABLE_REMOTE_INPUT, FACE, IRIS, BIOMETRICS, SHORTCUTS, ALL_FEATURES }
		enum DefaultPermissionPolicyEnum extends Enum[DefaultPermissionPolicyEnum] { case PERMISSION_POLICY_UNSPECIFIED, PROMPT, GRANT, DENY }
		enum StayOnPluggedModesEnum extends Enum[StayOnPluggedModesEnum] { case BATTERY_PLUGGED_MODE_UNSPECIFIED, AC, USB, WIRELESS }
		enum LocationModeEnum extends Enum[LocationModeEnum] { case LOCATION_MODE_UNSPECIFIED, HIGH_ACCURACY, SENSORS_ONLY, BATTERY_SAVING, OFF, LOCATION_USER_CHOICE, LOCATION_ENFORCED, LOCATION_DISABLED }
		enum AppAutoUpdatePolicyEnum extends Enum[AppAutoUpdatePolicyEnum] { case APP_AUTO_UPDATE_POLICY_UNSPECIFIED, CHOICE_TO_THE_USER, NEVER, WIFI_ONLY, ALWAYS }
		enum AndroidDevicePolicyTracksEnum extends Enum[AndroidDevicePolicyTracksEnum] { case APP_TRACK_UNSPECIFIED, PRODUCTION, BETA }
		enum EncryptionPolicyEnum extends Enum[EncryptionPolicyEnum] { case ENCRYPTION_POLICY_UNSPECIFIED, ENABLED_WITHOUT_PASSWORD, ENABLED_WITH_PASSWORD }
		enum PlayStoreModeEnum extends Enum[PlayStoreModeEnum] { case PLAY_STORE_MODE_UNSPECIFIED, WHITELIST, BLACKLIST }
		enum AutoDateAndTimeZoneEnum extends Enum[AutoDateAndTimeZoneEnum] { case AUTO_DATE_AND_TIME_ZONE_UNSPECIFIED, AUTO_DATE_AND_TIME_ZONE_USER_CHOICE, AUTO_DATE_AND_TIME_ZONE_ENFORCED }
		enum PreferentialNetworkServiceEnum extends Enum[PreferentialNetworkServiceEnum] { case PREFERENTIAL_NETWORK_SERVICE_UNSPECIFIED, PREFERENTIAL_NETWORK_SERVICE_DISABLED, PREFERENTIAL_NETWORK_SERVICE_ENABLED }
		enum CameraAccessEnum extends Enum[CameraAccessEnum] { case CAMERA_ACCESS_UNSPECIFIED, CAMERA_ACCESS_USER_CHOICE, CAMERA_ACCESS_DISABLED, CAMERA_ACCESS_ENFORCED }
		enum MicrophoneAccessEnum extends Enum[MicrophoneAccessEnum] { case MICROPHONE_ACCESS_UNSPECIFIED, MICROPHONE_ACCESS_USER_CHOICE, MICROPHONE_ACCESS_DISABLED, MICROPHONE_ACCESS_ENFORCED }
		enum CredentialProviderPolicyDefaultEnum extends Enum[CredentialProviderPolicyDefaultEnum] { case CREDENTIAL_PROVIDER_POLICY_DEFAULT_UNSPECIFIED, CREDENTIAL_PROVIDER_DEFAULT_DISALLOWED, CREDENTIAL_PROVIDER_DEFAULT_DISALLOWED_EXCEPT_SYSTEM }
		enum PrintingPolicyEnum extends Enum[PrintingPolicyEnum] { case PRINTING_POLICY_UNSPECIFIED, PRINTING_DISALLOWED, PRINTING_ALLOWED }
		enum AssistContentPolicyEnum extends Enum[AssistContentPolicyEnum] { case ASSIST_CONTENT_POLICY_UNSPECIFIED, ASSIST_CONTENT_DISALLOWED, ASSIST_CONTENT_ALLOWED }
	}
	case class Policy(
	  /** The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}. */
		name: Option[String] = None,
	  /** The version of the policy. This is a read-only field. The version is incremented each time the policy is updated. */
		version: Option[String] = None,
	  /** Policy applied to apps. This can have at most 3,000 elements. */
		applications: Option[List[Schema.ApplicationPolicy]] = None,
	  /** Maximum time in milliseconds for user activity until the device locks. A value of 0 means there is no restriction. */
		maximumTimeToLock: Option[String] = None,
	  /** Whether screen capture is disabled. */
		screenCaptureDisabled: Option[Boolean] = None,
	  /** If camera_access is set to any value other than CAMERA_ACCESS_UNSPECIFIED, this has no effect. Otherwise this field controls whether cameras are disabled: If true, all cameras are disabled, otherwise they are available. For fully managed devices this field applies for all apps on the device. For work profiles, this field applies only to apps in the work profile, and the camera access of apps outside the work profile is unaffected. */
		cameraDisabled: Option[Boolean] = None,
	  /** Disabled keyguard customizations, such as widgets. */
		keyguardDisabledFeatures: Option[List[Schema.Policy.KeyguardDisabledFeaturesEnum]] = None,
	  /** The default permission policy for runtime permission requests. */
		defaultPermissionPolicy: Option[Schema.Policy.DefaultPermissionPolicyEnum] = None,
	  /** Default intent handler activities. */
		persistentPreferredActivities: Option[List[Schema.PersistentPreferredActivity]] = None,
	  /** Network configuration for the device. See configure networks for more information. */
		openNetworkConfiguration: Option[Map[String, JsValue]] = None,
	  /** The system update policy, which controls how OS updates are applied. If the update type is WINDOWED, the update window will automatically apply to Play app updates as well.Note: Google Play system updates (https://source.android.com/docs/core/ota/modular-system) (also called Mainline updates) are automatically downloaded and require a device reboot to be installed. Refer to the mainline section in Manage system updates (https://developer.android.com/work/dpc/system-updates#mainline) for further details. */
		systemUpdate: Option[Schema.SystemUpdate] = None,
	  /** Account types that can't be managed by the user. */
		accountTypesWithManagementDisabled: Option[List[String]] = None,
	  /** Whether adding new users and profiles is disabled. For devices where managementMode is DEVICE_OWNER this field is ignored and the user is never allowed to add or remove users. */
		addUserDisabled: Option[Boolean] = None,
	  /** Whether adjusting the master volume is disabled. Also mutes the device. */
		adjustVolumeDisabled: Option[Boolean] = None,
	  /** Whether factory resetting from settings is disabled. */
		factoryResetDisabled: Option[Boolean] = None,
	  /** Whether user installation of apps is disabled. */
		installAppsDisabled: Option[Boolean] = None,
	  /** Whether the user mounting physical external media is disabled. */
		mountPhysicalMediaDisabled: Option[Boolean] = None,
	  /** Whether adding or removing accounts is disabled. */
		modifyAccountsDisabled: Option[Boolean] = None,
	  /** Whether rebooting the device into safe boot is disabled. */
		safeBootDisabled: Option[Boolean] = None,
	  /** Whether user uninstallation of applications is disabled. This prevents apps from being uninstalled, even those removed using applications */
		uninstallAppsDisabled: Option[Boolean] = None,
	  /** Whether the status bar is disabled. This disables notifications, quick settings, and other screen overlays that allow escape from full-screen mode. DEPRECATED. To disable the status bar on a kiosk device, use InstallType KIOSK or kioskCustomLauncherEnabled. */
		statusBarDisabled: Option[Boolean] = None,
	  /** If true, this disables the Lock Screen (https://source.android.com/docs/core/display/multi_display/lock-screen) for primary and/or secondary displays. */
		keyguardDisabled: Option[Boolean] = None,
	  /** The minimum allowed Android API level. */
		minimumApiLevel: Option[Int] = None,
	  /** Status reporting settings */
		statusReportingSettings: Option[Schema.StatusReportingSettings] = None,
	  /** Whether bluetooth contact sharing is disabled. */
		bluetoothContactSharingDisabled: Option[Boolean] = None,
	  /** A message displayed to the user in the settings screen wherever functionality has been disabled by the admin. If the message is longer than 200 characters it may be truncated. */
		shortSupportMessage: Option[Schema.UserFacingMessage] = None,
	  /** A message displayed to the user in the device administators settings screen. */
		longSupportMessage: Option[Schema.UserFacingMessage] = None,
	  /** Password requirements. The field password_requirements.require_password_unlock must not be set. DEPRECATED - Use passwordPolicies.Note:Complexity-based values of PasswordQuality, that is, COMPLEXITY_LOW, COMPLEXITY_MEDIUM, and COMPLEXITY_HIGH, cannot be used here. unified_lock_settings cannot be used here. */
		passwordRequirements: Option[Schema.PasswordRequirements] = None,
	  /** This is deprecated. */
		wifiConfigsLockdownEnabled: Option[Boolean] = None,
	  /** Whether configuring bluetooth is disabled. */
		bluetoothConfigDisabled: Option[Boolean] = None,
	  /** Whether configuring cell broadcast is disabled. */
		cellBroadcastsConfigDisabled: Option[Boolean] = None,
	  /** Whether configuring user credentials is disabled. */
		credentialsConfigDisabled: Option[Boolean] = None,
	  /** Whether configuring mobile networks is disabled. */
		mobileNetworksConfigDisabled: Option[Boolean] = None,
	  /** Whether configuring tethering and portable hotspots is disabled. If tetheringSettings is set to anything other than TETHERING_SETTINGS_UNSPECIFIED, this setting is ignored. */
		tetheringConfigDisabled: Option[Boolean] = None,
	  /** Whether configuring VPN is disabled. */
		vpnConfigDisabled: Option[Boolean] = None,
	  /** Whether configuring Wi-Fi networks is disabled. Supported on fully managed devices and work profiles on company-owned devices. For fully managed devices, setting this to true removes all configured networks and retains only the networks configured using openNetworkConfiguration. For work profiles on company-owned devices, existing configured networks are not affected and the user is not allowed to add, remove, or modify Wi-Fi networks. If configureWifi is set to anything other than CONFIGURE_WIFI_UNSPECIFIED, this setting is ignored. Note: If a network connection can't be made at boot time and configuring Wi-Fi is disabled then network escape hatch will be shown in order to refresh the device policy (see networkEscapeHatchEnabled). */
		wifiConfigDisabled: Option[Boolean] = None,
	  /** Whether creating windows besides app windows is disabled. */
		createWindowsDisabled: Option[Boolean] = None,
	  /** Whether resetting network settings is disabled. */
		networkResetDisabled: Option[Boolean] = None,
	  /** Whether using NFC to beam data from apps is disabled. */
		outgoingBeamDisabled: Option[Boolean] = None,
	  /** Whether outgoing calls are disabled. */
		outgoingCallsDisabled: Option[Boolean] = None,
	  /** Whether removing other users is disabled. */
		removeUserDisabled: Option[Boolean] = None,
	  /** Whether location sharing is disabled. share_location_disabled is supported for both fully managed devices and personally owned work profiles. */
		shareLocationDisabled: Option[Boolean] = None,
	  /** Whether sending and receiving SMS messages is disabled. */
		smsDisabled: Option[Boolean] = None,
	  /** If microphone_access is set to any value other than MICROPHONE_ACCESS_UNSPECIFIED, this has no effect. Otherwise this field controls whether microphones are disabled: If true, all microphones are disabled, otherwise they are available. This is available only on fully managed devices. */
		unmuteMicrophoneDisabled: Option[Boolean] = None,
	  /** Whether transferring files over USB is disabled. This is supported only on company-owned devices. */
		usbFileTransferDisabled: Option[Boolean] = None,
	  /** Whether app verification is force-enabled. */
		ensureVerifyAppsEnabled: Option[Boolean] = None,
	  /** If present, only the input methods provided by packages in this list are permitted. If this field is present, but the list is empty, then only system input methods are permitted. */
		permittedInputMethods: Option[Schema.PackageNameList] = None,
	  /** The battery plugged in modes for which the device stays on. When using this setting, it is recommended to clear maximum_time_to_lock so that the device doesn't lock itself while it stays on. */
		stayOnPluggedModes: Option[List[Schema.Policy.StayOnPluggedModesEnum]] = None,
	  /** The network-independent global HTTP proxy. Typically proxies should be configured per-network in open_network_configuration. However for unusual configurations like general internal filtering a global HTTP proxy may be useful. If the proxy is not accessible, network access may break. The global proxy is only a recommendation and some apps may ignore it. */
		recommendedGlobalProxy: Option[Schema.ProxyInfo] = None,
	  /** Whether changing the user icon is disabled. */
		setUserIconDisabled: Option[Boolean] = None,
	  /** Whether changing the wallpaper is disabled. */
		setWallpaperDisabled: Option[Boolean] = None,
	  /** Rules for determining apps' access to private keys. See ChoosePrivateKeyRule for details. This must be empty if any application has CERT_SELECTION delegation scope. */
		choosePrivateKeyRules: Option[List[Schema.ChoosePrivateKeyRule]] = None,
	  /** Configuration for an always-on VPN connection. Use with vpn_config_disabled to prevent modification of this setting. */
		alwaysOnVpnPackage: Option[Schema.AlwaysOnVpnPackage] = None,
	  /** Email addresses of device administrators for factory reset protection. When the device is factory reset, it will require one of these admins to log in with the Google account email and password to unlock the device. If no admins are specified, the device won't provide factory reset protection. */
		frpAdminEmails: Option[List[String]] = None,
	  /** The device owner information to be shown on the lock screen. */
		deviceOwnerLockScreenInfo: Option[Schema.UserFacingMessage] = None,
	  /** Whether roaming data services are disabled. */
		dataRoamingDisabled: Option[Boolean] = None,
	  /** The degree of location detection enabled. */
		locationMode: Option[Schema.Policy.LocationModeEnum] = None,
	  /** Whether the network escape hatch is enabled. If a network connection can't be made at boot time, the escape hatch prompts the user to temporarily connect to a network in order to refresh the device policy. After applying policy, the temporary network will be forgotten and the device will continue booting. This prevents being unable to connect to a network if there is no suitable network in the last policy and the device boots into an app in lock task mode, or the user is otherwise unable to reach device settings.Note: Setting wifiConfigDisabled to true will override this setting under specific circumstances. Please see wifiConfigDisabled for further details. Setting configureWifi to DISALLOW_CONFIGURING_WIFI will override this setting under specific circumstances. Please see DISALLOW_CONFIGURING_WIFI for further details. */
		networkEscapeHatchEnabled: Option[Boolean] = None,
	  /** Whether bluetooth is disabled. Prefer this setting over bluetooth_config_disabled because bluetooth_config_disabled can be bypassed by the user. */
		bluetoothDisabled: Option[Boolean] = None,
	  /** Rules declaring which mitigating actions to take when a device is not compliant with its policy. When the conditions for multiple rules are satisfied, all of the mitigating actions for the rules are taken. There is a maximum limit of 100 rules. Use policy enforcement rules instead. */
		complianceRules: Option[List[Schema.ComplianceRule]] = None,
	  /** Whether applications other than the ones configured in applications are blocked from being installed. When set, applications that were installed under a previous policy but no longer appear in the policy are automatically uninstalled. */
		blockApplicationsEnabled: Option[Boolean] = None,
	  /** This field has no effect. */
		installUnknownSourcesAllowed: Option[Boolean] = None,
	  /** Whether the user is allowed to enable debugging features. */
		debuggingFeaturesAllowed: Option[Boolean] = None,
	  /** Whether the user is allowed to have fun. Controls whether the Easter egg game in Settings is disabled. */
		funDisabled: Option[Boolean] = None,
	  /** Whether auto time is required, which prevents the user from manually setting the date and time. If autoDateAndTimeZone is set, this field is ignored. */
		autoTimeRequired: Option[Boolean] = None,
	  /** Specifies permitted accessibility services. If the field is not set, any accessibility service can be used. If the field is set, only the accessibility services in this list and the system's built-in accessibility service can be used. In particular, if the field is set to empty, only the system's built-in accessibility servicess can be used. This can be set on fully managed devices and on work profiles. When applied to a work profile, this affects both the personal profile and the work profile. */
		permittedAccessibilityServices: Option[Schema.PackageNameList] = None,
	  /** Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency.When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, this field has no effect.The app auto update policy, which controls when automatic app updates can be applied. */
		appAutoUpdatePolicy: Option[Schema.Policy.AppAutoUpdatePolicyEnum] = None,
	  /** Whether the kiosk custom launcher is enabled. This replaces the home screen with a launcher that locks down the device to the apps installed via the applications setting. Apps appear on a single page in alphabetical order. Use kioskCustomization to further configure the kiosk device behavior. */
		kioskCustomLauncherEnabled: Option[Boolean] = None,
	  /** This setting is not supported. Any value is ignored. */
		androidDevicePolicyTracks: Option[List[Schema.Policy.AndroidDevicePolicyTracksEnum]] = None,
	  /** Flag to skip hints on the first use. Enterprise admin can enable the system recommendation for apps to skip their user tutorial and other introductory hints on first start-up. */
		skipFirstUseHintsEnabled: Option[Boolean] = None,
	  /** Allows showing UI on a device for a user to choose a private key alias if there are no matching rules in ChoosePrivateKeyRules. For devices below Android P, setting this may leave enterprise keys vulnerable. This value will have no effect if any application has CERT_SELECTION delegation scope. */
		privateKeySelectionEnabled: Option[Boolean] = None,
	  /** Whether encryption is enabled */
		encryptionPolicy: Option[Schema.Policy.EncryptionPolicyEnum] = None,
	  /** Whether USB storage is enabled. Deprecated. */
		usbMassStorageEnabled: Option[Boolean] = None,
	  /** Explicit permission or group grants or denials for all apps. These values override the default_permission_policy. */
		permissionGrants: Option[List[Schema.PermissionGrant]] = None,
	  /** This mode controls which apps are available to the user in the Play Store and the behavior on the device when apps are removed from the policy. */
		playStoreMode: Option[Schema.Policy.PlayStoreModeEnum] = None,
	  /** Action to take during the setup process. At most one action may be specified. */
		setupActions: Option[List[Schema.SetupAction]] = None,
	  /** Password requirement policies. Different policies can be set for work profile or fully managed devices by setting the password_scope field in the policy. */
		passwordPolicies: Option[List[Schema.PasswordRequirements]] = None,
	  /** Rules that define the behavior when a particular policy can not be applied on device */
		policyEnforcementRules: Option[List[Schema.PolicyEnforcementRule]] = None,
	  /** Settings controlling the behavior of a device in kiosk mode. To enable kiosk mode, set kioskCustomLauncherEnabled to true or specify an app in the policy with installType KIOSK. */
		kioskCustomization: Option[Schema.KioskCustomization] = None,
	  /** Advanced security settings. In most cases, setting these is not needed. */
		advancedSecurityOverrides: Option[Schema.AdvancedSecurityOverrides] = None,
	  /** Policies managing personal usage on a company-owned device. */
		personalUsagePolicies: Option[Schema.PersonalUsagePolicies] = None,
	  /** Whether auto date, time, and time zone are enabled on a company-owned device. If this is set, then autoTimeRequired is ignored. */
		autoDateAndTimeZone: Option[Schema.Policy.AutoDateAndTimeZoneEnum] = None,
	  /** This feature is not generally available. */
		oncCertificateProviders: Option[List[Schema.OncCertificateProvider]] = None,
	  /** Cross-profile policies applied on the device. */
		crossProfilePolicies: Option[Schema.CrossProfilePolicies] = None,
	  /** Controls whether preferential network service is enabled on the work profile. For example, an organization may have an agreement with a carrier that all of the work data from its employees' devices will be sent via a network service dedicated for enterprise use. An example of a supported preferential network service is the enterprise slice on 5G networks. This has no effect on fully managed devices. */
		preferentialNetworkService: Option[Schema.Policy.PreferentialNetworkServiceEnum] = None,
	  /** Configuration of device activity logging. */
		usageLog: Option[Schema.UsageLog] = None,
	  /** Controls the use of the camera and whether the user has access to the camera access toggle. */
		cameraAccess: Option[Schema.Policy.CameraAccessEnum] = None,
	  /** Controls the use of the microphone and whether the user has access to the microphone access toggle. This applies only on fully managed devices. */
		microphoneAccess: Option[Schema.Policy.MicrophoneAccessEnum] = None,
	  /** Covers controls for device connectivity such as Wi-Fi, USB data access, keyboard/mouse connections, and more. */
		deviceConnectivityManagement: Option[Schema.DeviceConnectivityManagement] = None,
	  /** Covers controls for radio state such as Wi-Fi, bluetooth, and more. */
		deviceRadioState: Option[Schema.DeviceRadioState] = None,
	  /** Controls which apps are allowed to act as credential providers on Android 14 and above. These apps store credentials, see this (https://developer.android.com/training/sign-in/passkeys) and this (https://developer.android.com/reference/androidx/credentials/CredentialManager) for details. See also credentialProviderPolicy. */
		credentialProviderPolicyDefault: Option[Schema.Policy.CredentialProviderPolicyDefaultEnum] = None,
	  /** Optional. Controls whether printing is allowed. This is supported on devices running Android 9 and above. . */
		printingPolicy: Option[Schema.Policy.PrintingPolicyEnum] = None,
	  /** Optional. Controls for the display settings. */
		displaySettings: Option[Schema.DisplaySettings] = None,
	  /** Optional. Controls whether AssistContent (https://developer.android.com/reference/android/app/assist/AssistContent) is allowed to be sent to a privileged app such as an assistant app. AssistContent includes screenshots and information about an app, such as package name. This is supported on Android 15 and above. */
		assistContentPolicy: Option[Schema.Policy.AssistContentPolicyEnum] = None
	)
	
	object ApplicationPolicy {
		enum InstallTypeEnum extends Enum[InstallTypeEnum] { case INSTALL_TYPE_UNSPECIFIED, PREINSTALLED, FORCE_INSTALLED, BLOCKED, AVAILABLE, REQUIRED_FOR_SETUP, KIOSK }
		enum DefaultPermissionPolicyEnum extends Enum[DefaultPermissionPolicyEnum] { case PERMISSION_POLICY_UNSPECIFIED, PROMPT, GRANT, DENY }
		enum DelegatedScopesEnum extends Enum[DelegatedScopesEnum] { case DELEGATED_SCOPE_UNSPECIFIED, CERT_INSTALL, MANAGED_CONFIGURATIONS, BLOCK_UNINSTALL, PERMISSION_GRANT, PACKAGE_ACCESS, ENABLE_SYSTEM_APP, NETWORK_ACTIVITY_LOGS, SECURITY_LOGS, CERT_SELECTION }
		enum ConnectedWorkAndPersonalAppEnum extends Enum[ConnectedWorkAndPersonalAppEnum] { case CONNECTED_WORK_AND_PERSONAL_APP_UNSPECIFIED, CONNECTED_WORK_AND_PERSONAL_APP_DISALLOWED, CONNECTED_WORK_AND_PERSONAL_APP_ALLOWED }
		enum AutoUpdateModeEnum extends Enum[AutoUpdateModeEnum] { case AUTO_UPDATE_MODE_UNSPECIFIED, AUTO_UPDATE_DEFAULT, AUTO_UPDATE_POSTPONED, AUTO_UPDATE_HIGH_PRIORITY }
		enum AlwaysOnVpnLockdownExemptionEnum extends Enum[AlwaysOnVpnLockdownExemptionEnum] { case ALWAYS_ON_VPN_LOCKDOWN_EXEMPTION_UNSPECIFIED, VPN_LOCKDOWN_ENFORCED, VPN_LOCKDOWN_EXEMPTION }
		enum WorkProfileWidgetsEnum extends Enum[WorkProfileWidgetsEnum] { case WORK_PROFILE_WIDGETS_UNSPECIFIED, WORK_PROFILE_WIDGETS_ALLOWED, WORK_PROFILE_WIDGETS_DISALLOWED }
		enum CredentialProviderPolicyEnum extends Enum[CredentialProviderPolicyEnum] { case CREDENTIAL_PROVIDER_POLICY_UNSPECIFIED, CREDENTIAL_PROVIDER_ALLOWED }
		enum UserControlSettingsEnum extends Enum[UserControlSettingsEnum] { case USER_CONTROL_SETTINGS_UNSPECIFIED, USER_CONTROL_ALLOWED, USER_CONTROL_DISALLOWED }
	}
	case class ApplicationPolicy(
	  /** The package name of the app. For example, com.google.android.youtube for the YouTube app. */
		packageName: Option[String] = None,
	  /** The type of installation to perform. */
		installType: Option[Schema.ApplicationPolicy.InstallTypeEnum] = None,
	  /** Whether the app is allowed to lock itself in full-screen mode. DEPRECATED. Use InstallType KIOSK or kioskCustomLauncherEnabled to configure a dedicated device. */
		lockTaskAllowed: Option[Boolean] = None,
	  /** The default policy for all permissions requested by the app. If specified, this overrides the policy-level default_permission_policy which applies to all apps. It does not override the permission_grants which applies to all apps. */
		defaultPermissionPolicy: Option[Schema.ApplicationPolicy.DefaultPermissionPolicyEnum] = None,
	  /** Explicit permission grants or denials for the app. These values override the default_permission_policy and permission_grants which apply to all apps. */
		permissionGrants: Option[List[Schema.PermissionGrant]] = None,
	  /** Managed configuration applied to the app. The format for the configuration is dictated by the ManagedProperty values supported by the app. Each field name in the managed configuration must match the key field of the ManagedProperty. The field value must be compatible with the type of the ManagedProperty: &#42;type&#42; &#42;JSON value&#42; BOOL true or false STRING string INTEGER number CHOICE string MULTISELECT array of strings HIDDEN string BUNDLE_ARRAY array of objects  */
		managedConfiguration: Option[Map[String, JsValue]] = None,
	  /** Whether the app is disabled. When disabled, the app data is still preserved. */
		disabled: Option[Boolean] = None,
	  /** The minimum version of the app that runs on the device. If set, the device attempts to update the app to at least this version code. If the app is not up-to-date, the device will contain a NonComplianceDetail with non_compliance_reason set to APP_NOT_UPDATED. The app must already be published to Google Play with a version code greater than or equal to this value. At most 20 apps may specify a minimum version code per policy. */
		minimumVersionCode: Option[Int] = None,
	  /** The scopes delegated to the app from Android Device Policy. These provide additional privileges for the applications they are applied to. */
		delegatedScopes: Option[List[Schema.ApplicationPolicy.DelegatedScopesEnum]] = None,
	  /** The managed configurations template for the app, saved from the managed configurations iframe. This field is ignored if managed_configuration is set. */
		managedConfigurationTemplate: Option[Schema.ManagedConfigurationTemplate] = None,
	  /** List of the app’s track IDs that a device belonging to the enterprise can access. If the list contains multiple track IDs, devices receive the latest version among all accessible tracks. If the list contains no track IDs, devices only have access to the app’s production track. More details about each track are available in AppTrackInfo. */
		accessibleTrackIds: Option[List[String]] = None,
	  /** Controls whether the app can communicate with itself across a device’s work and personal profiles, subject to user consent. */
		connectedWorkAndPersonalApp: Option[Schema.ApplicationPolicy.ConnectedWorkAndPersonalAppEnum] = None,
	  /** Controls the auto-update mode for the app. */
		autoUpdateMode: Option[Schema.ApplicationPolicy.AutoUpdateModeEnum] = None,
	  /** Configuration to enable this app as an extension app, with the capability of interacting with Android Device Policy offline.This field can be set for at most one app. */
		extensionConfig: Option[Schema.ExtensionConfig] = None,
	  /** Specifies whether the app is allowed networking when the VPN is not connected and alwaysOnVpnPackage.lockdownEnabled is enabled. If set to VPN_LOCKDOWN_ENFORCED, the app is not allowed networking, and if set to VPN_LOCKDOWN_EXEMPTION, the app is allowed networking. Only supported on devices running Android 10 and above. If this is not supported by the device, the device will contain a NonComplianceDetail with non_compliance_reason set to API_LEVEL and a fieldPath. If this is not applicable to the app, the device will contain a NonComplianceDetail with non_compliance_reason set to UNSUPPORTED and a fieldPath. The fieldPath is set to applications[i].alwaysOnVpnLockdownExemption, where i is the index of the package in the applications policy. */
		alwaysOnVpnLockdownExemption: Option[Schema.ApplicationPolicy.AlwaysOnVpnLockdownExemptionEnum] = None,
	  /** Specifies whether the app installed in the work profile is allowed to add widgets to the home screen. */
		workProfileWidgets: Option[Schema.ApplicationPolicy.WorkProfileWidgetsEnum] = None,
	  /** Optional. Whether the app is allowed to act as a credential provider on Android 14 and above. */
		credentialProviderPolicy: Option[Schema.ApplicationPolicy.CredentialProviderPolicyEnum] = None,
	  /** Optional. The constraints for installing the app. You can specify a maximum of one InstallConstraint. Multiple constraints are rejected. */
		installConstraint: Option[List[Schema.InstallConstraint]] = None,
	  /** Optional. Amongst apps with installType set to: FORCE_INSTALLED PREINSTALLEDthis controls the relative priority of installation. A value of 0 (default) means this app has no priority over other apps. For values between 1 and 10,000, a lower value means a higher priority. Values outside of the range 0 to 10,000 inclusive are rejected. */
		installPriority: Option[Int] = None,
	  /** Optional. Specifies whether user control is permitted for the app. User control includes user actions like force-stopping and clearing app data. Supported on Android 11 and above. */
		userControlSettings: Option[Schema.ApplicationPolicy.UserControlSettingsEnum] = None
	)
	
	object PermissionGrant {
		enum PolicyEnum extends Enum[PolicyEnum] { case PERMISSION_POLICY_UNSPECIFIED, PROMPT, GRANT, DENY }
	}
	case class PermissionGrant(
	  /** The Android permission or group, e.g. android.permission.READ_CALENDAR or android.permission_group.CALENDAR. */
		permission: Option[String] = None,
	  /** The policy for granting the permission. */
		policy: Option[Schema.PermissionGrant.PolicyEnum] = None
	)
	
	case class ManagedConfigurationTemplate(
	  /** The ID of the managed configurations template. */
		templateId: Option[String] = None,
	  /** Optional, a map containing configuration variables defined for the configuration. */
		configurationVariables: Option[Map[String, String]] = None
	)
	
	case class ExtensionConfig(
	  /** Hex-encoded SHA-256 hash of the signing certificate of the extension app. Only hexadecimal string representations of 64 characters are valid.If not specified, the signature for the corresponding package name is obtained from the Play Store instead.If this list is empty, the signature of the extension app on the device must match the signature obtained from the Play Store for the app to be able to communicate with Android Device Policy.If this list is not empty, the signature of the extension app on the device must match one of the entries in this list for the app to be able to communicate with Android Device Policy.In production use cases, it is recommended to leave this empty. */
		signingKeyFingerprintsSha256: Option[List[String]] = None,
	  /** Fully qualified class name of the receiver service class for Android Device Policy to notify the extension app of any local command status updates. */
		notificationReceiver: Option[String] = None
	)
	
	object InstallConstraint {
		enum NetworkTypeConstraintEnum extends Enum[NetworkTypeConstraintEnum] { case NETWORK_TYPE_CONSTRAINT_UNSPECIFIED, INSTALL_ON_ANY_NETWORK, INSTALL_ONLY_ON_UNMETERED_NETWORK }
		enum ChargingConstraintEnum extends Enum[ChargingConstraintEnum] { case CHARGING_CONSTRAINT_UNSPECIFIED, CHARGING_NOT_REQUIRED, INSTALL_ONLY_WHEN_CHARGING }
		enum DeviceIdleConstraintEnum extends Enum[DeviceIdleConstraintEnum] { case DEVICE_IDLE_CONSTRAINT_UNSPECIFIED, DEVICE_IDLE_NOT_REQUIRED, INSTALL_ONLY_WHEN_DEVICE_IDLE }
	}
	case class InstallConstraint(
	  /** Optional. Network type constraint. */
		networkTypeConstraint: Option[Schema.InstallConstraint.NetworkTypeConstraintEnum] = None,
	  /** Optional. Charging constraint. */
		chargingConstraint: Option[Schema.InstallConstraint.ChargingConstraintEnum] = None,
	  /** Optional. Device idle constraint. */
		deviceIdleConstraint: Option[Schema.InstallConstraint.DeviceIdleConstraintEnum] = None
	)
	
	case class PersistentPreferredActivity(
	  /** The activity that should be the default intent handler. This should be an Android component name, e.g. com.android.enterprise.app/.MainActivity. Alternatively, the value may be the package name of an app, which causes Android Device Policy to choose an appropriate activity from the app to handle the intent. */
		receiverActivity: Option[String] = None,
	  /** The intent actions to match in the filter. If any actions are included in the filter, then an intent's action must be one of those values for it to match. If no actions are included, the intent action is ignored. */
		actions: Option[List[String]] = None,
	  /** The intent categories to match in the filter. An intent includes the categories that it requires, all of which must be included in the filter in order to match. In other words, adding a category to the filter has no impact on matching unless that category is specified in the intent. */
		categories: Option[List[String]] = None
	)
	
	object SystemUpdate {
		enum TypeEnum extends Enum[TypeEnum] { case SYSTEM_UPDATE_TYPE_UNSPECIFIED, AUTOMATIC, WINDOWED, POSTPONE }
	}
	case class SystemUpdate(
	  /** The type of system update to configure. */
		`type`: Option[Schema.SystemUpdate.TypeEnum] = None,
	  /** If the type is WINDOWED, the start of the maintenance window, measured as the number of minutes after midnight in the device's local time. This value must be between 0 and 1439, inclusive. */
		startMinutes: Option[Int] = None,
	  /** If the type is WINDOWED, the end of the maintenance window, measured as the number of minutes after midnight in device's local time. This value must be between 0 and 1439, inclusive. If this value is less than start_minutes, then the maintenance window spans midnight. If the maintenance window specified is smaller than 30 minutes, the actual window is extended to 30 minutes beyond the start time. */
		endMinutes: Option[Int] = None,
	  /** An annually repeating time period in which over-the-air (OTA) system updates are postponed to freeze the OS version running on a device. To prevent freezing the device indefinitely, each freeze period must be separated by at least 60 days. */
		freezePeriods: Option[List[Schema.FreezePeriod]] = None
	)
	
	case class FreezePeriod(
	  /** The start date (inclusive) of the freeze period. Note: year must not be set. For example, {"month": 1,"date": 30}. */
		startDate: Option[Schema.Date] = None,
	  /** The end date (inclusive) of the freeze period. Must be no later than 90 days from the start date. If the end date is earlier than the start date, the freeze period is considered wrapping year-end. Note: year must not be set. For example, {"month": 1,"date": 30}. */
		endDate: Option[Schema.Date] = None
	)
	
	case class Date(
	  /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
		year: Option[Int] = None,
	  /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
		month: Option[Int] = None,
	  /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
		day: Option[Int] = None
	)
	
	case class StatusReportingSettings(
	  /** Whether app reports are enabled. */
		applicationReportsEnabled: Option[Boolean] = None,
	  /** Whether device settings reporting is enabled. */
		deviceSettingsEnabled: Option[Boolean] = None,
	  /** Whether software info reporting is enabled. */
		softwareInfoEnabled: Option[Boolean] = None,
	  /** Whether memory event reporting is enabled. */
		memoryInfoEnabled: Option[Boolean] = None,
	  /** Whether network info reporting is enabled. */
		networkInfoEnabled: Option[Boolean] = None,
	  /** Whether displays reporting is enabled. Report data is not available for personally owned devices with work profiles. */
		displayInfoEnabled: Option[Boolean] = None,
	  /** Whether power management event reporting is enabled. Report data is not available for personally owned devices with work profiles. */
		powerManagementEventsEnabled: Option[Boolean] = None,
	  /** Whether hardware status reporting is enabled. Report data is not available for personally owned devices with work profiles. */
		hardwareStatusEnabled: Option[Boolean] = None,
	  /** Whether system properties reporting is enabled. */
		systemPropertiesEnabled: Option[Boolean] = None,
	  /** Application reporting settings. Only applicable if application_reports_enabled is true. */
		applicationReportingSettings: Option[Schema.ApplicationReportingSettings] = None,
	  /** Whether Common Criteria Mode reporting is enabled. This is supported only on company-owned devices. */
		commonCriteriaModeEnabled: Option[Boolean] = None
	)
	
	case class ApplicationReportingSettings(
	  /** Whether removed apps are included in application reports. */
		includeRemovedApps: Option[Boolean] = None
	)
	
	case class PackageNameList(
	  /** A list of package names. */
		packageNames: Option[List[String]] = None
	)
	
	case class ProxyInfo(
	  /** The host of the direct proxy. */
		host: Option[String] = None,
	  /** The port of the direct proxy. */
		port: Option[Int] = None,
	  /** For a direct proxy, the hosts for which the proxy is bypassed. The host names may contain wildcards such as &#42;.example.com. */
		excludedHosts: Option[List[String]] = None,
	  /** The URI of the PAC script used to configure the proxy. */
		pacUri: Option[String] = None
	)
	
	case class ChoosePrivateKeyRule(
	  /** The URL pattern to match against the URL of the request. If not set or empty, it matches all URLs. This uses the regular expression syntax of java.util.regex.Pattern. */
		urlPattern: Option[String] = None,
	  /** The package names to which this rule applies. The hash of the signing certificate for each app is verified against the hash provided by Play. If no package names are specified, then the alias is provided to all apps that call KeyChain.choosePrivateKeyAlias (https://developer.android.com/reference/android/security/KeyChain#choosePrivateKeyAlias%28android.app.Activity,%20android.security.KeyChainAliasCallback,%20java.lang.String[],%20java.security.Principal[],%20java.lang.String,%20int,%20java.lang.String%29) or any overloads (but not without calling KeyChain.choosePrivateKeyAlias, even on Android 11 and above). Any app with the same Android UID as a package specified here will have access when they call KeyChain.choosePrivateKeyAlias. */
		packageNames: Option[List[String]] = None,
	  /** The alias of the private key to be used. */
		privateKeyAlias: Option[String] = None
	)
	
	case class AlwaysOnVpnPackage(
	  /** The package name of the VPN app. */
		packageName: Option[String] = None,
	  /** Disallows networking when the VPN is not connected. */
		lockdownEnabled: Option[Boolean] = None
	)
	
	case class ComplianceRule(
	  /** A condition which is satisfied if there exists any matching NonComplianceDetail for the device. */
		nonComplianceDetailCondition: Option[Schema.NonComplianceDetailCondition] = None,
	  /** A condition which is satisfied if the Android Framework API level on the device doesn't meet a minimum requirement. */
		apiLevelCondition: Option[Schema.ApiLevelCondition] = None,
	  /** If set to true, the rule includes a mitigating action to disable apps so that the device is effectively disabled, but app data is preserved. If the device is running an app in locked task mode, the app will be closed and a UI showing the reason for non-compliance will be displayed. */
		disableApps: Option[Boolean] = None,
	  /** If set, the rule includes a mitigating action to disable apps specified in the list, but app data is preserved. */
		packageNamesToDisable: Option[List[String]] = None
	)
	
	object NonComplianceDetailCondition {
		enum NonComplianceReasonEnum extends Enum[NonComplianceReasonEnum] { case NON_COMPLIANCE_REASON_UNSPECIFIED, API_LEVEL, MANAGEMENT_MODE, USER_ACTION, INVALID_VALUE, APP_NOT_INSTALLED, UNSUPPORTED, APP_INSTALLED, PENDING, APP_INCOMPATIBLE, APP_NOT_UPDATED, DEVICE_INCOMPATIBLE }
	}
	case class NonComplianceDetailCondition(
	  /** The name of the policy setting. This is the JSON field name of a top-level Policy field. If not set, then this condition matches any setting name. */
		settingName: Option[String] = None,
	  /** The reason the device is not in compliance with the setting. If not set, then this condition matches any reason. */
		nonComplianceReason: Option[Schema.NonComplianceDetailCondition.NonComplianceReasonEnum] = None,
	  /** The package name of the app that's out of compliance. If not set, then this condition matches any package name. */
		packageName: Option[String] = None
	)
	
	case class ApiLevelCondition(
	  /** The minimum desired Android Framework API level. If the device doesn't meet the minimum requirement, this condition is satisfied. Must be greater than zero. */
		minApiLevel: Option[Int] = None
	)
	
	case class SetupAction(
	  /** An action to launch an app. The app will be launched with an intent containing an extra with key com.google.android.apps.work.clouddpc.EXTRA_LAUNCHED_AS_SETUP_ACTION set to the boolean value true to indicate that this is a setup action flow. If SetupAction references an app, the corresponding installType in the application policy must be set as REQUIRED_FOR_SETUP or said setup will fail. */
		launchApp: Option[Schema.LaunchAppAction] = None,
	  /** Title of this action. */
		title: Option[Schema.UserFacingMessage] = None,
	  /** Description of this action. */
		description: Option[Schema.UserFacingMessage] = None
	)
	
	case class LaunchAppAction(
	  /** Package name of app to be launched */
		packageName: Option[String] = None
	)
	
	case class PolicyEnforcementRule(
	  /** The top-level policy to enforce. For example, applications or passwordPolicies. */
		settingName: Option[String] = None,
	  /** An action to block access to apps and data on a company owned device or in a work profile. This action also triggers a user-facing notification with information (where possible) on how to correct the compliance issue. Note: wipeAction must also be specified. */
		blockAction: Option[Schema.BlockAction] = None,
	  /** An action to reset a company owned device or delete a work profile. Note: blockAction must also be specified. */
		wipeAction: Option[Schema.WipeAction] = None
	)
	
	object BlockAction {
		enum BlockScopeEnum extends Enum[BlockScopeEnum] { case BLOCK_SCOPE_UNSPECIFIED, BLOCK_SCOPE_WORK_PROFILE, BLOCK_SCOPE_DEVICE }
	}
	case class BlockAction(
	  /** Number of days the policy is non-compliant before the device or work profile is blocked. To block access immediately, set to 0. blockAfterDays must be less than wipeAfterDays. */
		blockAfterDays: Option[Int] = None,
	  /** Specifies the scope of this BlockAction. Only applicable to devices that are company-owned. */
		blockScope: Option[Schema.BlockAction.BlockScopeEnum] = None
	)
	
	case class WipeAction(
	  /** Number of days the policy is non-compliant before the device or work profile is wiped. wipeAfterDays must be greater than blockAfterDays. */
		wipeAfterDays: Option[Int] = None,
	  /** Whether the factory-reset protection data is preserved on the device. This setting doesn’t apply to work profiles. */
		preserveFrp: Option[Boolean] = None
	)
	
	object KioskCustomization {
		enum PowerButtonActionsEnum extends Enum[PowerButtonActionsEnum] { case POWER_BUTTON_ACTIONS_UNSPECIFIED, POWER_BUTTON_AVAILABLE, POWER_BUTTON_BLOCKED }
		enum SystemErrorWarningsEnum extends Enum[SystemErrorWarningsEnum] { case SYSTEM_ERROR_WARNINGS_UNSPECIFIED, ERROR_AND_WARNINGS_ENABLED, ERROR_AND_WARNINGS_MUTED }
		enum SystemNavigationEnum extends Enum[SystemNavigationEnum] { case SYSTEM_NAVIGATION_UNSPECIFIED, NAVIGATION_ENABLED, NAVIGATION_DISABLED, HOME_BUTTON_ONLY }
		enum StatusBarEnum extends Enum[StatusBarEnum] { case STATUS_BAR_UNSPECIFIED, NOTIFICATIONS_AND_SYSTEM_INFO_ENABLED, NOTIFICATIONS_AND_SYSTEM_INFO_DISABLED, SYSTEM_INFO_ONLY }
		enum DeviceSettingsEnum extends Enum[DeviceSettingsEnum] { case DEVICE_SETTINGS_UNSPECIFIED, SETTINGS_ACCESS_ALLOWED, SETTINGS_ACCESS_BLOCKED }
	}
	case class KioskCustomization(
	  /** Sets the behavior of a device in kiosk mode when a user presses and holds (long-presses) the Power button. */
		powerButtonActions: Option[Schema.KioskCustomization.PowerButtonActionsEnum] = None,
	  /** Specifies whether system error dialogs for crashed or unresponsive apps are blocked in kiosk mode. When blocked, the system will force-stop the app as if the user chooses the "close app" option on the UI. */
		systemErrorWarnings: Option[Schema.KioskCustomization.SystemErrorWarningsEnum] = None,
	  /** Specifies which navigation features are enabled (e.g. Home, Overview buttons) in kiosk mode. */
		systemNavigation: Option[Schema.KioskCustomization.SystemNavigationEnum] = None,
	  /** Specifies whether system info and notifications are disabled in kiosk mode. */
		statusBar: Option[Schema.KioskCustomization.StatusBarEnum] = None,
	  /** Specifies whether the Settings app is allowed in kiosk mode. */
		deviceSettings: Option[Schema.KioskCustomization.DeviceSettingsEnum] = None
	)
	
	object AdvancedSecurityOverrides {
		enum UntrustedAppsPolicyEnum extends Enum[UntrustedAppsPolicyEnum] { case UNTRUSTED_APPS_POLICY_UNSPECIFIED, DISALLOW_INSTALL, ALLOW_INSTALL_IN_PERSONAL_PROFILE_ONLY, ALLOW_INSTALL_DEVICE_WIDE }
		enum GooglePlayProtectVerifyAppsEnum extends Enum[GooglePlayProtectVerifyAppsEnum] { case GOOGLE_PLAY_PROTECT_VERIFY_APPS_UNSPECIFIED, VERIFY_APPS_ENFORCED, VERIFY_APPS_USER_CHOICE }
		enum DeveloperSettingsEnum extends Enum[DeveloperSettingsEnum] { case DEVELOPER_SETTINGS_UNSPECIFIED, DEVELOPER_SETTINGS_DISABLED, DEVELOPER_SETTINGS_ALLOWED }
		enum CommonCriteriaModeEnum extends Enum[CommonCriteriaModeEnum] { case COMMON_CRITERIA_MODE_UNSPECIFIED, COMMON_CRITERIA_MODE_DISABLED, COMMON_CRITERIA_MODE_ENABLED }
		enum MtePolicyEnum extends Enum[MtePolicyEnum] { case MTE_POLICY_UNSPECIFIED, MTE_USER_CHOICE, MTE_ENFORCED, MTE_DISABLED }
		enum ContentProtectionPolicyEnum extends Enum[ContentProtectionPolicyEnum] { case CONTENT_PROTECTION_POLICY_UNSPECIFIED, CONTENT_PROTECTION_DISABLED, CONTENT_PROTECTION_ENFORCED, CONTENT_PROTECTION_USER_CHOICE }
	}
	case class AdvancedSecurityOverrides(
	  /** The policy for untrusted apps (apps from unknown sources) enforced on the device. Replaces install_unknown_sources_allowed (deprecated). */
		untrustedAppsPolicy: Option[Schema.AdvancedSecurityOverrides.UntrustedAppsPolicyEnum] = None,
	  /** Whether Google Play Protect verification (https://support.google.com/accounts/answer/2812853) is enforced. Replaces ensureVerifyAppsEnabled (deprecated). */
		googlePlayProtectVerifyApps: Option[Schema.AdvancedSecurityOverrides.GooglePlayProtectVerifyAppsEnum] = None,
	  /** Controls access to developer settings: developer options and safe boot. Replaces safeBootDisabled (deprecated) and debuggingFeaturesAllowed (deprecated). */
		developerSettings: Option[Schema.AdvancedSecurityOverrides.DeveloperSettingsEnum] = None,
	  /** Controls Common Criteria Mode—security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/) (CC). Enabling Common Criteria Mode increases certain security components on a device, see CommonCriteriaMode for details.Warning: Common Criteria Mode enforces a strict security model typically only required for IT products used in national security systems and other highly sensitive organizations. Standard device use may be affected. Only enabled if required. If Common Criteria Mode is turned off after being enabled previously, all user-configured Wi-Fi networks may be lost and any enterprise-configured Wi-Fi networks that require user input may need to be reconfigured. */
		commonCriteriaMode: Option[Schema.AdvancedSecurityOverrides.CommonCriteriaModeEnum] = None,
	  /** Personal apps that can read work profile notifications using a NotificationListenerService (https://developer.android.com/reference/android/service/notification/NotificationListenerService). By default, no personal apps (aside from system apps) can read work notifications. Each value in the list must be a package name. */
		personalAppsThatCanReadWorkNotifications: Option[List[String]] = None,
	  /** Optional. Controls Memory Tagging Extension (MTE) (https://source.android.com/docs/security/test/memory-safety/arm-mte) on the device. The device needs to be rebooted to apply changes to the MTE policy. */
		mtePolicy: Option[Schema.AdvancedSecurityOverrides.MtePolicyEnum] = None,
	  /** Optional. Controls whether content protection, which scans for deceptive apps, is enabled. This is supported on Android 15 and above. */
		contentProtectionPolicy: Option[Schema.AdvancedSecurityOverrides.ContentProtectionPolicyEnum] = None
	)
	
	object PersonalUsagePolicies {
		enum PersonalPlayStoreModeEnum extends Enum[PersonalPlayStoreModeEnum] { case PLAY_STORE_MODE_UNSPECIFIED, BLACKLIST, BLOCKLIST, ALLOWLIST }
	}
	case class PersonalUsagePolicies(
	  /** If true, the camera is disabled on the personal profile. */
		cameraDisabled: Option[Boolean] = None,
	  /** If true, screen capture is disabled for all users. */
		screenCaptureDisabled: Option[Boolean] = None,
	  /** Account types that can't be managed by the user. */
		accountTypesWithManagementDisabled: Option[List[String]] = None,
	  /** Controls how long the work profile can stay off. The minimum duration must be at least 3 days. Other details are as follows: - If the duration is set to 0, the feature is turned off. - If the duration is set to a value smaller than the minimum duration, the feature returns an error. &#42;Note:&#42; If you want to avoid personal profiles being suspended during long periods of off-time, you can temporarily set a large value for this parameter. */
		maxDaysWithWorkOff: Option[Int] = None,
	  /** Used together with personalApplications to control how apps in the personal profile are allowed or blocked. */
		personalPlayStoreMode: Option[Schema.PersonalUsagePolicies.PersonalPlayStoreModeEnum] = None,
	  /** Policy applied to applications in the personal profile. */
		personalApplications: Option[List[Schema.PersonalApplicationPolicy]] = None
	)
	
	object PersonalApplicationPolicy {
		enum InstallTypeEnum extends Enum[InstallTypeEnum] { case INSTALL_TYPE_UNSPECIFIED, BLOCKED, AVAILABLE }
	}
	case class PersonalApplicationPolicy(
	  /** The package name of the application. */
		packageName: Option[String] = None,
	  /** The type of installation to perform. */
		installType: Option[Schema.PersonalApplicationPolicy.InstallTypeEnum] = None
	)
	
	case class OncCertificateProvider(
	  /** This feature is not generally available. */
		contentProviderEndpoint: Option[Schema.ContentProviderEndpoint] = None,
	  /** This feature is not generally available. */
		certificateReferences: Option[List[String]] = None
	)
	
	case class ContentProviderEndpoint(
	  /** This feature is not generally available. */
		uri: Option[String] = None,
	  /** This feature is not generally available. */
		packageName: Option[String] = None,
	  /** Required. This feature is not generally available. */
		signingCertsSha256: Option[List[String]] = None
	)
	
	object CrossProfilePolicies {
		enum ShowWorkContactsInPersonalProfileEnum extends Enum[ShowWorkContactsInPersonalProfileEnum] { case SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_UNSPECIFIED, SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED, SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED, SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED_EXCEPT_SYSTEM }
		enum CrossProfileCopyPasteEnum extends Enum[CrossProfileCopyPasteEnum] { case CROSS_PROFILE_COPY_PASTE_UNSPECIFIED, COPY_FROM_WORK_TO_PERSONAL_DISALLOWED, CROSS_PROFILE_COPY_PASTE_ALLOWED }
		enum CrossProfileDataSharingEnum extends Enum[CrossProfileDataSharingEnum] { case CROSS_PROFILE_DATA_SHARING_UNSPECIFIED, CROSS_PROFILE_DATA_SHARING_DISALLOWED, DATA_SHARING_FROM_WORK_TO_PERSONAL_DISALLOWED, CROSS_PROFILE_DATA_SHARING_ALLOWED }
		enum WorkProfileWidgetsDefaultEnum extends Enum[WorkProfileWidgetsDefaultEnum] { case WORK_PROFILE_WIDGETS_DEFAULT_UNSPECIFIED, WORK_PROFILE_WIDGETS_DEFAULT_ALLOWED, WORK_PROFILE_WIDGETS_DEFAULT_DISALLOWED }
	}
	case class CrossProfilePolicies(
	  /** Whether personal apps can access contacts stored in the work profile.See also exemptions_to_show_work_contacts_in_personal_profile. */
		showWorkContactsInPersonalProfile: Option[Schema.CrossProfilePolicies.ShowWorkContactsInPersonalProfileEnum] = None,
	  /** Whether text copied from one profile (personal or work) can be pasted in the other profile. */
		crossProfileCopyPaste: Option[Schema.CrossProfilePolicies.CrossProfileCopyPasteEnum] = None,
	  /** Whether data from one profile (personal or work) can be shared with apps in the other profile. Specifically controls simple data sharing via intents. Management of other cross-profile communication channels, such as contact search, copy/paste, or connected work & personal apps, are configured separately. */
		crossProfileDataSharing: Option[Schema.CrossProfilePolicies.CrossProfileDataSharingEnum] = None,
	  /** Specifies the default behaviour for work profile widgets. If the policy does not specify work_profile_widgets for a specific application, it will behave according to the value specified here. */
		workProfileWidgetsDefault: Option[Schema.CrossProfilePolicies.WorkProfileWidgetsDefaultEnum] = None,
	  /** List of apps which are excluded from the ShowWorkContactsInPersonalProfile setting. For this to be set, ShowWorkContactsInPersonalProfile must be set to one of the following values: SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED. In this case, these exemptions act as a blocklist. SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED. In this case, these exemptions act as an allowlist. SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED_EXCEPT_SYSTEM. In this case, these exemptions act as an allowlist, in addition to the already allowlisted system apps.Supported on Android 14 and above. A nonComplianceDetail with API_LEVEL is reported if the Android version is less than 14. */
		exemptionsToShowWorkContactsInPersonalProfile: Option[Schema.PackageNameList] = None
	)
	
	object UsageLog {
		enum EnabledLogTypesEnum extends Enum[EnabledLogTypesEnum] { case LOG_TYPE_UNSPECIFIED, SECURITY_LOGS, NETWORK_ACTIVITY_LOGS }
		enum UploadOnCellularAllowedEnum extends Enum[UploadOnCellularAllowedEnum] { case LOG_TYPE_UNSPECIFIED, SECURITY_LOGS, NETWORK_ACTIVITY_LOGS }
	}
	case class UsageLog(
	  /** Specifies which log types are enabled. Note that users will receive on-device messaging when usage logging is enabled. */
		enabledLogTypes: Option[List[Schema.UsageLog.EnabledLogTypesEnum]] = None,
	  /** Specifies which of the enabled log types can be uploaded over mobile data. By default logs are queued for upload when the device connects to WiFi. */
		uploadOnCellularAllowed: Option[List[Schema.UsageLog.UploadOnCellularAllowedEnum]] = None
	)
	
	object DeviceConnectivityManagement {
		enum UsbDataAccessEnum extends Enum[UsbDataAccessEnum] { case USB_DATA_ACCESS_UNSPECIFIED, ALLOW_USB_DATA_TRANSFER, DISALLOW_USB_FILE_TRANSFER, DISALLOW_USB_DATA_TRANSFER }
		enum ConfigureWifiEnum extends Enum[ConfigureWifiEnum] { case CONFIGURE_WIFI_UNSPECIFIED, ALLOW_CONFIGURING_WIFI, DISALLOW_ADD_WIFI_CONFIG, DISALLOW_CONFIGURING_WIFI }
		enum WifiDirectSettingsEnum extends Enum[WifiDirectSettingsEnum] { case WIFI_DIRECT_SETTINGS_UNSPECIFIED, ALLOW_WIFI_DIRECT, DISALLOW_WIFI_DIRECT }
		enum TetheringSettingsEnum extends Enum[TetheringSettingsEnum] { case TETHERING_SETTINGS_UNSPECIFIED, ALLOW_ALL_TETHERING, DISALLOW_WIFI_TETHERING, DISALLOW_ALL_TETHERING }
	}
	case class DeviceConnectivityManagement(
	  /** Controls what files and/or data can be transferred via USB. Supported only on company-owned devices. */
		usbDataAccess: Option[Schema.DeviceConnectivityManagement.UsbDataAccessEnum] = None,
	  /** Controls Wi-Fi configuring privileges. Based on the option set, user will have either full or limited or no control in configuring Wi-Fi networks. */
		configureWifi: Option[Schema.DeviceConnectivityManagement.ConfigureWifiEnum] = None,
	  /** Controls configuring and using Wi-Fi direct settings. Supported on company-owned devices running Android 13 and above. */
		wifiDirectSettings: Option[Schema.DeviceConnectivityManagement.WifiDirectSettingsEnum] = None,
	  /** Controls tethering settings. Based on the value set, the user is partially or fully disallowed from using different forms of tethering. */
		tetheringSettings: Option[Schema.DeviceConnectivityManagement.TetheringSettingsEnum] = None,
	  /** Restrictions on which Wi-Fi SSIDs the device can connect to. Note that this does not affect which networks can be configured on the device. Supported on company-owned devices running Android 13 and above. */
		wifiSsidPolicy: Option[Schema.WifiSsidPolicy] = None,
	  /** Optional. Wi-Fi roaming policy. */
		wifiRoamingPolicy: Option[Schema.WifiRoamingPolicy] = None
	)
	
	object WifiSsidPolicy {
		enum WifiSsidPolicyTypeEnum extends Enum[WifiSsidPolicyTypeEnum] { case WIFI_SSID_POLICY_TYPE_UNSPECIFIED, WIFI_SSID_DENYLIST, WIFI_SSID_ALLOWLIST }
	}
	case class WifiSsidPolicy(
	  /** Type of the Wi-Fi SSID policy to be applied. */
		wifiSsidPolicyType: Option[Schema.WifiSsidPolicy.WifiSsidPolicyTypeEnum] = None,
	  /** Optional. List of Wi-Fi SSIDs that should be applied in the policy. This field must be non-empty when WifiSsidPolicyType is set to WIFI_SSID_ALLOWLIST. If this is set to a non-empty list, then a nonComplianceDetail detail with API_LEVEL is reported if the Android version is less than 13 and a nonComplianceDetail with MANAGEMENT_MODE is reported for non-company-owned devices. */
		wifiSsids: Option[List[Schema.WifiSsid]] = None
	)
	
	case class WifiSsid(
	  /** Required. Wi-Fi SSID represented as a string. */
		wifiSsid: Option[String] = None
	)
	
	case class WifiRoamingPolicy(
	  /** Optional. Wi-Fi roaming settings. SSIDs provided in this list must be unique, the policy will be rejected otherwise. */
		wifiRoamingSettings: Option[List[Schema.WifiRoamingSetting]] = None
	)
	
	object WifiRoamingSetting {
		enum WifiRoamingModeEnum extends Enum[WifiRoamingModeEnum] { case WIFI_ROAMING_MODE_UNSPECIFIED, WIFI_ROAMING_DEFAULT, WIFI_ROAMING_AGGRESSIVE }
	}
	case class WifiRoamingSetting(
	  /** Required. SSID of the Wi-Fi network. */
		wifiSsid: Option[String] = None,
	  /** Required. Wi-Fi roaming mode for the specified SSID. */
		wifiRoamingMode: Option[Schema.WifiRoamingSetting.WifiRoamingModeEnum] = None
	)
	
	object DeviceRadioState {
		enum WifiStateEnum extends Enum[WifiStateEnum] { case WIFI_STATE_UNSPECIFIED, WIFI_STATE_USER_CHOICE, WIFI_ENABLED, WIFI_DISABLED }
		enum AirplaneModeStateEnum extends Enum[AirplaneModeStateEnum] { case AIRPLANE_MODE_STATE_UNSPECIFIED, AIRPLANE_MODE_USER_CHOICE, AIRPLANE_MODE_DISABLED }
		enum UltraWidebandStateEnum extends Enum[UltraWidebandStateEnum] { case ULTRA_WIDEBAND_STATE_UNSPECIFIED, ULTRA_WIDEBAND_USER_CHOICE, ULTRA_WIDEBAND_DISABLED }
		enum CellularTwoGStateEnum extends Enum[CellularTwoGStateEnum] { case CELLULAR_TWO_G_STATE_UNSPECIFIED, CELLULAR_TWO_G_USER_CHOICE, CELLULAR_TWO_G_DISABLED }
		enum MinimumWifiSecurityLevelEnum extends Enum[MinimumWifiSecurityLevelEnum] { case MINIMUM_WIFI_SECURITY_LEVEL_UNSPECIFIED, OPEN_NETWORK_SECURITY, PERSONAL_NETWORK_SECURITY, ENTERPRISE_NETWORK_SECURITY, ENTERPRISE_BIT192_NETWORK_SECURITY }
	}
	case class DeviceRadioState(
	  /** Controls current state of Wi-Fi and if user can change its state. */
		wifiState: Option[Schema.DeviceRadioState.WifiStateEnum] = None,
	  /** Controls whether airplane mode can be toggled by the user or not. */
		airplaneModeState: Option[Schema.DeviceRadioState.AirplaneModeStateEnum] = None,
	  /** Controls the state of the ultra wideband setting and whether the user can toggle it on or off. */
		ultraWidebandState: Option[Schema.DeviceRadioState.UltraWidebandStateEnum] = None,
	  /** Controls whether cellular 2G setting can be toggled by the user or not. */
		cellularTwoGState: Option[Schema.DeviceRadioState.CellularTwoGStateEnum] = None,
	  /** The minimum required security level of Wi-Fi networks that the device can connect to. */
		minimumWifiSecurityLevel: Option[Schema.DeviceRadioState.MinimumWifiSecurityLevelEnum] = None
	)
	
	case class DisplaySettings(
	  /** Optional. Controls the screen brightness settings. */
		screenBrightnessSettings: Option[Schema.ScreenBrightnessSettings] = None,
	  /** Optional. Controls the screen timeout settings. */
		screenTimeoutSettings: Option[Schema.ScreenTimeoutSettings] = None
	)
	
	object ScreenBrightnessSettings {
		enum ScreenBrightnessModeEnum extends Enum[ScreenBrightnessModeEnum] { case SCREEN_BRIGHTNESS_MODE_UNSPECIFIED, BRIGHTNESS_USER_CHOICE, BRIGHTNESS_AUTOMATIC, BRIGHTNESS_FIXED }
	}
	case class ScreenBrightnessSettings(
	  /** Optional. Controls the screen brightness mode. */
		screenBrightnessMode: Option[Schema.ScreenBrightnessSettings.ScreenBrightnessModeEnum] = None,
	  /** Optional. The screen brightness between 1 and 255 where 1 is the lowest and 255 is the highest brightness. A value of 0 (default) means no screen brightness set. Any other value is rejected. screenBrightnessMode must be either BRIGHTNESS_AUTOMATIC or BRIGHTNESS_FIXED to set this. Supported on Android 9 and above on fully managed devices. A NonComplianceDetail with API_LEVEL is reported if the Android version is less than 9. Supported on work profiles on company-owned devices on Android 15 and above. */
		screenBrightness: Option[Int] = None
	)
	
	object ScreenTimeoutSettings {
		enum ScreenTimeoutModeEnum extends Enum[ScreenTimeoutModeEnum] { case SCREEN_TIMEOUT_MODE_UNSPECIFIED, SCREEN_TIMEOUT_USER_CHOICE, SCREEN_TIMEOUT_ENFORCED }
	}
	case class ScreenTimeoutSettings(
	  /** Optional. Controls whether the user is allowed to configure the screen timeout. */
		screenTimeoutMode: Option[Schema.ScreenTimeoutSettings.ScreenTimeoutModeEnum] = None,
	  /** Optional. Controls the screen timeout duration. The screen timeout duration must be greater than 0, otherwise it is rejected. Additionally, it should not be greater than maximumTimeToLock, otherwise the screen timeout is set to maximumTimeToLock and a NonComplianceDetail with INVALID_VALUE reason and SCREEN_TIMEOUT_GREATER_THAN_MAXIMUM_TIME_TO_LOCK specific reason is reported. If the screen timeout is less than a certain lower bound, it is set to the lower bound. The lower bound may vary across devices. If this is set, screenTimeoutMode must be SCREEN_TIMEOUT_ENFORCED. Supported on Android 9 and above on fully managed devices. A NonComplianceDetail with API_LEVEL is reported if the Android version is less than 9. Supported on work profiles on company-owned devices on Android 15 and above. */
		screenTimeout: Option[String] = None
	)
	
	case class ListPoliciesResponse(
	  /** The list of policies. */
		policies: Option[List[Schema.Policy]] = None,
	  /** If there are more results, a token to retrieve next page of results. */
		nextPageToken: Option[String] = None
	)
	
	object Command {
		enum TypeEnum extends Enum[TypeEnum] { case COMMAND_TYPE_UNSPECIFIED, LOCK, RESET_PASSWORD, REBOOT, RELINQUISH_OWNERSHIP, CLEAR_APP_DATA, START_LOST_MODE, STOP_LOST_MODE }
		enum ErrorCodeEnum extends Enum[ErrorCodeEnum] { case COMMAND_ERROR_CODE_UNSPECIFIED, UNKNOWN, API_LEVEL, MANAGEMENT_MODE, INVALID_VALUE, UNSUPPORTED }
		enum ResetPasswordFlagsEnum extends Enum[ResetPasswordFlagsEnum] { case RESET_PASSWORD_FLAG_UNSPECIFIED, REQUIRE_ENTRY, DO_NOT_ASK_CREDENTIALS_ON_BOOT, LOCK_NOW }
	}
	case class Command(
	  /** The type of the command. */
		`type`: Option[Schema.Command.TypeEnum] = None,
	  /** The timestamp at which the command was created. The timestamp is automatically generated by the server. */
		createTime: Option[String] = None,
	  /** The duration for which the command is valid. The command will expire if not executed by the device during this time. The default duration if unspecified is ten minutes. There is no maximum duration. */
		duration: Option[String] = None,
	  /** The resource name of the user that owns the device in the form enterprises/{enterpriseId}/users/{userId}. This is automatically generated by the server based on the device the command is sent to. */
		userName: Option[String] = None,
	  /** If the command failed, an error code explaining the failure. This is not set when the command is cancelled by the caller. */
		errorCode: Option[Schema.Command.ErrorCodeEnum] = None,
	  /** For commands of type RESET_PASSWORD, optionally specifies the new password. Note: The new password must be at least 6 characters long if it is numeric in case of Android 14 devices. Else the command will fail with INVALID_VALUE. */
		newPassword: Option[String] = None,
	  /** For commands of type RESET_PASSWORD, optionally specifies flags. */
		resetPasswordFlags: Option[List[Schema.Command.ResetPasswordFlagsEnum]] = None,
	  /** Parameters for the CLEAR_APP_DATA command to clear the data of specified apps from the device. See ClearAppsDataParams. If this is set, then it is suggested that type should not be set. In this case, the server automatically sets it to CLEAR_APP_DATA. It is also acceptable to explicitly set type to CLEAR_APP_DATA. */
		clearAppsDataParams: Option[Schema.ClearAppsDataParams] = None,
	  /** Parameters for the START_LOST_MODE command to put the device into lost mode. See StartLostModeParams. If this is set, then it is suggested that type should not be set. In this case, the server automatically sets it to START_LOST_MODE. It is also acceptable to explicitly set type to START_LOST_MODE. */
		startLostModeParams: Option[Schema.StartLostModeParams] = None,
	  /** Parameters for the STOP_LOST_MODE command to take the device out of lost mode. See StopLostModeParams. If this is set, then it is suggested that type should not be set. In this case, the server automatically sets it to STOP_LOST_MODE. It is also acceptable to explicitly set type to STOP_LOST_MODE. */
		stopLostModeParams: Option[Schema.StopLostModeParams] = None,
	  /** Output only. Status of the CLEAR_APP_DATA command to clear the data of specified apps from the device. See ClearAppsDataStatus. */
		clearAppsDataStatus: Option[Schema.ClearAppsDataStatus] = None,
	  /** Output only. Status of the START_LOST_MODE command to put the device into lost mode. See StartLostModeStatus. */
		startLostModeStatus: Option[Schema.StartLostModeStatus] = None,
	  /** Output only. Status of the STOP_LOST_MODE command to take the device out of lost mode. See StopLostModeStatus. */
		stopLostModeStatus: Option[Schema.StopLostModeStatus] = None
	)
	
	case class ClearAppsDataParams(
	  /** The package names of the apps whose data will be cleared when the command is executed. */
		packageNames: Option[List[String]] = None
	)
	
	case class StartLostModeParams(
	  /** The message displayed to the user when the device is in lost mode. */
		lostMessage: Option[Schema.UserFacingMessage] = None,
	  /** The phone number that will be called when the device is in lost mode and the call owner button is tapped. */
		lostPhoneNumber: Option[Schema.UserFacingMessage] = None,
	  /** The email address displayed to the user when the device is in lost mode. */
		lostEmailAddress: Option[String] = None,
	  /** The street address displayed to the user when the device is in lost mode. */
		lostStreetAddress: Option[Schema.UserFacingMessage] = None,
	  /** The organization name displayed to the user when the device is in lost mode. */
		lostOrganization: Option[Schema.UserFacingMessage] = None
	)
	
	case class StopLostModeParams(
	
	)
	
	case class ClearAppsDataStatus(
	  /** The per-app results, a mapping from package names to the respective clearing result. */
		results: Option[Map[String, Schema.PerAppResult]] = None
	)
	
	object PerAppResult {
		enum ClearingResultEnum extends Enum[ClearingResultEnum] { case CLEARING_RESULT_UNSPECIFIED, SUCCESS, APP_NOT_FOUND, APP_PROTECTED, API_LEVEL }
	}
	case class PerAppResult(
	  /** The result of an attempt to clear the data of a single app. */
		clearingResult: Option[Schema.PerAppResult.ClearingResultEnum] = None
	)
	
	object StartLostModeStatus {
		enum StatusEnum extends Enum[StatusEnum] { case STATUS_UNSPECIFIED, SUCCESS, RESET_PASSWORD_RECENTLY, USER_EXIT_LOST_MODE_RECENTLY, ALREADY_IN_LOST_MODE }
	}
	case class StartLostModeStatus(
	  /** The status. See StartLostModeStatus. */
		status: Option[Schema.StartLostModeStatus.StatusEnum] = None
	)
	
	object StopLostModeStatus {
		enum StatusEnum extends Enum[StatusEnum] { case STATUS_UNSPECIFIED, SUCCESS, NOT_IN_LOST_MODE }
	}
	case class StopLostModeStatus(
	  /** The status. See StopLostModeStatus. */
		status: Option[Schema.StopLostModeStatus.StatusEnum] = None
	)
	
	object Application {
		enum DistributionChannelEnum extends Enum[DistributionChannelEnum] { case DISTRIBUTION_CHANNEL_UNSPECIFIED, PUBLIC_GOOGLE_HOSTED, PRIVATE_GOOGLE_HOSTED, PRIVATE_SELF_HOSTED }
		enum AppPricingEnum extends Enum[AppPricingEnum] { case APP_PRICING_UNSPECIFIED, FREE, FREE_WITH_IN_APP_PURCHASE, PAID }
		enum ContentRatingEnum extends Enum[ContentRatingEnum] { case CONTENT_RATING_UNSPECIFIED, THREE_YEARS, SEVEN_YEARS, TWELVE_YEARS, SIXTEEN_YEARS, EIGHTEEN_YEARS }
		enum FeaturesEnum extends Enum[FeaturesEnum] { case APP_FEATURE_UNSPECIFIED, VPN_APP }
	}
	case class Application(
	  /** The name of the app in the form enterprises/{enterprise}/applications/{package_name}. */
		name: Option[String] = None,
	  /** The title of the app. Localized. */
		title: Option[String] = None,
	  /** The permissions required by the app. */
		permissions: Option[List[Schema.ApplicationPermission]] = None,
	  /** The set of managed properties available to be pre-configured for the app. */
		managedProperties: Option[List[Schema.ManagedProperty]] = None,
	  /** A link to an image that can be used as an icon for the app. This image is suitable for use up to a pixel size of 512 x 512. */
		iconUrl: Option[String] = None,
	  /** A link to a smaller image that can be used as an icon for the app. This image is suitable for use up to a pixel size of 128 x 128. */
		smallIconUrl: Option[String] = None,
	  /** Application tracks visible to the enterprise. */
		appTracks: Option[List[Schema.AppTrackInfo]] = None,
	  /** The name of the author of the apps (for example, the app developer). */
		author: Option[String] = None,
	  /** A link to the (consumer) Google Play details page for the app. */
		playStoreUrl: Option[String] = None,
	  /** How and to whom the package is made available. */
		distributionChannel: Option[Schema.Application.DistributionChannelEnum] = None,
	  /** Whether this app is free, free with in-app purchases, or paid. If the pricing is unspecified, this means the app is not generally available anymore (even though it might still be available to people who own it). */
		appPricing: Option[Schema.Application.AppPricingEnum] = None,
	  /** The localized promotional description, if available. */
		description: Option[String] = None,
	  /** A list of screenshot links representing the app. */
		screenshotUrls: Option[List[String]] = None,
	  /** The app category (e.g. RACING, SOCIAL, etc.) */
		category: Option[String] = None,
	  /** A localised description of the recent changes made to the app. */
		recentChanges: Option[String] = None,
	  /** The minimum Android SDK necessary to run the app. */
		minAndroidSdkVersion: Option[Int] = None,
	  /** The content rating for this app. */
		contentRating: Option[Schema.Application.ContentRatingEnum] = None,
	  /** Output only. The approximate time (within 7 days) the app was last published. */
		updateTime: Option[String] = None,
	  /** The countries which this app is available in as per ISO 3166-1 alpha-2. */
		availableCountries: Option[List[String]] = None,
	  /** Noteworthy features (if any) of this app. */
		features: Option[List[Schema.Application.FeaturesEnum]] = None,
	  /** Versions currently available for this app. */
		appVersions: Option[List[Schema.AppVersion]] = None,
	  /** Full app description, if available. */
		fullDescription: Option[String] = None
	)
	
	case class ApplicationPermission(
	  /** An opaque string uniquely identifying the permission. Not localized. */
		permissionId: Option[String] = None,
	  /** The name of the permission. Localized. */
		name: Option[String] = None,
	  /** A longer description of the permission, providing more detail on what it affects. Localized. */
		description: Option[String] = None
	)
	
	object ManagedProperty {
		enum TypeEnum extends Enum[TypeEnum] { case MANAGED_PROPERTY_TYPE_UNSPECIFIED, BOOL, STRING, INTEGER, CHOICE, MULTISELECT, HIDDEN, BUNDLE, BUNDLE_ARRAY }
	}
	case class ManagedProperty(
	  /** The unique key that the app uses to identify the property, e.g. "com.google.android.gm.fieldname". */
		key: Option[String] = None,
	  /** The type of the property. */
		`type`: Option[Schema.ManagedProperty.TypeEnum] = None,
	  /** The name of the property. Localized. */
		title: Option[String] = None,
	  /** A longer description of the property, providing more detail of what it affects. Localized. */
		description: Option[String] = None,
	  /** For CHOICE or MULTISELECT properties, the list of possible entries. */
		entries: Option[List[Schema.ManagedPropertyEntry]] = None,
	  /** The default value of the property. BUNDLE_ARRAY properties don't have a default value. */
		defaultValue: Option[JsValue] = None,
	  /** For BUNDLE_ARRAY properties, the list of nested properties. A BUNDLE_ARRAY property is at most two levels deep. */
		nestedProperties: Option[List[Schema.ManagedProperty]] = None
	)
	
	case class ManagedPropertyEntry(
	  /** The machine-readable value of the entry, which should be used in the configuration. Not localized. */
		value: Option[String] = None,
	  /** The human-readable name of the value. Localized. */
		name: Option[String] = None
	)
	
	case class AppTrackInfo(
	  /** The unmodifiable unique track identifier, taken from the releaseTrackId in the URL of the Play Console page that displays the app’s track information. */
		trackId: Option[String] = None,
	  /** The track name associated with the trackId, set in the Play Console. The name is modifiable from Play Console. */
		trackAlias: Option[String] = None
	)
	
	case class AppVersion(
	  /** The string used in the Play store by the app developer to identify the version. The string is not necessarily unique or localized (for example, the string could be "1.4"). */
		versionString: Option[String] = None,
	  /** Unique increasing identifier for the app version. */
		versionCode: Option[Int] = None,
	  /** Track identifiers that the app version is published in. This does not include the production track (see production instead). */
		trackIds: Option[List[String]] = None,
	  /** If the value is True, it indicates that this version is a production track. */
		production: Option[Boolean] = None
	)
	
	object WebApp {
		enum DisplayModeEnum extends Enum[DisplayModeEnum] { case DISPLAY_MODE_UNSPECIFIED, MINIMAL_UI, STANDALONE, FULL_SCREEN }
	}
	case class WebApp(
	  /** The name of the web app, which is generated by the server during creation in the form enterprises/{enterpriseId}/webApps/{packageName}. */
		name: Option[String] = None,
	  /** The title of the web app as displayed to the user (e.g., amongst a list of other applications, or as a label for an icon). */
		title: Option[String] = None,
	  /** The start URL, i.e. the URL that should load when the user opens the application. */
		startUrl: Option[String] = None,
	  /** A list of icons for the web app. Must have at least one element. */
		icons: Option[List[Schema.WebAppIcon]] = None,
	  /** The display mode of the web app. */
		displayMode: Option[Schema.WebApp.DisplayModeEnum] = None,
	  /** The current version of the app.Note that the version can automatically increase during the lifetime of the web app, while Google does internal housekeeping to keep the web app up-to-date. */
		versionCode: Option[String] = None
	)
	
	case class WebAppIcon(
	  /** The actual bytes of the image in a base64url encoded string (c.f. RFC4648, section 5 "Base 64 Encoding with URL and Filename Safe Alphabet"). - The image type can be png or jpg. - The image should ideally be square. - The image should ideally have a size of 512x512.  */
		imageData: Option[String] = None
	)
	
	case class ListWebAppsResponse(
	  /** The list of web apps. */
		webApps: Option[List[Schema.WebApp]] = None,
	  /** If there are more results, a token to retrieve next page of results. */
		nextPageToken: Option[String] = None
	)
	
	object MigrationToken {
		enum ManagementModeEnum extends Enum[ManagementModeEnum] { case MANAGEMENT_MODE_UNSPECIFIED, WORK_PROFILE_PERSONALLY_OWNED, WORK_PROFILE_COMPANY_OWNED, FULLY_MANAGED }
	}
	case class MigrationToken(
	  /** Output only. The name of the migration token, which is generated by the server during creation, in the form enterprises/{enterprise}/migrationTokens/{migration_token}. */
		name: Option[String] = None,
	  /** Output only. The value of the migration token. */
		value: Option[String] = None,
	  /** Immutable. The time when this migration token expires. This can be at most seven days from the time of creation. The migration token is deleted seven days after it expires. */
		expireTime: Option[String] = None,
	  /** Input only. The time that this migration token is valid for. This is input-only, and for returning a migration token the server will populate the expireTime field. This can be at most seven days. The default is seven days. */
		ttl: Option[String] = None,
	  /** Output only. Time when this migration token was created. */
		createTime: Option[String] = None,
	  /** Required. Immutable. The user id of the Managed Google Play account on the device, as in the Play EMM API. This corresponds to the userId parameter in Play EMM API's Devices.get (https://developers.google.com/android/work/play/emm-api/v1/devices/get#parameters) call. */
		userId: Option[String] = None,
	  /** Required. Immutable. The id of the device, as in the Play EMM API. This corresponds to the deviceId parameter in Play EMM API's Devices.get (https://developers.google.com/android/work/play/emm-api/v1/devices/get#parameters) call. */
		deviceId: Option[String] = None,
	  /** Required. Immutable. The management mode of the device or profile being migrated. */
		managementMode: Option[Schema.MigrationToken.ManagementModeEnum] = None,
	  /** Required. Immutable. The name of the policy initially applied to the enrolled device, in the form enterprises/{enterprise}/policies/{policy}. */
		policy: Option[String] = None,
	  /** Immutable. Optional EMM-specified additional data. Once the device is migrated this will be populated in the migrationAdditionalData field of the Device resource. This must be at most 1024 characters. */
		additionalData: Option[String] = None,
	  /** Output only. Once this migration token is used to migrate a device, the name of the resulting Device resource will be populated here, in the form enterprises/{enterprise}/devices/{device}. */
		device: Option[String] = None
	)
	
	case class ListMigrationTokensResponse(
	  /** The migration tokens from the specified enterprise. */
		migrationTokens: Option[List[Schema.MigrationToken]] = None,
	  /** A token, which can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages. */
		nextPageToken: Option[String] = None
	)
	
	object ProvisioningInfo {
		enum ManagementModeEnum extends Enum[ManagementModeEnum] { case MANAGEMENT_MODE_UNSPECIFIED, DEVICE_OWNER, PROFILE_OWNER }
		enum OwnershipEnum extends Enum[OwnershipEnum] { case OWNERSHIP_UNSPECIFIED, COMPANY_OWNED, PERSONALLY_OWNED }
	}
	case class ProvisioningInfo(
	  /** The name of this resource in the form provisioningInfo/{provisioning_info}. */
		name: Option[String] = None,
	  /** The name of the enterprise in the form enterprises/{enterprise}. */
		enterprise: Option[String] = None,
	  /** The email address of the authenticated user (only present for Google Account provisioning method). */
		authenticatedUserEmail: Option[String] = None,
	  /** The brand of the device. For example, Google. */
		brand: Option[String] = None,
	  /** The model of the device. For example, Asus Nexus 7. */
		model: Option[String] = None,
	  /** The API level of the Android platform version running on the device. */
		apiLevel: Option[Int] = None,
	  /** The management mode of the device or profile. */
		managementMode: Option[Schema.ProvisioningInfo.ManagementModeEnum] = None,
	  /** Ownership of the managed device. */
		ownership: Option[Schema.ProvisioningInfo.OwnershipEnum] = None,
	  /** For corporate-owned devices, IMEI number of the GSM device. For example, A1000031212. */
		imei: Option[String] = None,
	  /** For corporate-owned devices, MEID number of the CDMA device. For example, A00000292788E1. */
		meid: Option[String] = None,
	  /** For corporate-owned devices, The device serial number. */
		serialNumber: Option[String] = None
	)
	
	case class IssueCommandResponse(
	
	)
	
	case class BatchUsageLogEvents(
	  /** If present, the name of the device in the form ‘enterprises/{enterpriseId}/devices/{deviceId}’ */
		device: Option[String] = None,
	  /** If present, the resource name of the user that owns this device in the form ‘enterprises/{enterpriseId}/users/{userId}’. */
		user: Option[String] = None,
	  /** The device timestamp when the batch of events were collected from the device. */
		retrievalTime: Option[String] = None,
	  /** The list of UsageLogEvent that were reported by the device, sorted chronologically by the event time. */
		usageLogEvents: Option[List[Schema.UsageLogEvent]] = None
	)
	
	object UsageLogEvent {
		enum EventTypeEnum extends Enum[EventTypeEnum] { case EVENT_TYPE_UNSPECIFIED, ADB_SHELL_COMMAND, ADB_SHELL_INTERACTIVE, APP_PROCESS_START, KEYGUARD_DISMISSED, KEYGUARD_DISMISS_AUTH_ATTEMPT, KEYGUARD_SECURED, FILE_PULLED, FILE_PUSHED, CERT_AUTHORITY_INSTALLED, CERT_AUTHORITY_REMOVED, CERT_VALIDATION_FAILURE, CRYPTO_SELF_TEST_COMPLETED, KEY_DESTRUCTION, KEY_GENERATED, KEY_IMPORT, KEY_INTEGRITY_VIOLATION, LOGGING_STARTED, LOGGING_STOPPED, LOG_BUFFER_SIZE_CRITICAL, MEDIA_MOUNT, MEDIA_UNMOUNT, OS_SHUTDOWN, OS_STARTUP, REMOTE_LOCK, WIPE_FAILURE, CONNECT, DNS, STOP_LOST_MODE_USER_ATTEMPT, LOST_MODE_OUTGOING_PHONE_CALL, LOST_MODE_LOCATION, ENROLLMENT_COMPLETE }
	}
	case class UsageLogEvent(
	  /** Unique id of the event. */
		eventId: Option[String] = None,
	  /** Device timestamp when the event was logged. */
		eventTime: Option[String] = None,
	  /** The particular usage log event type that was reported on the device. Use this to determine which event field to access. */
		eventType: Option[Schema.UsageLogEvent.EventTypeEnum] = None,
	  /** A shell command was issued over ADB via “adb shell command”. Part of SECURITY_LOGS. */
		adbShellCommandEvent: Option[Schema.AdbShellCommandEvent] = None,
	  /** An ADB interactive shell was opened via “adb shell”. Part of SECURITY_LOGS. */
		adbShellInteractiveEvent: Option[Schema.AdbShellInteractiveEvent] = None,
	  /** An app process was started. Part of SECURITY_LOGS. */
		appProcessStartEvent: Option[Schema.AppProcessStartEvent] = None,
	  /** The keyguard was dismissed. Part of SECURITY_LOGS. */
		keyguardDismissedEvent: Option[Schema.KeyguardDismissedEvent] = None,
	  /** An attempt was made to unlock the device. Part of SECURITY_LOGS. */
		keyguardDismissAuthAttemptEvent: Option[Schema.KeyguardDismissAuthAttemptEvent] = None,
	  /** The device was locked either by user or timeout. Part of SECURITY_LOGS. */
		keyguardSecuredEvent: Option[Schema.KeyguardSecuredEvent] = None,
	  /** A file was downloaded from the device. Part of SECURITY_LOGS. */
		filePulledEvent: Option[Schema.FilePulledEvent] = None,
	  /** A file was uploaded onto the device. Part of SECURITY_LOGS. */
		filePushedEvent: Option[Schema.FilePushedEvent] = None,
	  /** A new root certificate was installed into the system's trusted credential storage. Part of SECURITY_LOGS. */
		certAuthorityInstalledEvent: Option[Schema.CertAuthorityInstalledEvent] = None,
	  /** A root certificate was removed from the system's trusted credential storage. Part of SECURITY_LOGS. */
		certAuthorityRemovedEvent: Option[Schema.CertAuthorityRemovedEvent] = None,
	  /** An X.509v3 certificate failed to validate, currently this validation is performed on the Wi-FI access point and failure may be due to a mismatch upon server certificate validation. However it may in the future include other validation events of an X.509v3 certificate. Part of SECURITY_LOGS. */
		certValidationFailureEvent: Option[Schema.CertValidationFailureEvent] = None,
	  /** Validates whether Android’s built-in cryptographic library (BoringSSL) is valid. Should always succeed on device boot, if it fails, the device should be considered untrusted. Part of SECURITY_LOGS. */
		cryptoSelfTestCompletedEvent: Option[Schema.CryptoSelfTestCompletedEvent] = None,
	  /** A cryptographic key including user installed, admin installed and system maintained private key is removed from the device either by the user or management. Part of SECURITY_LOGS. */
		keyDestructionEvent: Option[Schema.KeyDestructionEvent] = None,
	  /** A cryptographic key including user installed, admin installed and system maintained private key is installed on the device either by the user or management. Part of SECURITY_LOGS. */
		keyGeneratedEvent: Option[Schema.KeyGeneratedEvent] = None,
	  /** A cryptographic key including user installed, admin installed and system maintained private key is imported on the device either by the user or management. Part of SECURITY_LOGS. */
		keyImportEvent: Option[Schema.KeyImportEvent] = None,
	  /** A cryptographic key including user installed, admin installed and system maintained private key is determined to be corrupted due to storage corruption, hardware failure or some OS issue. Part of SECURITY_LOGS. */
		keyIntegrityViolationEvent: Option[Schema.KeyIntegrityViolationEvent] = None,
	  /** usageLog policy has been enabled. Part of SECURITY_LOGS. */
		loggingStartedEvent: Option[Schema.LoggingStartedEvent] = None,
	  /** usageLog policy has been disabled. Part of SECURITY_LOGS. */
		loggingStoppedEvent: Option[Schema.LoggingStoppedEvent] = None,
	  /** The audit log buffer has reached 90% of its capacity, therefore older events may be dropped. Part of SECURITY_LOGS. */
		logBufferSizeCriticalEvent: Option[Schema.LogBufferSizeCriticalEvent] = None,
	  /** Removable media was mounted. Part of SECURITY_LOGS. */
		mediaMountEvent: Option[Schema.MediaMountEvent] = None,
	  /** Removable media was unmounted. Part of SECURITY_LOGS. */
		mediaUnmountEvent: Option[Schema.MediaUnmountEvent] = None,
	  /** Device was shutdown. Part of SECURITY_LOGS. */
		osShutdownEvent: Option[Schema.OsShutdownEvent] = None,
	  /** Device was started. Part of SECURITY_LOGS. */
		osStartupEvent: Option[Schema.OsStartupEvent] = None,
	  /** The device or profile has been remotely locked via the LOCK command. Part of SECURITY_LOGS. */
		remoteLockEvent: Option[Schema.RemoteLockEvent] = None,
	  /** The work profile or company-owned device failed to wipe when requested. This could be user initiated or admin initiated e.g. delete was received. Part of SECURITY_LOGS. */
		wipeFailureEvent: Option[Schema.WipeFailureEvent] = None,
	  /** A TCP connect event was initiated through the standard network stack. Part of NETWORK_ACTIVITY_LOGS. */
		connectEvent: Option[Schema.ConnectEvent] = None,
	  /** A DNS lookup event was initiated through the standard network stack. Part of NETWORK_ACTIVITY_LOGS. */
		dnsEvent: Option[Schema.DnsEvent] = None,
	  /** An attempt to take a device out of lost mode. */
		stopLostModeUserAttemptEvent: Option[Schema.StopLostModeUserAttemptEvent] = None,
	  /** An outgoing phone call has been made when a device in lost mode. */
		lostModeOutgoingPhoneCallEvent: Option[Schema.LostModeOutgoingPhoneCallEvent] = None,
	  /** A lost mode location update when a device in lost mode. */
		lostModeLocationEvent: Option[Schema.LostModeLocationEvent] = None,
	  /** Device has completed enrollment. Part of AMAPI_LOGS. */
		enrollmentCompleteEvent: Option[Schema.EnrollmentCompleteEvent] = None
	)
	
	case class AdbShellCommandEvent(
	  /** Shell command that was issued over ADB via "adb shell command". Redacted to empty string on organization-owned managed profile devices. */
		shellCmd: Option[String] = None
	)
	
	case class AdbShellInteractiveEvent(
	
	)
	
	case class AppProcessStartEvent(
	  /** Information about a process. */
		processInfo: Option[Schema.AppProcessInfo] = None
	)
	
	case class AppProcessInfo(
	  /** Process name. */
		processName: Option[String] = None,
	  /** Process start time. */
		startTime: Option[String] = None,
	  /** UID of the package. */
		uid: Option[Int] = None,
	  /** Process ID. */
		pid: Option[Int] = None,
	  /** SELinux policy info. */
		seinfo: Option[String] = None,
	  /** SHA-256 hash of the base APK, in hexadecimal format. */
		apkSha256Hash: Option[String] = None,
	  /** Package names of all packages that are associated with the particular user ID. In most cases, this will be a single package name, the package that has been assigned that user ID. If multiple application share a UID then all packages sharing UID will be included. */
		packageNames: Option[List[String]] = None
	)
	
	case class KeyguardDismissedEvent(
	
	)
	
	case class KeyguardDismissAuthAttemptEvent(
	  /** Whether the unlock attempt was successful. */
		success: Option[Boolean] = None,
	  /** Whether a strong form of authentication (password, PIN, or pattern) was used to unlock device. */
		strongAuthMethodUsed: Option[Boolean] = None
	)
	
	case class KeyguardSecuredEvent(
	
	)
	
	case class FilePulledEvent(
	  /** The path of the file being pulled. */
		filePath: Option[String] = None
	)
	
	case class FilePushedEvent(
	  /** The path of the file being pushed. */
		filePath: Option[String] = None
	)
	
	case class CertAuthorityInstalledEvent(
	  /** Subject of the certificate. */
		certificate: Option[String] = None,
	  /** The user in which the certificate install event happened. Only available for devices running Android 11 and above. */
		userId: Option[Int] = None,
	  /** Whether the installation event succeeded. */
		success: Option[Boolean] = None
	)
	
	case class CertAuthorityRemovedEvent(
	  /** Subject of the certificate. */
		certificate: Option[String] = None,
	  /** The user in which the certificate removal event occurred. Only available for devices running Android 11 and above. */
		userId: Option[Int] = None,
	  /** Whether the removal succeeded. */
		success: Option[Boolean] = None
	)
	
	case class CertValidationFailureEvent(
	  /** The reason why certification validation failed. */
		failureReason: Option[String] = None
	)
	
	case class CryptoSelfTestCompletedEvent(
	  /** Whether the test succeeded. */
		success: Option[Boolean] = None
	)
	
	case class KeyDestructionEvent(
	  /** Alias of the key. */
		keyAlias: Option[String] = None,
	  /** UID of the application which owns the key. */
		applicationUid: Option[Int] = None,
	  /** Whether the operation was successful. */
		success: Option[Boolean] = None
	)
	
	case class KeyGeneratedEvent(
	  /** Alias of the key. */
		keyAlias: Option[String] = None,
	  /** UID of the application which generated the key. */
		applicationUid: Option[Int] = None,
	  /** Whether the operation was successful. */
		success: Option[Boolean] = None
	)
	
	case class KeyImportEvent(
	  /** Alias of the key. */
		keyAlias: Option[String] = None,
	  /** UID of the application which imported the key */
		applicationUid: Option[Int] = None,
	  /** Whether the operation was successful. */
		success: Option[Boolean] = None
	)
	
	case class KeyIntegrityViolationEvent(
	  /** Alias of the key. */
		keyAlias: Option[String] = None,
	  /** UID of the application which owns the key */
		applicationUid: Option[Int] = None
	)
	
	case class LoggingStartedEvent(
	
	)
	
	case class LoggingStoppedEvent(
	
	)
	
	case class LogBufferSizeCriticalEvent(
	
	)
	
	case class MediaMountEvent(
	  /** Mount point. */
		mountPoint: Option[String] = None,
	  /** Volume label. Redacted to empty string on organization-owned managed profile devices. */
		volumeLabel: Option[String] = None
	)
	
	case class MediaUnmountEvent(
	  /** Mount point. */
		mountPoint: Option[String] = None,
	  /** Volume label. Redacted to empty string on organization-owned managed profile devices. */
		volumeLabel: Option[String] = None
	)
	
	case class OsShutdownEvent(
	
	)
	
	object OsStartupEvent {
		enum VerifiedBootStateEnum extends Enum[VerifiedBootStateEnum] { case VERIFIED_BOOT_STATE_UNSPECIFIED, GREEN, YELLOW, ORANGE }
		enum VerityModeEnum extends Enum[VerityModeEnum] { case DM_VERITY_MODE_UNSPECIFIED, ENFORCING, IO_ERROR, DISABLED }
	}
	case class OsStartupEvent(
	  /** Verified Boot state. */
		verifiedBootState: Option[Schema.OsStartupEvent.VerifiedBootStateEnum] = None,
	  /** dm-verity mode. */
		verityMode: Option[Schema.OsStartupEvent.VerityModeEnum] = None
	)
	
	case class RemoteLockEvent(
	  /** Package name of the admin app requesting the change. */
		adminPackageName: Option[String] = None,
	  /** User ID of the admin app from the which the change was requested. */
		adminUserId: Option[Int] = None,
	  /** User ID in which the change was requested in. */
		targetUserId: Option[Int] = None
	)
	
	case class WipeFailureEvent(
	
	)
	
	case class ConnectEvent(
	  /** The destination IP address of the connect call. */
		destinationIpAddress: Option[String] = None,
	  /** The destination port of the connect call. */
		destinationPort: Option[Int] = None,
	  /** The package name of the UID that performed the connect call. */
		packageName: Option[String] = None
	)
	
	case class DnsEvent(
	  /** The hostname that was looked up. */
		hostname: Option[String] = None,
	  /** The (possibly truncated) list of the IP addresses returned for DNS lookup (max 10 IPv4 or IPv6 addresses). */
		ipAddresses: Option[List[String]] = None,
	  /** The number of IP addresses returned from the DNS lookup event. May be higher than the amount of ip_addresses if there were too many addresses to log. */
		totalIpAddressesReturned: Option[String] = None,
	  /** The package name of the UID that performed the DNS lookup. */
		packageName: Option[String] = None
	)
	
	object StopLostModeUserAttemptEvent {
		enum StatusEnum extends Enum[StatusEnum] { case STATUS_UNSPECIFIED, ATTEMPT_SUCCEEDED, ATTEMPT_FAILED }
	}
	case class StopLostModeUserAttemptEvent(
	  /** The status of the attempt to stop lost mode. */
		status: Option[Schema.StopLostModeUserAttemptEvent.StatusEnum] = None
	)
	
	case class LostModeOutgoingPhoneCallEvent(
	
	)
	
	case class LostModeLocationEvent(
	  /** The device location */
		location: Option[Schema.Location] = None,
	  /** The battery level as a number between 0 and 100 inclusive */
		batteryLevel: Option[Int] = None
	)
	
	case class Location(
	  /** The latitude position of the location */
		latitude: Option[BigDecimal] = None,
	  /** The longitude position of the location */
		longitude: Option[BigDecimal] = None
	)
	
	case class EnrollmentCompleteEvent(
	
	)
}
