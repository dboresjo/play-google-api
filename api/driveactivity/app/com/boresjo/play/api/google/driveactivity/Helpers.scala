package com.boresjo.play.api.google.driveactivity

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putSchemaConsolidationStrategy: Conversion[Schema.ConsolidationStrategy, Option[Schema.ConsolidationStrategy]] = (fun: Schema.ConsolidationStrategy) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putSchemaNoConsolidation: Conversion[Schema.NoConsolidation, Option[Schema.NoConsolidation]] = (fun: Schema.NoConsolidation) => Option(fun)
		given putSchemaLegacy: Conversion[Schema.Legacy, Option[Schema.Legacy]] = (fun: Schema.Legacy) => Option(fun)
		given putListSchemaDriveActivity: Conversion[List[Schema.DriveActivity], Option[List[Schema.DriveActivity]]] = (fun: List[Schema.DriveActivity]) => Option(fun)
		given putSchemaActionDetail: Conversion[Schema.ActionDetail, Option[Schema.ActionDetail]] = (fun: Schema.ActionDetail) => Option(fun)
		given putListSchemaActor: Conversion[List[Schema.Actor], Option[List[Schema.Actor]]] = (fun: List[Schema.Actor]) => Option(fun)
		given putListSchemaAction: Conversion[List[Schema.Action], Option[List[Schema.Action]]] = (fun: List[Schema.Action]) => Option(fun)
		given putListSchemaTarget: Conversion[List[Schema.Target], Option[List[Schema.Target]]] = (fun: List[Schema.Target]) => Option(fun)
		given putSchemaTimeRange: Conversion[Schema.TimeRange, Option[Schema.TimeRange]] = (fun: Schema.TimeRange) => Option(fun)
		given putSchemaCreate: Conversion[Schema.Create, Option[Schema.Create]] = (fun: Schema.Create) => Option(fun)
		given putSchemaEdit: Conversion[Schema.Edit, Option[Schema.Edit]] = (fun: Schema.Edit) => Option(fun)
		given putSchemaMove: Conversion[Schema.Move, Option[Schema.Move]] = (fun: Schema.Move) => Option(fun)
		given putSchemaRename: Conversion[Schema.Rename, Option[Schema.Rename]] = (fun: Schema.Rename) => Option(fun)
		given putSchemaDelete: Conversion[Schema.Delete, Option[Schema.Delete]] = (fun: Schema.Delete) => Option(fun)
		given putSchemaRestore: Conversion[Schema.Restore, Option[Schema.Restore]] = (fun: Schema.Restore) => Option(fun)
		given putSchemaPermissionChange: Conversion[Schema.PermissionChange, Option[Schema.PermissionChange]] = (fun: Schema.PermissionChange) => Option(fun)
		given putSchemaComment: Conversion[Schema.Comment, Option[Schema.Comment]] = (fun: Schema.Comment) => Option(fun)
		given putSchemaDataLeakPreventionChange: Conversion[Schema.DataLeakPreventionChange, Option[Schema.DataLeakPreventionChange]] = (fun: Schema.DataLeakPreventionChange) => Option(fun)
		given putSchemaApplicationReference: Conversion[Schema.ApplicationReference, Option[Schema.ApplicationReference]] = (fun: Schema.ApplicationReference) => Option(fun)
		given putSchemaSettingsChange: Conversion[Schema.SettingsChange, Option[Schema.SettingsChange]] = (fun: Schema.SettingsChange) => Option(fun)
		given putSchemaAppliedLabelChange: Conversion[Schema.AppliedLabelChange, Option[Schema.AppliedLabelChange]] = (fun: Schema.AppliedLabelChange) => Option(fun)
		given putSchemaNew: Conversion[Schema.New, Option[Schema.New]] = (fun: Schema.New) => Option(fun)
		given putSchemaUpload: Conversion[Schema.Upload, Option[Schema.Upload]] = (fun: Schema.Upload) => Option(fun)
		given putSchemaCopy: Conversion[Schema.Copy, Option[Schema.Copy]] = (fun: Schema.Copy) => Option(fun)
		given putSchemaTargetReference: Conversion[Schema.TargetReference, Option[Schema.TargetReference]] = (fun: Schema.TargetReference) => Option(fun)
		given putSchemaDriveItemReference: Conversion[Schema.DriveItemReference, Option[Schema.DriveItemReference]] = (fun: Schema.DriveItemReference) => Option(fun)
		given putSchemaDriveReference: Conversion[Schema.DriveReference, Option[Schema.DriveReference]] = (fun: Schema.DriveReference) => Option(fun)
		given putSchemaTeamDriveReference: Conversion[Schema.TeamDriveReference, Option[Schema.TeamDriveReference]] = (fun: Schema.TeamDriveReference) => Option(fun)
		given putSchemaFile: Conversion[Schema.File, Option[Schema.File]] = (fun: Schema.File) => Option(fun)
		given putSchemaFolder: Conversion[Schema.Folder, Option[Schema.Folder]] = (fun: Schema.Folder) => Option(fun)
		given putSchemaDriveFile: Conversion[Schema.DriveFile, Option[Schema.DriveFile]] = (fun: Schema.DriveFile) => Option(fun)
		given putSchemaDriveFolder: Conversion[Schema.DriveFolder, Option[Schema.DriveFolder]] = (fun: Schema.DriveFolder) => Option(fun)
		given putSchemaFolderTypeEnum: Conversion[Schema.Folder.TypeEnum, Option[Schema.Folder.TypeEnum]] = (fun: Schema.Folder.TypeEnum) => Option(fun)
		given putSchemaDriveFolderTypeEnum: Conversion[Schema.DriveFolder.TypeEnum, Option[Schema.DriveFolder.TypeEnum]] = (fun: Schema.DriveFolder.TypeEnum) => Option(fun)
		given putListSchemaTargetReference: Conversion[List[Schema.TargetReference], Option[List[Schema.TargetReference]]] = (fun: List[Schema.TargetReference]) => Option(fun)
		given putSchemaDeleteTypeEnum: Conversion[Schema.Delete.TypeEnum, Option[Schema.Delete.TypeEnum]] = (fun: Schema.Delete.TypeEnum) => Option(fun)
		given putSchemaRestoreTypeEnum: Conversion[Schema.Restore.TypeEnum, Option[Schema.Restore.TypeEnum]] = (fun: Schema.Restore.TypeEnum) => Option(fun)
		given putListSchemaPermission: Conversion[List[Schema.Permission], Option[List[Schema.Permission]]] = (fun: List[Schema.Permission]) => Option(fun)
		given putSchemaPermissionRoleEnum: Conversion[Schema.Permission.RoleEnum, Option[Schema.Permission.RoleEnum]] = (fun: Schema.Permission.RoleEnum) => Option(fun)
		given putSchemaUser: Conversion[Schema.User, Option[Schema.User]] = (fun: Schema.User) => Option(fun)
		given putSchemaGroup: Conversion[Schema.Group, Option[Schema.Group]] = (fun: Schema.Group) => Option(fun)
		given putSchemaDomain: Conversion[Schema.Domain, Option[Schema.Domain]] = (fun: Schema.Domain) => Option(fun)
		given putSchemaAnyone: Conversion[Schema.Anyone, Option[Schema.Anyone]] = (fun: Schema.Anyone) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaKnownUser: Conversion[Schema.KnownUser, Option[Schema.KnownUser]] = (fun: Schema.KnownUser) => Option(fun)
		given putSchemaDeletedUser: Conversion[Schema.DeletedUser, Option[Schema.DeletedUser]] = (fun: Schema.DeletedUser) => Option(fun)
		given putSchemaUnknownUser: Conversion[Schema.UnknownUser, Option[Schema.UnknownUser]] = (fun: Schema.UnknownUser) => Option(fun)
		given putSchemaPost: Conversion[Schema.Post, Option[Schema.Post]] = (fun: Schema.Post) => Option(fun)
		given putSchemaAssignment: Conversion[Schema.Assignment, Option[Schema.Assignment]] = (fun: Schema.Assignment) => Option(fun)
		given putSchemaSuggestion: Conversion[Schema.Suggestion, Option[Schema.Suggestion]] = (fun: Schema.Suggestion) => Option(fun)
		given putListSchemaUser: Conversion[List[Schema.User], Option[List[Schema.User]]] = (fun: List[Schema.User]) => Option(fun)
		given putSchemaPostSubtypeEnum: Conversion[Schema.Post.SubtypeEnum, Option[Schema.Post.SubtypeEnum]] = (fun: Schema.Post.SubtypeEnum) => Option(fun)
		given putSchemaAssignmentSubtypeEnum: Conversion[Schema.Assignment.SubtypeEnum, Option[Schema.Assignment.SubtypeEnum]] = (fun: Schema.Assignment.SubtypeEnum) => Option(fun)
		given putSchemaSuggestionSubtypeEnum: Conversion[Schema.Suggestion.SubtypeEnum, Option[Schema.Suggestion.SubtypeEnum]] = (fun: Schema.Suggestion.SubtypeEnum) => Option(fun)
		given putSchemaDataLeakPreventionChangeTypeEnum: Conversion[Schema.DataLeakPreventionChange.TypeEnum, Option[Schema.DataLeakPreventionChange.TypeEnum]] = (fun: Schema.DataLeakPreventionChange.TypeEnum) => Option(fun)
		given putSchemaApplicationReferenceTypeEnum: Conversion[Schema.ApplicationReference.TypeEnum, Option[Schema.ApplicationReference.TypeEnum]] = (fun: Schema.ApplicationReference.TypeEnum) => Option(fun)
		given putListSchemaRestrictionChange: Conversion[List[Schema.RestrictionChange], Option[List[Schema.RestrictionChange]]] = (fun: List[Schema.RestrictionChange]) => Option(fun)
		given putSchemaRestrictionChangeFeatureEnum: Conversion[Schema.RestrictionChange.FeatureEnum, Option[Schema.RestrictionChange.FeatureEnum]] = (fun: Schema.RestrictionChange.FeatureEnum) => Option(fun)
		given putSchemaRestrictionChangeNewRestrictionEnum: Conversion[Schema.RestrictionChange.NewRestrictionEnum, Option[Schema.RestrictionChange.NewRestrictionEnum]] = (fun: Schema.RestrictionChange.NewRestrictionEnum) => Option(fun)
		given putListSchemaAppliedLabelChangeDetail: Conversion[List[Schema.AppliedLabelChangeDetail], Option[List[Schema.AppliedLabelChangeDetail]]] = (fun: List[Schema.AppliedLabelChangeDetail]) => Option(fun)
		given putListSchemaAppliedLabelChangeDetailTypesEnum: Conversion[List[Schema.AppliedLabelChangeDetail.TypesEnum], Option[List[Schema.AppliedLabelChangeDetail.TypesEnum]]] = (fun: List[Schema.AppliedLabelChangeDetail.TypesEnum]) => Option(fun)
		given putListSchemaFieldValueChange: Conversion[List[Schema.FieldValueChange], Option[List[Schema.FieldValueChange]]] = (fun: List[Schema.FieldValueChange]) => Option(fun)
		given putSchemaFieldValue: Conversion[Schema.FieldValue, Option[Schema.FieldValue]] = (fun: Schema.FieldValue) => Option(fun)
		given putSchemaText: Conversion[Schema.Text, Option[Schema.Text]] = (fun: Schema.Text) => Option(fun)
		given putSchemaTextList: Conversion[Schema.TextList, Option[Schema.TextList]] = (fun: Schema.TextList) => Option(fun)
		given putSchemaSelection: Conversion[Schema.Selection, Option[Schema.Selection]] = (fun: Schema.Selection) => Option(fun)
		given putSchemaSelectionList: Conversion[Schema.SelectionList, Option[Schema.SelectionList]] = (fun: Schema.SelectionList) => Option(fun)
		given putSchemaInteger: Conversion[Schema.Integer, Option[Schema.Integer]] = (fun: Schema.Integer) => Option(fun)
		given putSchemaSingleUser: Conversion[Schema.SingleUser, Option[Schema.SingleUser]] = (fun: Schema.SingleUser) => Option(fun)
		given putSchemaUserList: Conversion[Schema.UserList, Option[Schema.UserList]] = (fun: Schema.UserList) => Option(fun)
		given putSchemaDate: Conversion[Schema.Date, Option[Schema.Date]] = (fun: Schema.Date) => Option(fun)
		given putListSchemaText: Conversion[List[Schema.Text], Option[List[Schema.Text]]] = (fun: List[Schema.Text]) => Option(fun)
		given putListSchemaSelection: Conversion[List[Schema.Selection], Option[List[Schema.Selection]]] = (fun: List[Schema.Selection]) => Option(fun)
		given putListSchemaSingleUser: Conversion[List[Schema.SingleUser], Option[List[Schema.SingleUser]]] = (fun: List[Schema.SingleUser]) => Option(fun)
		given putSchemaAnonymousUser: Conversion[Schema.AnonymousUser, Option[Schema.AnonymousUser]] = (fun: Schema.AnonymousUser) => Option(fun)
		given putSchemaImpersonation: Conversion[Schema.Impersonation, Option[Schema.Impersonation]] = (fun: Schema.Impersonation) => Option(fun)
		given putSchemaSystemEvent: Conversion[Schema.SystemEvent, Option[Schema.SystemEvent]] = (fun: Schema.SystemEvent) => Option(fun)
		given putSchemaAdministrator: Conversion[Schema.Administrator, Option[Schema.Administrator]] = (fun: Schema.Administrator) => Option(fun)
		given putSchemaSystemEventTypeEnum: Conversion[Schema.SystemEvent.TypeEnum, Option[Schema.SystemEvent.TypeEnum]] = (fun: Schema.SystemEvent.TypeEnum) => Option(fun)
		given putSchemaActor: Conversion[Schema.Actor, Option[Schema.Actor]] = (fun: Schema.Actor) => Option(fun)
		given putSchemaTarget: Conversion[Schema.Target, Option[Schema.Target]] = (fun: Schema.Target) => Option(fun)
		given putSchemaDriveItem: Conversion[Schema.DriveItem, Option[Schema.DriveItem]] = (fun: Schema.DriveItem) => Option(fun)
		given putSchemaDrive: Conversion[Schema.Drive, Option[Schema.Drive]] = (fun: Schema.Drive) => Option(fun)
		given putSchemaFileComment: Conversion[Schema.FileComment, Option[Schema.FileComment]] = (fun: Schema.FileComment) => Option(fun)
		given putSchemaTeamDrive: Conversion[Schema.TeamDrive, Option[Schema.TeamDrive]] = (fun: Schema.TeamDrive) => Option(fun)
		given putSchemaOwner: Conversion[Schema.Owner, Option[Schema.Owner]] = (fun: Schema.Owner) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
