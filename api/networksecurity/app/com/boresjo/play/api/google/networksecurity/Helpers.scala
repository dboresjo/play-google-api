package com.boresjo.play.api.google.networksecurity

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, AuthToken, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaOperation: Conversion[List[Schema.Operation], Option[List[Schema.Operation]]] = (fun: List[Schema.Operation]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putMapStringJsValue: Conversion[Map[String, JsValue], Option[Map[String, JsValue]]] = (fun: Map[String, JsValue]) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putListSchemaAddressGroup: Conversion[List[Schema.AddressGroup], Option[List[Schema.AddressGroup]]] = (fun: List[Schema.AddressGroup]) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putSchemaAddressGroupTypeEnum: Conversion[Schema.AddressGroup.TypeEnum, Option[Schema.AddressGroup.TypeEnum]] = (fun: Schema.AddressGroup.TypeEnum) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putListSchemaAddressGroupPurposeEnum: Conversion[List[Schema.AddressGroup.PurposeEnum], Option[List[Schema.AddressGroup.PurposeEnum]]] = (fun: List[Schema.AddressGroup.PurposeEnum]) => Option(fun)
		given putListSchemaListAddressGroupReferencesResponseAddressGroupReference: Conversion[List[Schema.ListAddressGroupReferencesResponseAddressGroupReference], Option[List[Schema.ListAddressGroupReferencesResponseAddressGroupReference]]] = (fun: List[Schema.ListAddressGroupReferencesResponseAddressGroupReference]) => Option(fun)
		given putListSchemaFirewallEndpoint: Conversion[List[Schema.FirewallEndpoint], Option[List[Schema.FirewallEndpoint]]] = (fun: List[Schema.FirewallEndpoint]) => Option(fun)
		given putSchemaFirewallEndpointStateEnum: Conversion[Schema.FirewallEndpoint.StateEnum, Option[Schema.FirewallEndpoint.StateEnum]] = (fun: Schema.FirewallEndpoint.StateEnum) => Option(fun)
		given putListSchemaFirewallEndpointAssociationReference: Conversion[List[Schema.FirewallEndpointAssociationReference], Option[List[Schema.FirewallEndpointAssociationReference]]] = (fun: List[Schema.FirewallEndpointAssociationReference]) => Option(fun)
		given putListSchemaFirewallEndpointAssociation: Conversion[List[Schema.FirewallEndpointAssociation], Option[List[Schema.FirewallEndpointAssociation]]] = (fun: List[Schema.FirewallEndpointAssociation]) => Option(fun)
		given putSchemaFirewallEndpointAssociationStateEnum: Conversion[Schema.FirewallEndpointAssociation.StateEnum, Option[Schema.FirewallEndpointAssociation.StateEnum]] = (fun: Schema.FirewallEndpointAssociation.StateEnum) => Option(fun)
		given putListSchemaAuthorizationPolicy: Conversion[List[Schema.AuthorizationPolicy], Option[List[Schema.AuthorizationPolicy]]] = (fun: List[Schema.AuthorizationPolicy]) => Option(fun)
		given putSchemaAuthorizationPolicyActionEnum: Conversion[Schema.AuthorizationPolicy.ActionEnum, Option[Schema.AuthorizationPolicy.ActionEnum]] = (fun: Schema.AuthorizationPolicy.ActionEnum) => Option(fun)
		given putListSchemaRule: Conversion[List[Schema.Rule], Option[List[Schema.Rule]]] = (fun: List[Schema.Rule]) => Option(fun)
		given putListSchemaSource: Conversion[List[Schema.Source], Option[List[Schema.Source]]] = (fun: List[Schema.Source]) => Option(fun)
		given putListSchemaDestination: Conversion[List[Schema.Destination], Option[List[Schema.Destination]]] = (fun: List[Schema.Destination]) => Option(fun)
		given putListInt: Conversion[List[Int], Option[List[Int]]] = (fun: List[Int]) => Option(fun)
		given putSchemaHttpHeaderMatch: Conversion[Schema.HttpHeaderMatch, Option[Schema.HttpHeaderMatch]] = (fun: Schema.HttpHeaderMatch) => Option(fun)
		given putListSchemaServerTlsPolicy: Conversion[List[Schema.ServerTlsPolicy], Option[List[Schema.ServerTlsPolicy]]] = (fun: List[Schema.ServerTlsPolicy]) => Option(fun)
		given putSchemaGoogleCloudNetworksecurityV1CertificateProvider: Conversion[Schema.GoogleCloudNetworksecurityV1CertificateProvider, Option[Schema.GoogleCloudNetworksecurityV1CertificateProvider]] = (fun: Schema.GoogleCloudNetworksecurityV1CertificateProvider) => Option(fun)
		given putSchemaMTLSPolicy: Conversion[Schema.MTLSPolicy, Option[Schema.MTLSPolicy]] = (fun: Schema.MTLSPolicy) => Option(fun)
		given putSchemaGoogleCloudNetworksecurityV1GrpcEndpoint: Conversion[Schema.GoogleCloudNetworksecurityV1GrpcEndpoint, Option[Schema.GoogleCloudNetworksecurityV1GrpcEndpoint]] = (fun: Schema.GoogleCloudNetworksecurityV1GrpcEndpoint) => Option(fun)
		given putSchemaCertificateProviderInstance: Conversion[Schema.CertificateProviderInstance, Option[Schema.CertificateProviderInstance]] = (fun: Schema.CertificateProviderInstance) => Option(fun)
		given putSchemaMTLSPolicyClientValidationModeEnum: Conversion[Schema.MTLSPolicy.ClientValidationModeEnum, Option[Schema.MTLSPolicy.ClientValidationModeEnum]] = (fun: Schema.MTLSPolicy.ClientValidationModeEnum) => Option(fun)
		given putListSchemaValidationCA: Conversion[List[Schema.ValidationCA], Option[List[Schema.ValidationCA]]] = (fun: List[Schema.ValidationCA]) => Option(fun)
		given putListSchemaClientTlsPolicy: Conversion[List[Schema.ClientTlsPolicy], Option[List[Schema.ClientTlsPolicy]]] = (fun: List[Schema.ClientTlsPolicy]) => Option(fun)
		given putListSchemaGatewaySecurityPolicy: Conversion[List[Schema.GatewaySecurityPolicy], Option[List[Schema.GatewaySecurityPolicy]]] = (fun: List[Schema.GatewaySecurityPolicy]) => Option(fun)
		given putListSchemaGatewaySecurityPolicyRule: Conversion[List[Schema.GatewaySecurityPolicyRule], Option[List[Schema.GatewaySecurityPolicyRule]]] = (fun: List[Schema.GatewaySecurityPolicyRule]) => Option(fun)
		given putSchemaGatewaySecurityPolicyRuleBasicProfileEnum: Conversion[Schema.GatewaySecurityPolicyRule.BasicProfileEnum, Option[Schema.GatewaySecurityPolicyRule.BasicProfileEnum]] = (fun: Schema.GatewaySecurityPolicyRule.BasicProfileEnum) => Option(fun)
		given putListSchemaUrlList: Conversion[List[Schema.UrlList], Option[List[Schema.UrlList]]] = (fun: List[Schema.UrlList]) => Option(fun)
		given putListSchemaTlsInspectionPolicy: Conversion[List[Schema.TlsInspectionPolicy], Option[List[Schema.TlsInspectionPolicy]]] = (fun: List[Schema.TlsInspectionPolicy]) => Option(fun)
		given putSchemaTlsInspectionPolicyMinTlsVersionEnum: Conversion[Schema.TlsInspectionPolicy.MinTlsVersionEnum, Option[Schema.TlsInspectionPolicy.MinTlsVersionEnum]] = (fun: Schema.TlsInspectionPolicy.MinTlsVersionEnum) => Option(fun)
		given putSchemaTlsInspectionPolicyTlsFeatureProfileEnum: Conversion[Schema.TlsInspectionPolicy.TlsFeatureProfileEnum, Option[Schema.TlsInspectionPolicy.TlsFeatureProfileEnum]] = (fun: Schema.TlsInspectionPolicy.TlsFeatureProfileEnum) => Option(fun)
		given putListSchemaAuthzPolicy: Conversion[List[Schema.AuthzPolicy], Option[List[Schema.AuthzPolicy]]] = (fun: List[Schema.AuthzPolicy]) => Option(fun)
		given putSchemaAuthzPolicyTarget: Conversion[Schema.AuthzPolicyTarget, Option[Schema.AuthzPolicyTarget]] = (fun: Schema.AuthzPolicyTarget) => Option(fun)
		given putListSchemaAuthzPolicyAuthzRule: Conversion[List[Schema.AuthzPolicyAuthzRule], Option[List[Schema.AuthzPolicyAuthzRule]]] = (fun: List[Schema.AuthzPolicyAuthzRule]) => Option(fun)
		given putSchemaAuthzPolicyActionEnum: Conversion[Schema.AuthzPolicy.ActionEnum, Option[Schema.AuthzPolicy.ActionEnum]] = (fun: Schema.AuthzPolicy.ActionEnum) => Option(fun)
		given putSchemaAuthzPolicyCustomProvider: Conversion[Schema.AuthzPolicyCustomProvider, Option[Schema.AuthzPolicyCustomProvider]] = (fun: Schema.AuthzPolicyCustomProvider) => Option(fun)
		given putSchemaAuthzPolicyTargetLoadBalancingSchemeEnum: Conversion[Schema.AuthzPolicyTarget.LoadBalancingSchemeEnum, Option[Schema.AuthzPolicyTarget.LoadBalancingSchemeEnum]] = (fun: Schema.AuthzPolicyTarget.LoadBalancingSchemeEnum) => Option(fun)
		given putSchemaAuthzPolicyAuthzRuleFrom: Conversion[Schema.AuthzPolicyAuthzRuleFrom, Option[Schema.AuthzPolicyAuthzRuleFrom]] = (fun: Schema.AuthzPolicyAuthzRuleFrom) => Option(fun)
		given putSchemaAuthzPolicyAuthzRuleTo: Conversion[Schema.AuthzPolicyAuthzRuleTo, Option[Schema.AuthzPolicyAuthzRuleTo]] = (fun: Schema.AuthzPolicyAuthzRuleTo) => Option(fun)
		given putListSchemaAuthzPolicyAuthzRuleFromRequestSource: Conversion[List[Schema.AuthzPolicyAuthzRuleFromRequestSource], Option[List[Schema.AuthzPolicyAuthzRuleFromRequestSource]]] = (fun: List[Schema.AuthzPolicyAuthzRuleFromRequestSource]) => Option(fun)
		given putListSchemaAuthzPolicyAuthzRuleStringMatch: Conversion[List[Schema.AuthzPolicyAuthzRuleStringMatch], Option[List[Schema.AuthzPolicyAuthzRuleStringMatch]]] = (fun: List[Schema.AuthzPolicyAuthzRuleStringMatch]) => Option(fun)
		given putListSchemaAuthzPolicyAuthzRuleRequestResource: Conversion[List[Schema.AuthzPolicyAuthzRuleRequestResource], Option[List[Schema.AuthzPolicyAuthzRuleRequestResource]]] = (fun: List[Schema.AuthzPolicyAuthzRuleRequestResource]) => Option(fun)
		given putSchemaAuthzPolicyAuthzRuleRequestResourceTagValueIdSet: Conversion[Schema.AuthzPolicyAuthzRuleRequestResourceTagValueIdSet, Option[Schema.AuthzPolicyAuthzRuleRequestResourceTagValueIdSet]] = (fun: Schema.AuthzPolicyAuthzRuleRequestResourceTagValueIdSet) => Option(fun)
		given putSchemaAuthzPolicyAuthzRuleStringMatch: Conversion[Schema.AuthzPolicyAuthzRuleStringMatch, Option[Schema.AuthzPolicyAuthzRuleStringMatch]] = (fun: Schema.AuthzPolicyAuthzRuleStringMatch) => Option(fun)
		given putListSchemaAuthzPolicyAuthzRuleToRequestOperation: Conversion[List[Schema.AuthzPolicyAuthzRuleToRequestOperation], Option[List[Schema.AuthzPolicyAuthzRuleToRequestOperation]]] = (fun: List[Schema.AuthzPolicyAuthzRuleToRequestOperation]) => Option(fun)
		given putSchemaAuthzPolicyAuthzRuleToRequestOperationHeaderSet: Conversion[Schema.AuthzPolicyAuthzRuleToRequestOperationHeaderSet, Option[Schema.AuthzPolicyAuthzRuleToRequestOperationHeaderSet]] = (fun: Schema.AuthzPolicyAuthzRuleToRequestOperationHeaderSet) => Option(fun)
		given putListSchemaAuthzPolicyAuthzRuleHeaderMatch: Conversion[List[Schema.AuthzPolicyAuthzRuleHeaderMatch], Option[List[Schema.AuthzPolicyAuthzRuleHeaderMatch]]] = (fun: List[Schema.AuthzPolicyAuthzRuleHeaderMatch]) => Option(fun)
		given putSchemaAuthzPolicyCustomProviderCloudIap: Conversion[Schema.AuthzPolicyCustomProviderCloudIap, Option[Schema.AuthzPolicyCustomProviderCloudIap]] = (fun: Schema.AuthzPolicyCustomProviderCloudIap) => Option(fun)
		given putSchemaAuthzPolicyCustomProviderAuthzExtension: Conversion[Schema.AuthzPolicyCustomProviderAuthzExtension, Option[Schema.AuthzPolicyCustomProviderAuthzExtension]] = (fun: Schema.AuthzPolicyCustomProviderAuthzExtension) => Option(fun)
		given putListSchemaSecurityProfileGroup: Conversion[List[Schema.SecurityProfileGroup], Option[List[Schema.SecurityProfileGroup]]] = (fun: List[Schema.SecurityProfileGroup]) => Option(fun)
		given putListSchemaSecurityProfile: Conversion[List[Schema.SecurityProfile], Option[List[Schema.SecurityProfile]]] = (fun: List[Schema.SecurityProfile]) => Option(fun)
		given putSchemaThreatPreventionProfile: Conversion[Schema.ThreatPreventionProfile, Option[Schema.ThreatPreventionProfile]] = (fun: Schema.ThreatPreventionProfile) => Option(fun)
		given putSchemaCustomMirroringProfile: Conversion[Schema.CustomMirroringProfile, Option[Schema.CustomMirroringProfile]] = (fun: Schema.CustomMirroringProfile) => Option(fun)
		given putSchemaSecurityProfileTypeEnum: Conversion[Schema.SecurityProfile.TypeEnum, Option[Schema.SecurityProfile.TypeEnum]] = (fun: Schema.SecurityProfile.TypeEnum) => Option(fun)
		given putListSchemaSeverityOverride: Conversion[List[Schema.SeverityOverride], Option[List[Schema.SeverityOverride]]] = (fun: List[Schema.SeverityOverride]) => Option(fun)
		given putListSchemaThreatOverride: Conversion[List[Schema.ThreatOverride], Option[List[Schema.ThreatOverride]]] = (fun: List[Schema.ThreatOverride]) => Option(fun)
		given putSchemaSeverityOverrideSeverityEnum: Conversion[Schema.SeverityOverride.SeverityEnum, Option[Schema.SeverityOverride.SeverityEnum]] = (fun: Schema.SeverityOverride.SeverityEnum) => Option(fun)
		given putSchemaSeverityOverrideActionEnum: Conversion[Schema.SeverityOverride.ActionEnum, Option[Schema.SeverityOverride.ActionEnum]] = (fun: Schema.SeverityOverride.ActionEnum) => Option(fun)
		given putSchemaThreatOverrideTypeEnum: Conversion[Schema.ThreatOverride.TypeEnum, Option[Schema.ThreatOverride.TypeEnum]] = (fun: Schema.ThreatOverride.TypeEnum) => Option(fun)
		given putSchemaThreatOverrideActionEnum: Conversion[Schema.ThreatOverride.ActionEnum, Option[Schema.ThreatOverride.ActionEnum]] = (fun: Schema.ThreatOverride.ActionEnum) => Option(fun)
		given putListSchemaLocation: Conversion[List[Schema.Location], Option[List[Schema.Location]]] = (fun: List[Schema.Location]) => Option(fun)
		given putSchemaGoogleIamV1Policy: Conversion[Schema.GoogleIamV1Policy, Option[Schema.GoogleIamV1Policy]] = (fun: Schema.GoogleIamV1Policy) => Option(fun)
		given putListSchemaGoogleIamV1Binding: Conversion[List[Schema.GoogleIamV1Binding], Option[List[Schema.GoogleIamV1Binding]]] = (fun: List[Schema.GoogleIamV1Binding]) => Option(fun)
		given putListSchemaGoogleIamV1AuditConfig: Conversion[List[Schema.GoogleIamV1AuditConfig], Option[List[Schema.GoogleIamV1AuditConfig]]] = (fun: List[Schema.GoogleIamV1AuditConfig]) => Option(fun)
		given putSchemaExpr: Conversion[Schema.Expr, Option[Schema.Expr]] = (fun: Schema.Expr) => Option(fun)
		given putListSchemaGoogleIamV1AuditLogConfig: Conversion[List[Schema.GoogleIamV1AuditLogConfig], Option[List[Schema.GoogleIamV1AuditLogConfig]]] = (fun: List[Schema.GoogleIamV1AuditLogConfig]) => Option(fun)
		given putSchemaGoogleIamV1AuditLogConfigLogTypeEnum: Conversion[Schema.GoogleIamV1AuditLogConfig.LogTypeEnum, Option[Schema.GoogleIamV1AuditLogConfig.LogTypeEnum]] = (fun: Schema.GoogleIamV1AuditLogConfig.LogTypeEnum) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
