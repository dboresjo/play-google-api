package com.boresjo.play.api.google.analyticsdata

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putListSchemaDimension: Conversion[List[Schema.Dimension], Option[List[Schema.Dimension]]] = (fun: List[Schema.Dimension]) => Option(fun)
		given putListSchemaMetric: Conversion[List[Schema.Metric], Option[List[Schema.Metric]]] = (fun: List[Schema.Metric]) => Option(fun)
		given putListSchemaDateRange: Conversion[List[Schema.DateRange], Option[List[Schema.DateRange]]] = (fun: List[Schema.DateRange]) => Option(fun)
		given putSchemaFilterExpression: Conversion[Schema.FilterExpression, Option[Schema.FilterExpression]] = (fun: Schema.FilterExpression) => Option(fun)
		given putListSchemaRunReportRequestMetricAggregationsEnum: Conversion[List[Schema.RunReportRequest.MetricAggregationsEnum], Option[List[Schema.RunReportRequest.MetricAggregationsEnum]]] = (fun: List[Schema.RunReportRequest.MetricAggregationsEnum]) => Option(fun)
		given putListSchemaOrderBy: Conversion[List[Schema.OrderBy], Option[List[Schema.OrderBy]]] = (fun: List[Schema.OrderBy]) => Option(fun)
		given putSchemaCohortSpec: Conversion[Schema.CohortSpec, Option[Schema.CohortSpec]] = (fun: Schema.CohortSpec) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putListSchemaComparison: Conversion[List[Schema.Comparison], Option[List[Schema.Comparison]]] = (fun: List[Schema.Comparison]) => Option(fun)
		given putSchemaDimensionExpression: Conversion[Schema.DimensionExpression, Option[Schema.DimensionExpression]] = (fun: Schema.DimensionExpression) => Option(fun)
		given putSchemaCaseExpression: Conversion[Schema.CaseExpression, Option[Schema.CaseExpression]] = (fun: Schema.CaseExpression) => Option(fun)
		given putSchemaConcatenateExpression: Conversion[Schema.ConcatenateExpression, Option[Schema.ConcatenateExpression]] = (fun: Schema.ConcatenateExpression) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putSchemaFilterExpressionList: Conversion[Schema.FilterExpressionList, Option[Schema.FilterExpressionList]] = (fun: Schema.FilterExpressionList) => Option(fun)
		given putSchemaFilter: Conversion[Schema.Filter, Option[Schema.Filter]] = (fun: Schema.Filter) => Option(fun)
		given putListSchemaFilterExpression: Conversion[List[Schema.FilterExpression], Option[List[Schema.FilterExpression]]] = (fun: List[Schema.FilterExpression]) => Option(fun)
		given putSchemaStringFilter: Conversion[Schema.StringFilter, Option[Schema.StringFilter]] = (fun: Schema.StringFilter) => Option(fun)
		given putSchemaInListFilter: Conversion[Schema.InListFilter, Option[Schema.InListFilter]] = (fun: Schema.InListFilter) => Option(fun)
		given putSchemaNumericFilter: Conversion[Schema.NumericFilter, Option[Schema.NumericFilter]] = (fun: Schema.NumericFilter) => Option(fun)
		given putSchemaBetweenFilter: Conversion[Schema.BetweenFilter, Option[Schema.BetweenFilter]] = (fun: Schema.BetweenFilter) => Option(fun)
		given putSchemaStringFilterMatchTypeEnum: Conversion[Schema.StringFilter.MatchTypeEnum, Option[Schema.StringFilter.MatchTypeEnum]] = (fun: Schema.StringFilter.MatchTypeEnum) => Option(fun)
		given putSchemaNumericFilterOperationEnum: Conversion[Schema.NumericFilter.OperationEnum, Option[Schema.NumericFilter.OperationEnum]] = (fun: Schema.NumericFilter.OperationEnum) => Option(fun)
		given putSchemaNumericValue: Conversion[Schema.NumericValue, Option[Schema.NumericValue]] = (fun: Schema.NumericValue) => Option(fun)
		given putBigDecimal: Conversion[BigDecimal, Option[BigDecimal]] = (fun: BigDecimal) => Option(fun)
		given putSchemaMetricOrderBy: Conversion[Schema.MetricOrderBy, Option[Schema.MetricOrderBy]] = (fun: Schema.MetricOrderBy) => Option(fun)
		given putSchemaDimensionOrderBy: Conversion[Schema.DimensionOrderBy, Option[Schema.DimensionOrderBy]] = (fun: Schema.DimensionOrderBy) => Option(fun)
		given putSchemaPivotOrderBy: Conversion[Schema.PivotOrderBy, Option[Schema.PivotOrderBy]] = (fun: Schema.PivotOrderBy) => Option(fun)
		given putSchemaDimensionOrderByOrderTypeEnum: Conversion[Schema.DimensionOrderBy.OrderTypeEnum, Option[Schema.DimensionOrderBy.OrderTypeEnum]] = (fun: Schema.DimensionOrderBy.OrderTypeEnum) => Option(fun)
		given putListSchemaPivotSelection: Conversion[List[Schema.PivotSelection], Option[List[Schema.PivotSelection]]] = (fun: List[Schema.PivotSelection]) => Option(fun)
		given putListSchemaCohort: Conversion[List[Schema.Cohort], Option[List[Schema.Cohort]]] = (fun: List[Schema.Cohort]) => Option(fun)
		given putSchemaCohortsRange: Conversion[Schema.CohortsRange, Option[Schema.CohortsRange]] = (fun: Schema.CohortsRange) => Option(fun)
		given putSchemaCohortReportSettings: Conversion[Schema.CohortReportSettings, Option[Schema.CohortReportSettings]] = (fun: Schema.CohortReportSettings) => Option(fun)
		given putSchemaDateRange: Conversion[Schema.DateRange, Option[Schema.DateRange]] = (fun: Schema.DateRange) => Option(fun)
		given putSchemaCohortsRangeGranularityEnum: Conversion[Schema.CohortsRange.GranularityEnum, Option[Schema.CohortsRange.GranularityEnum]] = (fun: Schema.CohortsRange.GranularityEnum) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListSchemaDimensionHeader: Conversion[List[Schema.DimensionHeader], Option[List[Schema.DimensionHeader]]] = (fun: List[Schema.DimensionHeader]) => Option(fun)
		given putListSchemaMetricHeader: Conversion[List[Schema.MetricHeader], Option[List[Schema.MetricHeader]]] = (fun: List[Schema.MetricHeader]) => Option(fun)
		given putListSchemaRow: Conversion[List[Schema.Row], Option[List[Schema.Row]]] = (fun: List[Schema.Row]) => Option(fun)
		given putSchemaResponseMetaData: Conversion[Schema.ResponseMetaData, Option[Schema.ResponseMetaData]] = (fun: Schema.ResponseMetaData) => Option(fun)
		given putSchemaPropertyQuota: Conversion[Schema.PropertyQuota, Option[Schema.PropertyQuota]] = (fun: Schema.PropertyQuota) => Option(fun)
		given putSchemaMetricHeaderTypeEnum: Conversion[Schema.MetricHeader.TypeEnum, Option[Schema.MetricHeader.TypeEnum]] = (fun: Schema.MetricHeader.TypeEnum) => Option(fun)
		given putListSchemaDimensionValue: Conversion[List[Schema.DimensionValue], Option[List[Schema.DimensionValue]]] = (fun: List[Schema.DimensionValue]) => Option(fun)
		given putListSchemaMetricValue: Conversion[List[Schema.MetricValue], Option[List[Schema.MetricValue]]] = (fun: List[Schema.MetricValue]) => Option(fun)
		given putSchemaSchemaRestrictionResponse: Conversion[Schema.SchemaRestrictionResponse, Option[Schema.SchemaRestrictionResponse]] = (fun: Schema.SchemaRestrictionResponse) => Option(fun)
		given putListSchemaSamplingMetadata: Conversion[List[Schema.SamplingMetadata], Option[List[Schema.SamplingMetadata]]] = (fun: List[Schema.SamplingMetadata]) => Option(fun)
		given putListSchemaActiveMetricRestriction: Conversion[List[Schema.ActiveMetricRestriction], Option[List[Schema.ActiveMetricRestriction]]] = (fun: List[Schema.ActiveMetricRestriction]) => Option(fun)
		given putListSchemaActiveMetricRestrictionRestrictedMetricTypesEnum: Conversion[List[Schema.ActiveMetricRestriction.RestrictedMetricTypesEnum], Option[List[Schema.ActiveMetricRestriction.RestrictedMetricTypesEnum]]] = (fun: List[Schema.ActiveMetricRestriction.RestrictedMetricTypesEnum]) => Option(fun)
		given putSchemaQuotaStatus: Conversion[Schema.QuotaStatus, Option[Schema.QuotaStatus]] = (fun: Schema.QuotaStatus) => Option(fun)
		given putListSchemaPivot: Conversion[List[Schema.Pivot], Option[List[Schema.Pivot]]] = (fun: List[Schema.Pivot]) => Option(fun)
		given putListSchemaPivotMetricAggregationsEnum: Conversion[List[Schema.Pivot.MetricAggregationsEnum], Option[List[Schema.Pivot.MetricAggregationsEnum]]] = (fun: List[Schema.Pivot.MetricAggregationsEnum]) => Option(fun)
		given putListSchemaPivotHeader: Conversion[List[Schema.PivotHeader], Option[List[Schema.PivotHeader]]] = (fun: List[Schema.PivotHeader]) => Option(fun)
		given putListSchemaPivotDimensionHeader: Conversion[List[Schema.PivotDimensionHeader], Option[List[Schema.PivotDimensionHeader]]] = (fun: List[Schema.PivotDimensionHeader]) => Option(fun)
		given putListSchemaRunReportRequest: Conversion[List[Schema.RunReportRequest], Option[List[Schema.RunReportRequest]]] = (fun: List[Schema.RunReportRequest]) => Option(fun)
		given putListSchemaRunReportResponse: Conversion[List[Schema.RunReportResponse], Option[List[Schema.RunReportResponse]]] = (fun: List[Schema.RunReportResponse]) => Option(fun)
		given putListSchemaRunPivotReportRequest: Conversion[List[Schema.RunPivotReportRequest], Option[List[Schema.RunPivotReportRequest]]] = (fun: List[Schema.RunPivotReportRequest]) => Option(fun)
		given putListSchemaRunPivotReportResponse: Conversion[List[Schema.RunPivotReportResponse], Option[List[Schema.RunPivotReportResponse]]] = (fun: List[Schema.RunPivotReportResponse]) => Option(fun)
		given putListSchemaDimensionMetadata: Conversion[List[Schema.DimensionMetadata], Option[List[Schema.DimensionMetadata]]] = (fun: List[Schema.DimensionMetadata]) => Option(fun)
		given putListSchemaMetricMetadata: Conversion[List[Schema.MetricMetadata], Option[List[Schema.MetricMetadata]]] = (fun: List[Schema.MetricMetadata]) => Option(fun)
		given putListSchemaComparisonMetadata: Conversion[List[Schema.ComparisonMetadata], Option[List[Schema.ComparisonMetadata]]] = (fun: List[Schema.ComparisonMetadata]) => Option(fun)
		given putSchemaMetricMetadataTypeEnum: Conversion[Schema.MetricMetadata.TypeEnum, Option[Schema.MetricMetadata.TypeEnum]] = (fun: Schema.MetricMetadata.TypeEnum) => Option(fun)
		given putListSchemaMetricMetadataBlockedReasonsEnum: Conversion[List[Schema.MetricMetadata.BlockedReasonsEnum], Option[List[Schema.MetricMetadata.BlockedReasonsEnum]]] = (fun: List[Schema.MetricMetadata.BlockedReasonsEnum]) => Option(fun)
		given putListSchemaRunRealtimeReportRequestMetricAggregationsEnum: Conversion[List[Schema.RunRealtimeReportRequest.MetricAggregationsEnum], Option[List[Schema.RunRealtimeReportRequest.MetricAggregationsEnum]]] = (fun: List[Schema.RunRealtimeReportRequest.MetricAggregationsEnum]) => Option(fun)
		given putListSchemaMinuteRange: Conversion[List[Schema.MinuteRange], Option[List[Schema.MinuteRange]]] = (fun: List[Schema.MinuteRange]) => Option(fun)
		given putSchemaCheckCompatibilityRequestCompatibilityFilterEnum: Conversion[Schema.CheckCompatibilityRequest.CompatibilityFilterEnum, Option[Schema.CheckCompatibilityRequest.CompatibilityFilterEnum]] = (fun: Schema.CheckCompatibilityRequest.CompatibilityFilterEnum) => Option(fun)
		given putListSchemaDimensionCompatibility: Conversion[List[Schema.DimensionCompatibility], Option[List[Schema.DimensionCompatibility]]] = (fun: List[Schema.DimensionCompatibility]) => Option(fun)
		given putListSchemaMetricCompatibility: Conversion[List[Schema.MetricCompatibility], Option[List[Schema.MetricCompatibility]]] = (fun: List[Schema.MetricCompatibility]) => Option(fun)
		given putSchemaDimensionMetadata: Conversion[Schema.DimensionMetadata, Option[Schema.DimensionMetadata]] = (fun: Schema.DimensionMetadata) => Option(fun)
		given putSchemaDimensionCompatibilityCompatibilityEnum: Conversion[Schema.DimensionCompatibility.CompatibilityEnum, Option[Schema.DimensionCompatibility.CompatibilityEnum]] = (fun: Schema.DimensionCompatibility.CompatibilityEnum) => Option(fun)
		given putSchemaMetricMetadata: Conversion[Schema.MetricMetadata, Option[Schema.MetricMetadata]] = (fun: Schema.MetricMetadata) => Option(fun)
		given putSchemaMetricCompatibilityCompatibilityEnum: Conversion[Schema.MetricCompatibility.CompatibilityEnum, Option[Schema.MetricCompatibility.CompatibilityEnum]] = (fun: Schema.MetricCompatibility.CompatibilityEnum) => Option(fun)
		given putListSchemaV1betaAudienceDimension: Conversion[List[Schema.V1betaAudienceDimension], Option[List[Schema.V1betaAudienceDimension]]] = (fun: List[Schema.V1betaAudienceDimension]) => Option(fun)
		given putSchemaAudienceExportStateEnum: Conversion[Schema.AudienceExport.StateEnum, Option[Schema.AudienceExport.StateEnum]] = (fun: Schema.AudienceExport.StateEnum) => Option(fun)
		given putMapStringJsValue: Conversion[Map[String, JsValue], Option[Map[String, JsValue]]] = (fun: Map[String, JsValue]) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putSchemaAudienceExport: Conversion[Schema.AudienceExport, Option[Schema.AudienceExport]] = (fun: Schema.AudienceExport) => Option(fun)
		given putListSchemaV1betaAudienceRow: Conversion[List[Schema.V1betaAudienceRow], Option[List[Schema.V1betaAudienceRow]]] = (fun: List[Schema.V1betaAudienceRow]) => Option(fun)
		given putListSchemaV1betaAudienceDimensionValue: Conversion[List[Schema.V1betaAudienceDimensionValue], Option[List[Schema.V1betaAudienceDimensionValue]]] = (fun: List[Schema.V1betaAudienceDimensionValue]) => Option(fun)
		given putListSchemaAudienceExport: Conversion[List[Schema.AudienceExport], Option[List[Schema.AudienceExport]]] = (fun: List[Schema.AudienceExport]) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
