package com.boresjo.play.api.google.androidpublisher

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, AuthToken, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putSchemaUserAccessStateEnum: Conversion[Schema.User.AccessStateEnum, Option[Schema.User.AccessStateEnum]] = (fun: Schema.User.AccessStateEnum) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putListSchemaUserDeveloperAccountPermissionsEnum: Conversion[List[Schema.User.DeveloperAccountPermissionsEnum], Option[List[Schema.User.DeveloperAccountPermissionsEnum]]] = (fun: List[Schema.User.DeveloperAccountPermissionsEnum]) => Option(fun)
		given putListSchemaGrant: Conversion[List[Schema.Grant], Option[List[Schema.Grant]]] = (fun: List[Schema.Grant]) => Option(fun)
		given putListSchemaGrantAppLevelPermissionsEnum: Conversion[List[Schema.Grant.AppLevelPermissionsEnum], Option[List[Schema.Grant.AppLevelPermissionsEnum]]] = (fun: List[Schema.Grant.AppLevelPermissionsEnum]) => Option(fun)
		given putListSchemaUser: Conversion[List[Schema.User], Option[List[Schema.User]]] = (fun: List[Schema.User]) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putSchemaApkBinary: Conversion[Schema.ApkBinary, Option[Schema.ApkBinary]] = (fun: Schema.ApkBinary) => Option(fun)
		given putListSchemaApk: Conversion[List[Schema.Apk], Option[List[Schema.Apk]]] = (fun: List[Schema.Apk]) => Option(fun)
		given putSchemaExternallyHostedApk: Conversion[Schema.ExternallyHostedApk, Option[Schema.ExternallyHostedApk]] = (fun: Schema.ExternallyHostedApk) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putListSchemaUsesPermission: Conversion[List[Schema.UsesPermission], Option[List[Schema.UsesPermission]]] = (fun: List[Schema.UsesPermission]) => Option(fun)
		given putSchemaTargeting: Conversion[Schema.Targeting, Option[Schema.Targeting]] = (fun: Schema.Targeting) => Option(fun)
		given putSchemaRemoteInAppUpdate: Conversion[Schema.RemoteInAppUpdate, Option[Schema.RemoteInAppUpdate]] = (fun: Schema.RemoteInAppUpdate) => Option(fun)
		given putSchemaRegions: Conversion[Schema.Regions, Option[Schema.Regions]] = (fun: Schema.Regions) => Option(fun)
		given putSchemaAndroidSdks: Conversion[Schema.AndroidSdks, Option[Schema.AndroidSdks]] = (fun: Schema.AndroidSdks) => Option(fun)
		given putSchemaAllUsers: Conversion[Schema.AllUsers, Option[Schema.AllUsers]] = (fun: Schema.AllUsers) => Option(fun)
		given putSchemaAppVersionList: Conversion[Schema.AppVersionList, Option[Schema.AppVersionList]] = (fun: Schema.AppVersionList) => Option(fun)
		given putSchemaAppVersionRange: Conversion[Schema.AppVersionRange, Option[Schema.AppVersionRange]] = (fun: Schema.AppVersionRange) => Option(fun)
		given putSchemaAppRecoveryActionStatusEnum: Conversion[Schema.AppRecoveryAction.StatusEnum, Option[Schema.AppRecoveryAction.StatusEnum]] = (fun: Schema.AppRecoveryAction.StatusEnum) => Option(fun)
		given putSchemaRemoteInAppUpdateData: Conversion[Schema.RemoteInAppUpdateData, Option[Schema.RemoteInAppUpdateData]] = (fun: Schema.RemoteInAppUpdateData) => Option(fun)
		given putListSchemaRemoteInAppUpdateDataPerBundle: Conversion[List[Schema.RemoteInAppUpdateDataPerBundle], Option[List[Schema.RemoteInAppUpdateDataPerBundle]]] = (fun: List[Schema.RemoteInAppUpdateDataPerBundle]) => Option(fun)
		given putListSchemaAppRecoveryAction: Conversion[List[Schema.AppRecoveryAction], Option[List[Schema.AppRecoveryAction]]] = (fun: List[Schema.AppRecoveryAction]) => Option(fun)
		given putSchemaTargetingUpdate: Conversion[Schema.TargetingUpdate, Option[Schema.TargetingUpdate]] = (fun: Schema.TargetingUpdate) => Option(fun)
		given putListSchemaBundle: Conversion[List[Schema.Bundle], Option[List[Schema.Bundle]]] = (fun: List[Schema.Bundle]) => Option(fun)
		given putListSchemaTrackTargetedCountry: Conversion[List[Schema.TrackTargetedCountry], Option[List[Schema.TrackTargetedCountry]]] = (fun: List[Schema.TrackTargetedCountry]) => Option(fun)
		given putSchemaDeobfuscationFile: Conversion[Schema.DeobfuscationFile, Option[Schema.DeobfuscationFile]] = (fun: Schema.DeobfuscationFile) => Option(fun)
		given putSchemaDeobfuscationFileSymbolTypeEnum: Conversion[Schema.DeobfuscationFile.SymbolTypeEnum, Option[Schema.DeobfuscationFile.SymbolTypeEnum]] = (fun: Schema.DeobfuscationFile.SymbolTypeEnum) => Option(fun)
		given putListSchemaDeviceGroup: Conversion[List[Schema.DeviceGroup], Option[List[Schema.DeviceGroup]]] = (fun: List[Schema.DeviceGroup]) => Option(fun)
		given putSchemaDeviceTierSet: Conversion[Schema.DeviceTierSet, Option[Schema.DeviceTierSet]] = (fun: Schema.DeviceTierSet) => Option(fun)
		given putListSchemaUserCountrySet: Conversion[List[Schema.UserCountrySet], Option[List[Schema.UserCountrySet]]] = (fun: List[Schema.UserCountrySet]) => Option(fun)
		given putListSchemaDeviceSelector: Conversion[List[Schema.DeviceSelector], Option[List[Schema.DeviceSelector]]] = (fun: List[Schema.DeviceSelector]) => Option(fun)
		given putSchemaDeviceRam: Conversion[Schema.DeviceRam, Option[Schema.DeviceRam]] = (fun: Schema.DeviceRam) => Option(fun)
		given putListSchemaDeviceId: Conversion[List[Schema.DeviceId], Option[List[Schema.DeviceId]]] = (fun: List[Schema.DeviceId]) => Option(fun)
		given putListSchemaSystemFeature: Conversion[List[Schema.SystemFeature], Option[List[Schema.SystemFeature]]] = (fun: List[Schema.SystemFeature]) => Option(fun)
		given putListSchemaSystemOnChip: Conversion[List[Schema.SystemOnChip], Option[List[Schema.SystemOnChip]]] = (fun: List[Schema.SystemOnChip]) => Option(fun)
		given putListSchemaDeviceTier: Conversion[List[Schema.DeviceTier], Option[List[Schema.DeviceTier]]] = (fun: List[Schema.DeviceTier]) => Option(fun)
		given putListSchemaDeviceTierConfig: Conversion[List[Schema.DeviceTierConfig], Option[List[Schema.DeviceTierConfig]]] = (fun: List[Schema.DeviceTierConfig]) => Option(fun)
		given putSchemaExpansionFile: Conversion[Schema.ExpansionFile, Option[Schema.ExpansionFile]] = (fun: Schema.ExpansionFile) => Option(fun)
		given putSchemaPrice: Conversion[Schema.Price, Option[Schema.Price]] = (fun: Schema.Price) => Option(fun)
		given putSchemaExternalTransactionTestPurchase: Conversion[Schema.ExternalTransactionTestPurchase, Option[Schema.ExternalTransactionTestPurchase]] = (fun: Schema.ExternalTransactionTestPurchase) => Option(fun)
		given putSchemaOneTimeExternalTransaction: Conversion[Schema.OneTimeExternalTransaction, Option[Schema.OneTimeExternalTransaction]] = (fun: Schema.OneTimeExternalTransaction) => Option(fun)
		given putSchemaRecurringExternalTransaction: Conversion[Schema.RecurringExternalTransaction, Option[Schema.RecurringExternalTransaction]] = (fun: Schema.RecurringExternalTransaction) => Option(fun)
		given putSchemaExternalTransactionTransactionStateEnum: Conversion[Schema.ExternalTransaction.TransactionStateEnum, Option[Schema.ExternalTransaction.TransactionStateEnum]] = (fun: Schema.ExternalTransaction.TransactionStateEnum) => Option(fun)
		given putSchemaExternalTransactionAddress: Conversion[Schema.ExternalTransactionAddress, Option[Schema.ExternalTransactionAddress]] = (fun: Schema.ExternalTransactionAddress) => Option(fun)
		given putSchemaRecurringExternalTransactionMigratedTransactionProgramEnum: Conversion[Schema.RecurringExternalTransaction.MigratedTransactionProgramEnum, Option[Schema.RecurringExternalTransaction.MigratedTransactionProgramEnum]] = (fun: Schema.RecurringExternalTransaction.MigratedTransactionProgramEnum) => Option(fun)
		given putSchemaExternalSubscription: Conversion[Schema.ExternalSubscription, Option[Schema.ExternalSubscription]] = (fun: Schema.ExternalSubscription) => Option(fun)
		given putSchemaOtherRecurringProduct: Conversion[Schema.OtherRecurringProduct, Option[Schema.OtherRecurringProduct]] = (fun: Schema.OtherRecurringProduct) => Option(fun)
		given putSchemaExternalSubscriptionSubscriptionTypeEnum: Conversion[Schema.ExternalSubscription.SubscriptionTypeEnum, Option[Schema.ExternalSubscription.SubscriptionTypeEnum]] = (fun: Schema.ExternalSubscription.SubscriptionTypeEnum) => Option(fun)
		given putSchemaPartialRefund: Conversion[Schema.PartialRefund, Option[Schema.PartialRefund]] = (fun: Schema.PartialRefund) => Option(fun)
		given putSchemaFullRefund: Conversion[Schema.FullRefund, Option[Schema.FullRefund]] = (fun: Schema.FullRefund) => Option(fun)
		given putListSchemaGeneratedApksPerSigningKey: Conversion[List[Schema.GeneratedApksPerSigningKey], Option[List[Schema.GeneratedApksPerSigningKey]]] = (fun: List[Schema.GeneratedApksPerSigningKey]) => Option(fun)
		given putListSchemaGeneratedSplitApk: Conversion[List[Schema.GeneratedSplitApk], Option[List[Schema.GeneratedSplitApk]]] = (fun: List[Schema.GeneratedSplitApk]) => Option(fun)
		given putListSchemaGeneratedAssetPackSlice: Conversion[List[Schema.GeneratedAssetPackSlice], Option[List[Schema.GeneratedAssetPackSlice]]] = (fun: List[Schema.GeneratedAssetPackSlice]) => Option(fun)
		given putListSchemaGeneratedStandaloneApk: Conversion[List[Schema.GeneratedStandaloneApk], Option[List[Schema.GeneratedStandaloneApk]]] = (fun: List[Schema.GeneratedStandaloneApk]) => Option(fun)
		given putSchemaGeneratedUniversalApk: Conversion[Schema.GeneratedUniversalApk, Option[Schema.GeneratedUniversalApk]] = (fun: Schema.GeneratedUniversalApk) => Option(fun)
		given putListSchemaGeneratedRecoveryApk: Conversion[List[Schema.GeneratedRecoveryApk], Option[List[Schema.GeneratedRecoveryApk]]] = (fun: List[Schema.GeneratedRecoveryApk]) => Option(fun)
		given putSchemaTargetingInfo: Conversion[Schema.TargetingInfo, Option[Schema.TargetingInfo]] = (fun: Schema.TargetingInfo) => Option(fun)
		given putSchemaGeneratedRecoveryApkRecoveryStatusEnum: Conversion[Schema.GeneratedRecoveryApk.RecoveryStatusEnum, Option[Schema.GeneratedRecoveryApk.RecoveryStatusEnum]] = (fun: Schema.GeneratedRecoveryApk.RecoveryStatusEnum) => Option(fun)
		given putListSchemaSplitApkVariant: Conversion[List[Schema.SplitApkVariant], Option[List[Schema.SplitApkVariant]]] = (fun: List[Schema.SplitApkVariant]) => Option(fun)
		given putListSchemaAssetSliceSet: Conversion[List[Schema.AssetSliceSet], Option[List[Schema.AssetSliceSet]]] = (fun: List[Schema.AssetSliceSet]) => Option(fun)
		given putSchemaVariantTargeting: Conversion[Schema.VariantTargeting, Option[Schema.VariantTargeting]] = (fun: Schema.VariantTargeting) => Option(fun)
		given putListSchemaApkSet: Conversion[List[Schema.ApkSet], Option[List[Schema.ApkSet]]] = (fun: List[Schema.ApkSet]) => Option(fun)
		given putSchemaSdkVersionTargeting: Conversion[Schema.SdkVersionTargeting, Option[Schema.SdkVersionTargeting]] = (fun: Schema.SdkVersionTargeting) => Option(fun)
		given putSchemaAbiTargeting: Conversion[Schema.AbiTargeting, Option[Schema.AbiTargeting]] = (fun: Schema.AbiTargeting) => Option(fun)
		given putSchemaScreenDensityTargeting: Conversion[Schema.ScreenDensityTargeting, Option[Schema.ScreenDensityTargeting]] = (fun: Schema.ScreenDensityTargeting) => Option(fun)
		given putSchemaMultiAbiTargeting: Conversion[Schema.MultiAbiTargeting, Option[Schema.MultiAbiTargeting]] = (fun: Schema.MultiAbiTargeting) => Option(fun)
		given putSchemaTextureCompressionFormatTargeting: Conversion[Schema.TextureCompressionFormatTargeting, Option[Schema.TextureCompressionFormatTargeting]] = (fun: Schema.TextureCompressionFormatTargeting) => Option(fun)
		given putListSchemaSdkVersion: Conversion[List[Schema.SdkVersion], Option[List[Schema.SdkVersion]]] = (fun: List[Schema.SdkVersion]) => Option(fun)
		given putListSchemaAbi: Conversion[List[Schema.Abi], Option[List[Schema.Abi]]] = (fun: List[Schema.Abi]) => Option(fun)
		given putSchemaAbiAliasEnum: Conversion[Schema.Abi.AliasEnum, Option[Schema.Abi.AliasEnum]] = (fun: Schema.Abi.AliasEnum) => Option(fun)
		given putListSchemaScreenDensity: Conversion[List[Schema.ScreenDensity], Option[List[Schema.ScreenDensity]]] = (fun: List[Schema.ScreenDensity]) => Option(fun)
		given putSchemaScreenDensityDensityAliasEnum: Conversion[Schema.ScreenDensity.DensityAliasEnum, Option[Schema.ScreenDensity.DensityAliasEnum]] = (fun: Schema.ScreenDensity.DensityAliasEnum) => Option(fun)
		given putListSchemaMultiAbi: Conversion[List[Schema.MultiAbi], Option[List[Schema.MultiAbi]]] = (fun: List[Schema.MultiAbi]) => Option(fun)
		given putListSchemaTextureCompressionFormat: Conversion[List[Schema.TextureCompressionFormat], Option[List[Schema.TextureCompressionFormat]]] = (fun: List[Schema.TextureCompressionFormat]) => Option(fun)
		given putSchemaTextureCompressionFormatAliasEnum: Conversion[Schema.TextureCompressionFormat.AliasEnum, Option[Schema.TextureCompressionFormat.AliasEnum]] = (fun: Schema.TextureCompressionFormat.AliasEnum) => Option(fun)
		given putSchemaModuleMetadata: Conversion[Schema.ModuleMetadata, Option[Schema.ModuleMetadata]] = (fun: Schema.ModuleMetadata) => Option(fun)
		given putListSchemaApkDescription: Conversion[List[Schema.ApkDescription], Option[List[Schema.ApkDescription]]] = (fun: List[Schema.ApkDescription]) => Option(fun)
		given putSchemaModuleMetadataModuleTypeEnum: Conversion[Schema.ModuleMetadata.ModuleTypeEnum, Option[Schema.ModuleMetadata.ModuleTypeEnum]] = (fun: Schema.ModuleMetadata.ModuleTypeEnum) => Option(fun)
		given putSchemaModuleMetadataDeliveryTypeEnum: Conversion[Schema.ModuleMetadata.DeliveryTypeEnum, Option[Schema.ModuleMetadata.DeliveryTypeEnum]] = (fun: Schema.ModuleMetadata.DeliveryTypeEnum) => Option(fun)
		given putSchemaModuleTargeting: Conversion[Schema.ModuleTargeting, Option[Schema.ModuleTargeting]] = (fun: Schema.ModuleTargeting) => Option(fun)
		given putListSchemaDeviceFeatureTargeting: Conversion[List[Schema.DeviceFeatureTargeting], Option[List[Schema.DeviceFeatureTargeting]]] = (fun: List[Schema.DeviceFeatureTargeting]) => Option(fun)
		given putSchemaUserCountriesTargeting: Conversion[Schema.UserCountriesTargeting, Option[Schema.UserCountriesTargeting]] = (fun: Schema.UserCountriesTargeting) => Option(fun)
		given putSchemaDeviceFeature: Conversion[Schema.DeviceFeature, Option[Schema.DeviceFeature]] = (fun: Schema.DeviceFeature) => Option(fun)
		given putSchemaApkTargeting: Conversion[Schema.ApkTargeting, Option[Schema.ApkTargeting]] = (fun: Schema.ApkTargeting) => Option(fun)
		given putSchemaSplitApkMetadata: Conversion[Schema.SplitApkMetadata, Option[Schema.SplitApkMetadata]] = (fun: Schema.SplitApkMetadata) => Option(fun)
		given putSchemaStandaloneApkMetadata: Conversion[Schema.StandaloneApkMetadata, Option[Schema.StandaloneApkMetadata]] = (fun: Schema.StandaloneApkMetadata) => Option(fun)
		given putSchemaLanguageTargeting: Conversion[Schema.LanguageTargeting, Option[Schema.LanguageTargeting]] = (fun: Schema.LanguageTargeting) => Option(fun)
		given putSchemaAssetModuleMetadata: Conversion[Schema.AssetModuleMetadata, Option[Schema.AssetModuleMetadata]] = (fun: Schema.AssetModuleMetadata) => Option(fun)
		given putSchemaAssetModuleMetadataDeliveryTypeEnum: Conversion[Schema.AssetModuleMetadata.DeliveryTypeEnum, Option[Schema.AssetModuleMetadata.DeliveryTypeEnum]] = (fun: Schema.AssetModuleMetadata.DeliveryTypeEnum) => Option(fun)
		given putListSchemaImage: Conversion[List[Schema.Image], Option[List[Schema.Image]]] = (fun: List[Schema.Image]) => Option(fun)
		given putSchemaImage: Conversion[Schema.Image, Option[Schema.Image]] = (fun: Schema.Image) => Option(fun)
		given putSchemaInAppProductStatusEnum: Conversion[Schema.InAppProduct.StatusEnum, Option[Schema.InAppProduct.StatusEnum]] = (fun: Schema.InAppProduct.StatusEnum) => Option(fun)
		given putSchemaInAppProductPurchaseTypeEnum: Conversion[Schema.InAppProduct.PurchaseTypeEnum, Option[Schema.InAppProduct.PurchaseTypeEnum]] = (fun: Schema.InAppProduct.PurchaseTypeEnum) => Option(fun)
		given putMapStringSchemaPrice: Conversion[Map[String, Schema.Price], Option[Map[String, Schema.Price]]] = (fun: Map[String, Schema.Price]) => Option(fun)
		given putMapStringSchemaInAppProductListing: Conversion[Map[String, Schema.InAppProductListing], Option[Map[String, Schema.InAppProductListing]]] = (fun: Map[String, Schema.InAppProductListing]) => Option(fun)
		given putSchemaSubscriptionTaxAndComplianceSettings: Conversion[Schema.SubscriptionTaxAndComplianceSettings, Option[Schema.SubscriptionTaxAndComplianceSettings]] = (fun: Schema.SubscriptionTaxAndComplianceSettings) => Option(fun)
		given putSchemaManagedProductTaxAndComplianceSettings: Conversion[Schema.ManagedProductTaxAndComplianceSettings, Option[Schema.ManagedProductTaxAndComplianceSettings]] = (fun: Schema.ManagedProductTaxAndComplianceSettings) => Option(fun)
		given putSchemaSubscriptionTaxAndComplianceSettingsEeaWithdrawalRightTypeEnum: Conversion[Schema.SubscriptionTaxAndComplianceSettings.EeaWithdrawalRightTypeEnum, Option[Schema.SubscriptionTaxAndComplianceSettings.EeaWithdrawalRightTypeEnum]] = (fun: Schema.SubscriptionTaxAndComplianceSettings.EeaWithdrawalRightTypeEnum) => Option(fun)
		given putMapStringSchemaRegionalTaxRateInfo: Conversion[Map[String, Schema.RegionalTaxRateInfo], Option[Map[String, Schema.RegionalTaxRateInfo]]] = (fun: Map[String, Schema.RegionalTaxRateInfo]) => Option(fun)
		given putSchemaRegionalTaxRateInfoTaxTierEnum: Conversion[Schema.RegionalTaxRateInfo.TaxTierEnum, Option[Schema.RegionalTaxRateInfo.TaxTierEnum]] = (fun: Schema.RegionalTaxRateInfo.TaxTierEnum) => Option(fun)
		given putSchemaRegionalTaxRateInfoStreamingTaxTypeEnum: Conversion[Schema.RegionalTaxRateInfo.StreamingTaxTypeEnum, Option[Schema.RegionalTaxRateInfo.StreamingTaxTypeEnum]] = (fun: Schema.RegionalTaxRateInfo.StreamingTaxTypeEnum) => Option(fun)
		given putSchemaManagedProductTaxAndComplianceSettingsEeaWithdrawalRightTypeEnum: Conversion[Schema.ManagedProductTaxAndComplianceSettings.EeaWithdrawalRightTypeEnum, Option[Schema.ManagedProductTaxAndComplianceSettings.EeaWithdrawalRightTypeEnum]] = (fun: Schema.ManagedProductTaxAndComplianceSettings.EeaWithdrawalRightTypeEnum) => Option(fun)
		given putListSchemaInAppProduct: Conversion[List[Schema.InAppProduct], Option[List[Schema.InAppProduct]]] = (fun: List[Schema.InAppProduct]) => Option(fun)
		given putSchemaTokenPagination: Conversion[Schema.TokenPagination, Option[Schema.TokenPagination]] = (fun: Schema.TokenPagination) => Option(fun)
		given putSchemaPageInfo: Conversion[Schema.PageInfo, Option[Schema.PageInfo]] = (fun: Schema.PageInfo) => Option(fun)
		given putListSchemaInappproductsUpdateRequest: Conversion[List[Schema.InappproductsUpdateRequest], Option[List[Schema.InappproductsUpdateRequest]]] = (fun: List[Schema.InappproductsUpdateRequest]) => Option(fun)
		given putSchemaInAppProduct: Conversion[Schema.InAppProduct, Option[Schema.InAppProduct]] = (fun: Schema.InAppProduct) => Option(fun)
		given putSchemaInappproductsUpdateRequestLatencyToleranceEnum: Conversion[Schema.InappproductsUpdateRequest.LatencyToleranceEnum, Option[Schema.InappproductsUpdateRequest.LatencyToleranceEnum]] = (fun: Schema.InappproductsUpdateRequest.LatencyToleranceEnum) => Option(fun)
		given putListSchemaInappproductsDeleteRequest: Conversion[List[Schema.InappproductsDeleteRequest], Option[List[Schema.InappproductsDeleteRequest]]] = (fun: List[Schema.InappproductsDeleteRequest]) => Option(fun)
		given putSchemaInappproductsDeleteRequestLatencyToleranceEnum: Conversion[Schema.InappproductsDeleteRequest.LatencyToleranceEnum, Option[Schema.InappproductsDeleteRequest.LatencyToleranceEnum]] = (fun: Schema.InappproductsDeleteRequest.LatencyToleranceEnum) => Option(fun)
		given putListSchemaListing: Conversion[List[Schema.Listing], Option[List[Schema.Listing]]] = (fun: List[Schema.Listing]) => Option(fun)
		given putSchemaMoney: Conversion[Schema.Money, Option[Schema.Money]] = (fun: Schema.Money) => Option(fun)
		given putMapStringSchemaConvertedRegionPrice: Conversion[Map[String, Schema.ConvertedRegionPrice], Option[Map[String, Schema.ConvertedRegionPrice]]] = (fun: Map[String, Schema.ConvertedRegionPrice]) => Option(fun)
		given putSchemaConvertedOtherRegionsPrice: Conversion[Schema.ConvertedOtherRegionsPrice, Option[Schema.ConvertedOtherRegionsPrice]] = (fun: Schema.ConvertedOtherRegionsPrice) => Option(fun)
		given putListSchemaComment: Conversion[List[Schema.Comment], Option[List[Schema.Comment]]] = (fun: List[Schema.Comment]) => Option(fun)
		given putSchemaUserComment: Conversion[Schema.UserComment, Option[Schema.UserComment]] = (fun: Schema.UserComment) => Option(fun)
		given putSchemaDeveloperComment: Conversion[Schema.DeveloperComment, Option[Schema.DeveloperComment]] = (fun: Schema.DeveloperComment) => Option(fun)
		given putSchemaTimestamp: Conversion[Schema.Timestamp, Option[Schema.Timestamp]] = (fun: Schema.Timestamp) => Option(fun)
		given putSchemaDeviceMetadata: Conversion[Schema.DeviceMetadata, Option[Schema.DeviceMetadata]] = (fun: Schema.DeviceMetadata) => Option(fun)
		given putListSchemaReview: Conversion[List[Schema.Review], Option[List[Schema.Review]]] = (fun: List[Schema.Review]) => Option(fun)
		given putSchemaReviewReplyResult: Conversion[Schema.ReviewReplyResult, Option[Schema.ReviewReplyResult]] = (fun: Schema.ReviewReplyResult) => Option(fun)
		given putSchemaIntroductoryPriceInfo: Conversion[Schema.IntroductoryPriceInfo, Option[Schema.IntroductoryPriceInfo]] = (fun: Schema.IntroductoryPriceInfo) => Option(fun)
		given putSchemaSubscriptionCancelSurveyResult: Conversion[Schema.SubscriptionCancelSurveyResult, Option[Schema.SubscriptionCancelSurveyResult]] = (fun: Schema.SubscriptionCancelSurveyResult) => Option(fun)
		given putSchemaSubscriptionPriceChange: Conversion[Schema.SubscriptionPriceChange, Option[Schema.SubscriptionPriceChange]] = (fun: Schema.SubscriptionPriceChange) => Option(fun)
		given putSchemaSubscriptionDeferralInfo: Conversion[Schema.SubscriptionDeferralInfo, Option[Schema.SubscriptionDeferralInfo]] = (fun: Schema.SubscriptionDeferralInfo) => Option(fun)
		given putSchemaSubscriptionPurchaseV2SubscriptionStateEnum: Conversion[Schema.SubscriptionPurchaseV2.SubscriptionStateEnum, Option[Schema.SubscriptionPurchaseV2.SubscriptionStateEnum]] = (fun: Schema.SubscriptionPurchaseV2.SubscriptionStateEnum) => Option(fun)
		given putSchemaPausedStateContext: Conversion[Schema.PausedStateContext, Option[Schema.PausedStateContext]] = (fun: Schema.PausedStateContext) => Option(fun)
		given putSchemaCanceledStateContext: Conversion[Schema.CanceledStateContext, Option[Schema.CanceledStateContext]] = (fun: Schema.CanceledStateContext) => Option(fun)
		given putSchemaTestPurchase: Conversion[Schema.TestPurchase, Option[Schema.TestPurchase]] = (fun: Schema.TestPurchase) => Option(fun)
		given putSchemaSubscriptionPurchaseV2AcknowledgementStateEnum: Conversion[Schema.SubscriptionPurchaseV2.AcknowledgementStateEnum, Option[Schema.SubscriptionPurchaseV2.AcknowledgementStateEnum]] = (fun: Schema.SubscriptionPurchaseV2.AcknowledgementStateEnum) => Option(fun)
		given putSchemaExternalAccountIdentifiers: Conversion[Schema.ExternalAccountIdentifiers, Option[Schema.ExternalAccountIdentifiers]] = (fun: Schema.ExternalAccountIdentifiers) => Option(fun)
		given putSchemaSubscribeWithGoogleInfo: Conversion[Schema.SubscribeWithGoogleInfo, Option[Schema.SubscribeWithGoogleInfo]] = (fun: Schema.SubscribeWithGoogleInfo) => Option(fun)
		given putListSchemaSubscriptionPurchaseLineItem: Conversion[List[Schema.SubscriptionPurchaseLineItem], Option[List[Schema.SubscriptionPurchaseLineItem]]] = (fun: List[Schema.SubscriptionPurchaseLineItem]) => Option(fun)
		given putSchemaUserInitiatedCancellation: Conversion[Schema.UserInitiatedCancellation, Option[Schema.UserInitiatedCancellation]] = (fun: Schema.UserInitiatedCancellation) => Option(fun)
		given putSchemaSystemInitiatedCancellation: Conversion[Schema.SystemInitiatedCancellation, Option[Schema.SystemInitiatedCancellation]] = (fun: Schema.SystemInitiatedCancellation) => Option(fun)
		given putSchemaDeveloperInitiatedCancellation: Conversion[Schema.DeveloperInitiatedCancellation, Option[Schema.DeveloperInitiatedCancellation]] = (fun: Schema.DeveloperInitiatedCancellation) => Option(fun)
		given putSchemaReplacementCancellation: Conversion[Schema.ReplacementCancellation, Option[Schema.ReplacementCancellation]] = (fun: Schema.ReplacementCancellation) => Option(fun)
		given putSchemaCancelSurveyResult: Conversion[Schema.CancelSurveyResult, Option[Schema.CancelSurveyResult]] = (fun: Schema.CancelSurveyResult) => Option(fun)
		given putSchemaCancelSurveyResultReasonEnum: Conversion[Schema.CancelSurveyResult.ReasonEnum, Option[Schema.CancelSurveyResult.ReasonEnum]] = (fun: Schema.CancelSurveyResult.ReasonEnum) => Option(fun)
		given putSchemaAutoRenewingPlan: Conversion[Schema.AutoRenewingPlan, Option[Schema.AutoRenewingPlan]] = (fun: Schema.AutoRenewingPlan) => Option(fun)
		given putSchemaPrepaidPlan: Conversion[Schema.PrepaidPlan, Option[Schema.PrepaidPlan]] = (fun: Schema.PrepaidPlan) => Option(fun)
		given putSchemaOfferDetails: Conversion[Schema.OfferDetails, Option[Schema.OfferDetails]] = (fun: Schema.OfferDetails) => Option(fun)
		given putSchemaDeferredItemReplacement: Conversion[Schema.DeferredItemReplacement, Option[Schema.DeferredItemReplacement]] = (fun: Schema.DeferredItemReplacement) => Option(fun)
		given putSchemaSubscriptionItemPriceChangeDetails: Conversion[Schema.SubscriptionItemPriceChangeDetails, Option[Schema.SubscriptionItemPriceChangeDetails]] = (fun: Schema.SubscriptionItemPriceChangeDetails) => Option(fun)
		given putSchemaInstallmentPlan: Conversion[Schema.InstallmentPlan, Option[Schema.InstallmentPlan]] = (fun: Schema.InstallmentPlan) => Option(fun)
		given putSchemaSubscriptionItemPriceChangeDetailsPriceChangeModeEnum: Conversion[Schema.SubscriptionItemPriceChangeDetails.PriceChangeModeEnum, Option[Schema.SubscriptionItemPriceChangeDetails.PriceChangeModeEnum]] = (fun: Schema.SubscriptionItemPriceChangeDetails.PriceChangeModeEnum) => Option(fun)
		given putSchemaSubscriptionItemPriceChangeDetailsPriceChangeStateEnum: Conversion[Schema.SubscriptionItemPriceChangeDetails.PriceChangeStateEnum, Option[Schema.SubscriptionItemPriceChangeDetails.PriceChangeStateEnum]] = (fun: Schema.SubscriptionItemPriceChangeDetails.PriceChangeStateEnum) => Option(fun)
		given putSchemaPendingCancellation: Conversion[Schema.PendingCancellation, Option[Schema.PendingCancellation]] = (fun: Schema.PendingCancellation) => Option(fun)
		given putSchemaRevocationContext: Conversion[Schema.RevocationContext, Option[Schema.RevocationContext]] = (fun: Schema.RevocationContext) => Option(fun)
		given putSchemaRevocationContextFullRefund: Conversion[Schema.RevocationContextFullRefund, Option[Schema.RevocationContextFullRefund]] = (fun: Schema.RevocationContextFullRefund) => Option(fun)
		given putSchemaRevocationContextProratedRefund: Conversion[Schema.RevocationContextProratedRefund, Option[Schema.RevocationContextProratedRefund]] = (fun: Schema.RevocationContextProratedRefund) => Option(fun)
		given putListSchemaBasePlan: Conversion[List[Schema.BasePlan], Option[List[Schema.BasePlan]]] = (fun: List[Schema.BasePlan]) => Option(fun)
		given putListSchemaSubscriptionListing: Conversion[List[Schema.SubscriptionListing], Option[List[Schema.SubscriptionListing]]] = (fun: List[Schema.SubscriptionListing]) => Option(fun)
		given putSchemaRestrictedPaymentCountries: Conversion[Schema.RestrictedPaymentCountries, Option[Schema.RestrictedPaymentCountries]] = (fun: Schema.RestrictedPaymentCountries) => Option(fun)
		given putSchemaBasePlanStateEnum: Conversion[Schema.BasePlan.StateEnum, Option[Schema.BasePlan.StateEnum]] = (fun: Schema.BasePlan.StateEnum) => Option(fun)
		given putSchemaAutoRenewingBasePlanType: Conversion[Schema.AutoRenewingBasePlanType, Option[Schema.AutoRenewingBasePlanType]] = (fun: Schema.AutoRenewingBasePlanType) => Option(fun)
		given putSchemaPrepaidBasePlanType: Conversion[Schema.PrepaidBasePlanType, Option[Schema.PrepaidBasePlanType]] = (fun: Schema.PrepaidBasePlanType) => Option(fun)
		given putSchemaInstallmentsBasePlanType: Conversion[Schema.InstallmentsBasePlanType, Option[Schema.InstallmentsBasePlanType]] = (fun: Schema.InstallmentsBasePlanType) => Option(fun)
		given putListSchemaRegionalBasePlanConfig: Conversion[List[Schema.RegionalBasePlanConfig], Option[List[Schema.RegionalBasePlanConfig]]] = (fun: List[Schema.RegionalBasePlanConfig]) => Option(fun)
		given putListSchemaOfferTag: Conversion[List[Schema.OfferTag], Option[List[Schema.OfferTag]]] = (fun: List[Schema.OfferTag]) => Option(fun)
		given putSchemaOtherRegionsBasePlanConfig: Conversion[Schema.OtherRegionsBasePlanConfig, Option[Schema.OtherRegionsBasePlanConfig]] = (fun: Schema.OtherRegionsBasePlanConfig) => Option(fun)
		given putSchemaAutoRenewingBasePlanTypeResubscribeStateEnum: Conversion[Schema.AutoRenewingBasePlanType.ResubscribeStateEnum, Option[Schema.AutoRenewingBasePlanType.ResubscribeStateEnum]] = (fun: Schema.AutoRenewingBasePlanType.ResubscribeStateEnum) => Option(fun)
		given putSchemaAutoRenewingBasePlanTypeProrationModeEnum: Conversion[Schema.AutoRenewingBasePlanType.ProrationModeEnum, Option[Schema.AutoRenewingBasePlanType.ProrationModeEnum]] = (fun: Schema.AutoRenewingBasePlanType.ProrationModeEnum) => Option(fun)
		given putSchemaPrepaidBasePlanTypeTimeExtensionEnum: Conversion[Schema.PrepaidBasePlanType.TimeExtensionEnum, Option[Schema.PrepaidBasePlanType.TimeExtensionEnum]] = (fun: Schema.PrepaidBasePlanType.TimeExtensionEnum) => Option(fun)
		given putSchemaInstallmentsBasePlanTypeRenewalTypeEnum: Conversion[Schema.InstallmentsBasePlanType.RenewalTypeEnum, Option[Schema.InstallmentsBasePlanType.RenewalTypeEnum]] = (fun: Schema.InstallmentsBasePlanType.RenewalTypeEnum) => Option(fun)
		given putSchemaInstallmentsBasePlanTypeResubscribeStateEnum: Conversion[Schema.InstallmentsBasePlanType.ResubscribeStateEnum, Option[Schema.InstallmentsBasePlanType.ResubscribeStateEnum]] = (fun: Schema.InstallmentsBasePlanType.ResubscribeStateEnum) => Option(fun)
		given putSchemaInstallmentsBasePlanTypeProrationModeEnum: Conversion[Schema.InstallmentsBasePlanType.ProrationModeEnum, Option[Schema.InstallmentsBasePlanType.ProrationModeEnum]] = (fun: Schema.InstallmentsBasePlanType.ProrationModeEnum) => Option(fun)
		given putListSchemaSubscription: Conversion[List[Schema.Subscription], Option[List[Schema.Subscription]]] = (fun: List[Schema.Subscription]) => Option(fun)
		given putListSchemaUpdateSubscriptionRequest: Conversion[List[Schema.UpdateSubscriptionRequest], Option[List[Schema.UpdateSubscriptionRequest]]] = (fun: List[Schema.UpdateSubscriptionRequest]) => Option(fun)
		given putSchemaSubscription: Conversion[Schema.Subscription, Option[Schema.Subscription]] = (fun: Schema.Subscription) => Option(fun)
		given putSchemaRegionsVersion: Conversion[Schema.RegionsVersion, Option[Schema.RegionsVersion]] = (fun: Schema.RegionsVersion) => Option(fun)
		given putSchemaUpdateSubscriptionRequestLatencyToleranceEnum: Conversion[Schema.UpdateSubscriptionRequest.LatencyToleranceEnum, Option[Schema.UpdateSubscriptionRequest.LatencyToleranceEnum]] = (fun: Schema.UpdateSubscriptionRequest.LatencyToleranceEnum) => Option(fun)
		given putSchemaActivateBasePlanRequestLatencyToleranceEnum: Conversion[Schema.ActivateBasePlanRequest.LatencyToleranceEnum, Option[Schema.ActivateBasePlanRequest.LatencyToleranceEnum]] = (fun: Schema.ActivateBasePlanRequest.LatencyToleranceEnum) => Option(fun)
		given putSchemaDeactivateBasePlanRequestLatencyToleranceEnum: Conversion[Schema.DeactivateBasePlanRequest.LatencyToleranceEnum, Option[Schema.DeactivateBasePlanRequest.LatencyToleranceEnum]] = (fun: Schema.DeactivateBasePlanRequest.LatencyToleranceEnum) => Option(fun)
		given putListSchemaUpdateBasePlanStateRequest: Conversion[List[Schema.UpdateBasePlanStateRequest], Option[List[Schema.UpdateBasePlanStateRequest]]] = (fun: List[Schema.UpdateBasePlanStateRequest]) => Option(fun)
		given putSchemaActivateBasePlanRequest: Conversion[Schema.ActivateBasePlanRequest, Option[Schema.ActivateBasePlanRequest]] = (fun: Schema.ActivateBasePlanRequest) => Option(fun)
		given putSchemaDeactivateBasePlanRequest: Conversion[Schema.DeactivateBasePlanRequest, Option[Schema.DeactivateBasePlanRequest]] = (fun: Schema.DeactivateBasePlanRequest) => Option(fun)
		given putListSchemaRegionalPriceMigrationConfig: Conversion[List[Schema.RegionalPriceMigrationConfig], Option[List[Schema.RegionalPriceMigrationConfig]]] = (fun: List[Schema.RegionalPriceMigrationConfig]) => Option(fun)
		given putSchemaMigrateBasePlanPricesRequestLatencyToleranceEnum: Conversion[Schema.MigrateBasePlanPricesRequest.LatencyToleranceEnum, Option[Schema.MigrateBasePlanPricesRequest.LatencyToleranceEnum]] = (fun: Schema.MigrateBasePlanPricesRequest.LatencyToleranceEnum) => Option(fun)
		given putSchemaRegionalPriceMigrationConfigPriceIncreaseTypeEnum: Conversion[Schema.RegionalPriceMigrationConfig.PriceIncreaseTypeEnum, Option[Schema.RegionalPriceMigrationConfig.PriceIncreaseTypeEnum]] = (fun: Schema.RegionalPriceMigrationConfig.PriceIncreaseTypeEnum) => Option(fun)
		given putListSchemaMigrateBasePlanPricesRequest: Conversion[List[Schema.MigrateBasePlanPricesRequest], Option[List[Schema.MigrateBasePlanPricesRequest]]] = (fun: List[Schema.MigrateBasePlanPricesRequest]) => Option(fun)
		given putListSchemaMigrateBasePlanPricesResponse: Conversion[List[Schema.MigrateBasePlanPricesResponse], Option[List[Schema.MigrateBasePlanPricesResponse]]] = (fun: List[Schema.MigrateBasePlanPricesResponse]) => Option(fun)
		given putSchemaSubscriptionOfferStateEnum: Conversion[Schema.SubscriptionOffer.StateEnum, Option[Schema.SubscriptionOffer.StateEnum]] = (fun: Schema.SubscriptionOffer.StateEnum) => Option(fun)
		given putListSchemaSubscriptionOfferPhase: Conversion[List[Schema.SubscriptionOfferPhase], Option[List[Schema.SubscriptionOfferPhase]]] = (fun: List[Schema.SubscriptionOfferPhase]) => Option(fun)
		given putSchemaSubscriptionOfferTargeting: Conversion[Schema.SubscriptionOfferTargeting, Option[Schema.SubscriptionOfferTargeting]] = (fun: Schema.SubscriptionOfferTargeting) => Option(fun)
		given putListSchemaRegionalSubscriptionOfferConfig: Conversion[List[Schema.RegionalSubscriptionOfferConfig], Option[List[Schema.RegionalSubscriptionOfferConfig]]] = (fun: List[Schema.RegionalSubscriptionOfferConfig]) => Option(fun)
		given putSchemaOtherRegionsSubscriptionOfferConfig: Conversion[Schema.OtherRegionsSubscriptionOfferConfig, Option[Schema.OtherRegionsSubscriptionOfferConfig]] = (fun: Schema.OtherRegionsSubscriptionOfferConfig) => Option(fun)
		given putListSchemaRegionalSubscriptionOfferPhaseConfig: Conversion[List[Schema.RegionalSubscriptionOfferPhaseConfig], Option[List[Schema.RegionalSubscriptionOfferPhaseConfig]]] = (fun: List[Schema.RegionalSubscriptionOfferPhaseConfig]) => Option(fun)
		given putSchemaOtherRegionsSubscriptionOfferPhaseConfig: Conversion[Schema.OtherRegionsSubscriptionOfferPhaseConfig, Option[Schema.OtherRegionsSubscriptionOfferPhaseConfig]] = (fun: Schema.OtherRegionsSubscriptionOfferPhaseConfig) => Option(fun)
		given putBigDecimal: Conversion[BigDecimal, Option[BigDecimal]] = (fun: BigDecimal) => Option(fun)
		given putSchemaRegionalSubscriptionOfferPhaseFreePriceOverride: Conversion[Schema.RegionalSubscriptionOfferPhaseFreePriceOverride, Option[Schema.RegionalSubscriptionOfferPhaseFreePriceOverride]] = (fun: Schema.RegionalSubscriptionOfferPhaseFreePriceOverride) => Option(fun)
		given putSchemaOtherRegionsSubscriptionOfferPhasePrices: Conversion[Schema.OtherRegionsSubscriptionOfferPhasePrices, Option[Schema.OtherRegionsSubscriptionOfferPhasePrices]] = (fun: Schema.OtherRegionsSubscriptionOfferPhasePrices) => Option(fun)
		given putSchemaOtherRegionsSubscriptionOfferPhaseFreePriceOverride: Conversion[Schema.OtherRegionsSubscriptionOfferPhaseFreePriceOverride, Option[Schema.OtherRegionsSubscriptionOfferPhaseFreePriceOverride]] = (fun: Schema.OtherRegionsSubscriptionOfferPhaseFreePriceOverride) => Option(fun)
		given putSchemaAcquisitionTargetingRule: Conversion[Schema.AcquisitionTargetingRule, Option[Schema.AcquisitionTargetingRule]] = (fun: Schema.AcquisitionTargetingRule) => Option(fun)
		given putSchemaUpgradeTargetingRule: Conversion[Schema.UpgradeTargetingRule, Option[Schema.UpgradeTargetingRule]] = (fun: Schema.UpgradeTargetingRule) => Option(fun)
		given putSchemaTargetingRuleScope: Conversion[Schema.TargetingRuleScope, Option[Schema.TargetingRuleScope]] = (fun: Schema.TargetingRuleScope) => Option(fun)
		given putSchemaTargetingRuleScopeThisSubscription: Conversion[Schema.TargetingRuleScopeThisSubscription, Option[Schema.TargetingRuleScopeThisSubscription]] = (fun: Schema.TargetingRuleScopeThisSubscription) => Option(fun)
		given putSchemaTargetingRuleScopeAnySubscriptionInApp: Conversion[Schema.TargetingRuleScopeAnySubscriptionInApp, Option[Schema.TargetingRuleScopeAnySubscriptionInApp]] = (fun: Schema.TargetingRuleScopeAnySubscriptionInApp) => Option(fun)
		given putListSchemaGetSubscriptionOfferRequest: Conversion[List[Schema.GetSubscriptionOfferRequest], Option[List[Schema.GetSubscriptionOfferRequest]]] = (fun: List[Schema.GetSubscriptionOfferRequest]) => Option(fun)
		given putListSchemaSubscriptionOffer: Conversion[List[Schema.SubscriptionOffer], Option[List[Schema.SubscriptionOffer]]] = (fun: List[Schema.SubscriptionOffer]) => Option(fun)
		given putListSchemaUpdateSubscriptionOfferRequest: Conversion[List[Schema.UpdateSubscriptionOfferRequest], Option[List[Schema.UpdateSubscriptionOfferRequest]]] = (fun: List[Schema.UpdateSubscriptionOfferRequest]) => Option(fun)
		given putSchemaSubscriptionOffer: Conversion[Schema.SubscriptionOffer, Option[Schema.SubscriptionOffer]] = (fun: Schema.SubscriptionOffer) => Option(fun)
		given putSchemaUpdateSubscriptionOfferRequestLatencyToleranceEnum: Conversion[Schema.UpdateSubscriptionOfferRequest.LatencyToleranceEnum, Option[Schema.UpdateSubscriptionOfferRequest.LatencyToleranceEnum]] = (fun: Schema.UpdateSubscriptionOfferRequest.LatencyToleranceEnum) => Option(fun)
		given putSchemaActivateSubscriptionOfferRequestLatencyToleranceEnum: Conversion[Schema.ActivateSubscriptionOfferRequest.LatencyToleranceEnum, Option[Schema.ActivateSubscriptionOfferRequest.LatencyToleranceEnum]] = (fun: Schema.ActivateSubscriptionOfferRequest.LatencyToleranceEnum) => Option(fun)
		given putSchemaDeactivateSubscriptionOfferRequestLatencyToleranceEnum: Conversion[Schema.DeactivateSubscriptionOfferRequest.LatencyToleranceEnum, Option[Schema.DeactivateSubscriptionOfferRequest.LatencyToleranceEnum]] = (fun: Schema.DeactivateSubscriptionOfferRequest.LatencyToleranceEnum) => Option(fun)
		given putListSchemaUpdateSubscriptionOfferStateRequest: Conversion[List[Schema.UpdateSubscriptionOfferStateRequest], Option[List[Schema.UpdateSubscriptionOfferStateRequest]]] = (fun: List[Schema.UpdateSubscriptionOfferStateRequest]) => Option(fun)
		given putSchemaActivateSubscriptionOfferRequest: Conversion[Schema.ActivateSubscriptionOfferRequest, Option[Schema.ActivateSubscriptionOfferRequest]] = (fun: Schema.ActivateSubscriptionOfferRequest) => Option(fun)
		given putSchemaDeactivateSubscriptionOfferRequest: Conversion[Schema.DeactivateSubscriptionOfferRequest, Option[Schema.DeactivateSubscriptionOfferRequest]] = (fun: Schema.DeactivateSubscriptionOfferRequest) => Option(fun)
		given putSchemaDeviceSpec: Conversion[Schema.DeviceSpec, Option[Schema.DeviceSpec]] = (fun: Schema.DeviceSpec) => Option(fun)
		given putSchemaSystemApkOptions: Conversion[Schema.SystemApkOptions, Option[Schema.SystemApkOptions]] = (fun: Schema.SystemApkOptions) => Option(fun)
		given putListSchemaVariant: Conversion[List[Schema.Variant], Option[List[Schema.Variant]]] = (fun: List[Schema.Variant]) => Option(fun)
		given putListSchemaTrackRelease: Conversion[List[Schema.TrackRelease], Option[List[Schema.TrackRelease]]] = (fun: List[Schema.TrackRelease]) => Option(fun)
		given putListSchemaLocalizedText: Conversion[List[Schema.LocalizedText], Option[List[Schema.LocalizedText]]] = (fun: List[Schema.LocalizedText]) => Option(fun)
		given putSchemaTrackReleaseStatusEnum: Conversion[Schema.TrackRelease.StatusEnum, Option[Schema.TrackRelease.StatusEnum]] = (fun: Schema.TrackRelease.StatusEnum) => Option(fun)
		given putSchemaCountryTargeting: Conversion[Schema.CountryTargeting, Option[Schema.CountryTargeting]] = (fun: Schema.CountryTargeting) => Option(fun)
		given putListSchemaTrack: Conversion[List[Schema.Track], Option[List[Schema.Track]]] = (fun: List[Schema.Track]) => Option(fun)
		given putSchemaTrackConfigTypeEnum: Conversion[Schema.TrackConfig.TypeEnum, Option[Schema.TrackConfig.TypeEnum]] = (fun: Schema.TrackConfig.TypeEnum) => Option(fun)
		given putSchemaTrackConfigFormFactorEnum: Conversion[Schema.TrackConfig.FormFactorEnum, Option[Schema.TrackConfig.FormFactorEnum]] = (fun: Schema.TrackConfig.FormFactorEnum) => Option(fun)
		given putListSchemaVoidedPurchase: Conversion[List[Schema.VoidedPurchase], Option[List[Schema.VoidedPurchase]]] = (fun: List[Schema.VoidedPurchase]) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
