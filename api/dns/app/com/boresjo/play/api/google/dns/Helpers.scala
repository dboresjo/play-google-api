package com.boresjo.play.api.google.dns

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaResourceRecordSet: Conversion[List[Schema.ResourceRecordSet], Option[List[Schema.ResourceRecordSet]]] = (fun: List[Schema.ResourceRecordSet]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putSchemaRRSetRoutingPolicy: Conversion[Schema.RRSetRoutingPolicy, Option[Schema.RRSetRoutingPolicy]] = (fun: Schema.RRSetRoutingPolicy) => Option(fun)
		given putSchemaRRSetRoutingPolicyGeoPolicy: Conversion[Schema.RRSetRoutingPolicyGeoPolicy, Option[Schema.RRSetRoutingPolicyGeoPolicy]] = (fun: Schema.RRSetRoutingPolicyGeoPolicy) => Option(fun)
		given putSchemaRRSetRoutingPolicyWrrPolicy: Conversion[Schema.RRSetRoutingPolicyWrrPolicy, Option[Schema.RRSetRoutingPolicyWrrPolicy]] = (fun: Schema.RRSetRoutingPolicyWrrPolicy) => Option(fun)
		given putSchemaRRSetRoutingPolicyPrimaryBackupPolicy: Conversion[Schema.RRSetRoutingPolicyPrimaryBackupPolicy, Option[Schema.RRSetRoutingPolicyPrimaryBackupPolicy]] = (fun: Schema.RRSetRoutingPolicyPrimaryBackupPolicy) => Option(fun)
		given putListSchemaRRSetRoutingPolicyGeoPolicyGeoPolicyItem: Conversion[List[Schema.RRSetRoutingPolicyGeoPolicyGeoPolicyItem], Option[List[Schema.RRSetRoutingPolicyGeoPolicyGeoPolicyItem]]] = (fun: List[Schema.RRSetRoutingPolicyGeoPolicyGeoPolicyItem]) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaRRSetRoutingPolicyHealthCheckTargets: Conversion[Schema.RRSetRoutingPolicyHealthCheckTargets, Option[Schema.RRSetRoutingPolicyHealthCheckTargets]] = (fun: Schema.RRSetRoutingPolicyHealthCheckTargets) => Option(fun)
		given putListSchemaRRSetRoutingPolicyLoadBalancerTarget: Conversion[List[Schema.RRSetRoutingPolicyLoadBalancerTarget], Option[List[Schema.RRSetRoutingPolicyLoadBalancerTarget]]] = (fun: List[Schema.RRSetRoutingPolicyLoadBalancerTarget]) => Option(fun)
		given putSchemaRRSetRoutingPolicyLoadBalancerTargetLoadBalancerTypeEnum: Conversion[Schema.RRSetRoutingPolicyLoadBalancerTarget.LoadBalancerTypeEnum, Option[Schema.RRSetRoutingPolicyLoadBalancerTarget.LoadBalancerTypeEnum]] = (fun: Schema.RRSetRoutingPolicyLoadBalancerTarget.LoadBalancerTypeEnum) => Option(fun)
		given putSchemaRRSetRoutingPolicyLoadBalancerTargetIpProtocolEnum: Conversion[Schema.RRSetRoutingPolicyLoadBalancerTarget.IpProtocolEnum, Option[Schema.RRSetRoutingPolicyLoadBalancerTarget.IpProtocolEnum]] = (fun: Schema.RRSetRoutingPolicyLoadBalancerTarget.IpProtocolEnum) => Option(fun)
		given putListSchemaRRSetRoutingPolicyWrrPolicyWrrPolicyItem: Conversion[List[Schema.RRSetRoutingPolicyWrrPolicyWrrPolicyItem], Option[List[Schema.RRSetRoutingPolicyWrrPolicyWrrPolicyItem]]] = (fun: List[Schema.RRSetRoutingPolicyWrrPolicyWrrPolicyItem]) => Option(fun)
		given putBigDecimal: Conversion[BigDecimal, Option[BigDecimal]] = (fun: BigDecimal) => Option(fun)
		given putSchemaChangeStatusEnum: Conversion[Schema.Change.StatusEnum, Option[Schema.Change.StatusEnum]] = (fun: Schema.Change.StatusEnum) => Option(fun)
		given putListSchemaChange: Conversion[List[Schema.Change], Option[List[Schema.Change]]] = (fun: List[Schema.Change]) => Option(fun)
		given putSchemaDnsKeyAlgorithmEnum: Conversion[Schema.DnsKey.AlgorithmEnum, Option[Schema.DnsKey.AlgorithmEnum]] = (fun: Schema.DnsKey.AlgorithmEnum) => Option(fun)
		given putSchemaDnsKeyTypeEnum: Conversion[Schema.DnsKey.TypeEnum, Option[Schema.DnsKey.TypeEnum]] = (fun: Schema.DnsKey.TypeEnum) => Option(fun)
		given putListSchemaDnsKeyDigest: Conversion[List[Schema.DnsKeyDigest], Option[List[Schema.DnsKeyDigest]]] = (fun: List[Schema.DnsKeyDigest]) => Option(fun)
		given putSchemaDnsKeyDigestTypeEnum: Conversion[Schema.DnsKeyDigest.TypeEnum, Option[Schema.DnsKeyDigest.TypeEnum]] = (fun: Schema.DnsKeyDigest.TypeEnum) => Option(fun)
		given putListSchemaDnsKey: Conversion[List[Schema.DnsKey], Option[List[Schema.DnsKey]]] = (fun: List[Schema.DnsKey]) => Option(fun)
		given putSchemaQuota: Conversion[Schema.Quota, Option[Schema.Quota]] = (fun: Schema.Quota) => Option(fun)
		given putListSchemaDnsKeySpec: Conversion[List[Schema.DnsKeySpec], Option[List[Schema.DnsKeySpec]]] = (fun: List[Schema.DnsKeySpec]) => Option(fun)
		given putSchemaDnsKeySpecKeyTypeEnum: Conversion[Schema.DnsKeySpec.KeyTypeEnum, Option[Schema.DnsKeySpec.KeyTypeEnum]] = (fun: Schema.DnsKeySpec.KeyTypeEnum) => Option(fun)
		given putSchemaDnsKeySpecAlgorithmEnum: Conversion[Schema.DnsKeySpec.AlgorithmEnum, Option[Schema.DnsKeySpec.AlgorithmEnum]] = (fun: Schema.DnsKeySpec.AlgorithmEnum) => Option(fun)
		given putSchemaOperationStatusEnum: Conversion[Schema.Operation.StatusEnum, Option[Schema.Operation.StatusEnum]] = (fun: Schema.Operation.StatusEnum) => Option(fun)
		given putSchemaOperationManagedZoneContext: Conversion[Schema.OperationManagedZoneContext, Option[Schema.OperationManagedZoneContext]] = (fun: Schema.OperationManagedZoneContext) => Option(fun)
		given putSchemaOperationDnsKeyContext: Conversion[Schema.OperationDnsKeyContext, Option[Schema.OperationDnsKeyContext]] = (fun: Schema.OperationDnsKeyContext) => Option(fun)
		given putSchemaManagedZone: Conversion[Schema.ManagedZone, Option[Schema.ManagedZone]] = (fun: Schema.ManagedZone) => Option(fun)
		given putSchemaManagedZoneDnsSecConfig: Conversion[Schema.ManagedZoneDnsSecConfig, Option[Schema.ManagedZoneDnsSecConfig]] = (fun: Schema.ManagedZoneDnsSecConfig) => Option(fun)
		given putSchemaManagedZoneVisibilityEnum: Conversion[Schema.ManagedZone.VisibilityEnum, Option[Schema.ManagedZone.VisibilityEnum]] = (fun: Schema.ManagedZone.VisibilityEnum) => Option(fun)
		given putSchemaManagedZonePrivateVisibilityConfig: Conversion[Schema.ManagedZonePrivateVisibilityConfig, Option[Schema.ManagedZonePrivateVisibilityConfig]] = (fun: Schema.ManagedZonePrivateVisibilityConfig) => Option(fun)
		given putSchemaManagedZoneForwardingConfig: Conversion[Schema.ManagedZoneForwardingConfig, Option[Schema.ManagedZoneForwardingConfig]] = (fun: Schema.ManagedZoneForwardingConfig) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putSchemaManagedZonePeeringConfig: Conversion[Schema.ManagedZonePeeringConfig, Option[Schema.ManagedZonePeeringConfig]] = (fun: Schema.ManagedZonePeeringConfig) => Option(fun)
		given putSchemaManagedZoneReverseLookupConfig: Conversion[Schema.ManagedZoneReverseLookupConfig, Option[Schema.ManagedZoneReverseLookupConfig]] = (fun: Schema.ManagedZoneReverseLookupConfig) => Option(fun)
		given putSchemaManagedZoneServiceDirectoryConfig: Conversion[Schema.ManagedZoneServiceDirectoryConfig, Option[Schema.ManagedZoneServiceDirectoryConfig]] = (fun: Schema.ManagedZoneServiceDirectoryConfig) => Option(fun)
		given putSchemaManagedZoneCloudLoggingConfig: Conversion[Schema.ManagedZoneCloudLoggingConfig, Option[Schema.ManagedZoneCloudLoggingConfig]] = (fun: Schema.ManagedZoneCloudLoggingConfig) => Option(fun)
		given putSchemaManagedZoneDnsSecConfigStateEnum: Conversion[Schema.ManagedZoneDnsSecConfig.StateEnum, Option[Schema.ManagedZoneDnsSecConfig.StateEnum]] = (fun: Schema.ManagedZoneDnsSecConfig.StateEnum) => Option(fun)
		given putSchemaManagedZoneDnsSecConfigNonExistenceEnum: Conversion[Schema.ManagedZoneDnsSecConfig.NonExistenceEnum, Option[Schema.ManagedZoneDnsSecConfig.NonExistenceEnum]] = (fun: Schema.ManagedZoneDnsSecConfig.NonExistenceEnum) => Option(fun)
		given putListSchemaManagedZonePrivateVisibilityConfigNetwork: Conversion[List[Schema.ManagedZonePrivateVisibilityConfigNetwork], Option[List[Schema.ManagedZonePrivateVisibilityConfigNetwork]]] = (fun: List[Schema.ManagedZonePrivateVisibilityConfigNetwork]) => Option(fun)
		given putListSchemaManagedZonePrivateVisibilityConfigGKECluster: Conversion[List[Schema.ManagedZonePrivateVisibilityConfigGKECluster], Option[List[Schema.ManagedZonePrivateVisibilityConfigGKECluster]]] = (fun: List[Schema.ManagedZonePrivateVisibilityConfigGKECluster]) => Option(fun)
		given putListSchemaManagedZoneForwardingConfigNameServerTarget: Conversion[List[Schema.ManagedZoneForwardingConfigNameServerTarget], Option[List[Schema.ManagedZoneForwardingConfigNameServerTarget]]] = (fun: List[Schema.ManagedZoneForwardingConfigNameServerTarget]) => Option(fun)
		given putSchemaManagedZoneForwardingConfigNameServerTargetForwardingPathEnum: Conversion[Schema.ManagedZoneForwardingConfigNameServerTarget.ForwardingPathEnum, Option[Schema.ManagedZoneForwardingConfigNameServerTarget.ForwardingPathEnum]] = (fun: Schema.ManagedZoneForwardingConfigNameServerTarget.ForwardingPathEnum) => Option(fun)
		given putSchemaManagedZonePeeringConfigTargetNetwork: Conversion[Schema.ManagedZonePeeringConfigTargetNetwork, Option[Schema.ManagedZonePeeringConfigTargetNetwork]] = (fun: Schema.ManagedZonePeeringConfigTargetNetwork) => Option(fun)
		given putSchemaManagedZoneServiceDirectoryConfigNamespace: Conversion[Schema.ManagedZoneServiceDirectoryConfigNamespace, Option[Schema.ManagedZoneServiceDirectoryConfigNamespace]] = (fun: Schema.ManagedZoneServiceDirectoryConfigNamespace) => Option(fun)
		given putSchemaDnsKey: Conversion[Schema.DnsKey, Option[Schema.DnsKey]] = (fun: Schema.DnsKey) => Option(fun)
		given putListSchemaOperation: Conversion[List[Schema.Operation], Option[List[Schema.Operation]]] = (fun: List[Schema.Operation]) => Option(fun)
		given putListSchemaManagedZone: Conversion[List[Schema.ManagedZone], Option[List[Schema.ManagedZone]]] = (fun: List[Schema.ManagedZone]) => Option(fun)
		given putSchemaGoogleIamV1Policy: Conversion[Schema.GoogleIamV1Policy, Option[Schema.GoogleIamV1Policy]] = (fun: Schema.GoogleIamV1Policy) => Option(fun)
		given putListSchemaGoogleIamV1Binding: Conversion[List[Schema.GoogleIamV1Binding], Option[List[Schema.GoogleIamV1Binding]]] = (fun: List[Schema.GoogleIamV1Binding]) => Option(fun)
		given putListSchemaGoogleIamV1AuditConfig: Conversion[List[Schema.GoogleIamV1AuditConfig], Option[List[Schema.GoogleIamV1AuditConfig]]] = (fun: List[Schema.GoogleIamV1AuditConfig]) => Option(fun)
		given putSchemaExpr: Conversion[Schema.Expr, Option[Schema.Expr]] = (fun: Schema.Expr) => Option(fun)
		given putListSchemaGoogleIamV1AuditLogConfig: Conversion[List[Schema.GoogleIamV1AuditLogConfig], Option[List[Schema.GoogleIamV1AuditLogConfig]]] = (fun: List[Schema.GoogleIamV1AuditLogConfig]) => Option(fun)
		given putSchemaGoogleIamV1AuditLogConfigLogTypeEnum: Conversion[Schema.GoogleIamV1AuditLogConfig.LogTypeEnum, Option[Schema.GoogleIamV1AuditLogConfig.LogTypeEnum]] = (fun: Schema.GoogleIamV1AuditLogConfig.LogTypeEnum) => Option(fun)
		given putSchemaGoogleIamV1GetPolicyOptions: Conversion[Schema.GoogleIamV1GetPolicyOptions, Option[Schema.GoogleIamV1GetPolicyOptions]] = (fun: Schema.GoogleIamV1GetPolicyOptions) => Option(fun)
		given putListSchemaPolicyNetwork: Conversion[List[Schema.PolicyNetwork], Option[List[Schema.PolicyNetwork]]] = (fun: List[Schema.PolicyNetwork]) => Option(fun)
		given putSchemaPolicyAlternativeNameServerConfig: Conversion[Schema.PolicyAlternativeNameServerConfig, Option[Schema.PolicyAlternativeNameServerConfig]] = (fun: Schema.PolicyAlternativeNameServerConfig) => Option(fun)
		given putListSchemaPolicyAlternativeNameServerConfigTargetNameServer: Conversion[List[Schema.PolicyAlternativeNameServerConfigTargetNameServer], Option[List[Schema.PolicyAlternativeNameServerConfigTargetNameServer]]] = (fun: List[Schema.PolicyAlternativeNameServerConfigTargetNameServer]) => Option(fun)
		given putSchemaPolicyAlternativeNameServerConfigTargetNameServerForwardingPathEnum: Conversion[Schema.PolicyAlternativeNameServerConfigTargetNameServer.ForwardingPathEnum, Option[Schema.PolicyAlternativeNameServerConfigTargetNameServer.ForwardingPathEnum]] = (fun: Schema.PolicyAlternativeNameServerConfigTargetNameServer.ForwardingPathEnum) => Option(fun)
		given putListSchemaPolicy: Conversion[List[Schema.Policy], Option[List[Schema.Policy]]] = (fun: List[Schema.Policy]) => Option(fun)
		given putSchemaPolicy: Conversion[Schema.Policy, Option[Schema.Policy]] = (fun: Schema.Policy) => Option(fun)
		given putListSchemaResponsePolicyNetwork: Conversion[List[Schema.ResponsePolicyNetwork], Option[List[Schema.ResponsePolicyNetwork]]] = (fun: List[Schema.ResponsePolicyNetwork]) => Option(fun)
		given putListSchemaResponsePolicyGKECluster: Conversion[List[Schema.ResponsePolicyGKECluster], Option[List[Schema.ResponsePolicyGKECluster]]] = (fun: List[Schema.ResponsePolicyGKECluster]) => Option(fun)
		given putListSchemaResponsePolicy: Conversion[List[Schema.ResponsePolicy], Option[List[Schema.ResponsePolicy]]] = (fun: List[Schema.ResponsePolicy]) => Option(fun)
		given putSchemaResponsePolicy: Conversion[Schema.ResponsePolicy, Option[Schema.ResponsePolicy]] = (fun: Schema.ResponsePolicy) => Option(fun)
		given putSchemaResponsePolicyRuleLocalData: Conversion[Schema.ResponsePolicyRuleLocalData, Option[Schema.ResponsePolicyRuleLocalData]] = (fun: Schema.ResponsePolicyRuleLocalData) => Option(fun)
		given putSchemaResponsePolicyRuleBehaviorEnum: Conversion[Schema.ResponsePolicyRule.BehaviorEnum, Option[Schema.ResponsePolicyRule.BehaviorEnum]] = (fun: Schema.ResponsePolicyRule.BehaviorEnum) => Option(fun)
		given putListSchemaResponsePolicyRule: Conversion[List[Schema.ResponsePolicyRule], Option[List[Schema.ResponsePolicyRule]]] = (fun: List[Schema.ResponsePolicyRule]) => Option(fun)
		given putSchemaResponsePolicyRule: Conversion[Schema.ResponsePolicyRule, Option[Schema.ResponsePolicyRule]] = (fun: Schema.ResponsePolicyRule) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
