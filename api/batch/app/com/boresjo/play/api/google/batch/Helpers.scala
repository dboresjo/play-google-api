package com.boresjo.play.api.google.batch

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, AuthToken, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaOperation: Conversion[List[Schema.Operation], Option[List[Schema.Operation]]] = (fun: List[Schema.Operation]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putMapStringJsValue: Conversion[Map[String, JsValue], Option[Map[String, JsValue]]] = (fun: Map[String, JsValue]) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putListSchemaTaskGroup: Conversion[List[Schema.TaskGroup], Option[List[Schema.TaskGroup]]] = (fun: List[Schema.TaskGroup]) => Option(fun)
		given putSchemaAllocationPolicy: Conversion[Schema.AllocationPolicy, Option[Schema.AllocationPolicy]] = (fun: Schema.AllocationPolicy) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putSchemaJobStatus: Conversion[Schema.JobStatus, Option[Schema.JobStatus]] = (fun: Schema.JobStatus) => Option(fun)
		given putSchemaLogsPolicy: Conversion[Schema.LogsPolicy, Option[Schema.LogsPolicy]] = (fun: Schema.LogsPolicy) => Option(fun)
		given putListSchemaJobNotification: Conversion[List[Schema.JobNotification], Option[List[Schema.JobNotification]]] = (fun: List[Schema.JobNotification]) => Option(fun)
		given putSchemaTaskSpec: Conversion[Schema.TaskSpec, Option[Schema.TaskSpec]] = (fun: Schema.TaskSpec) => Option(fun)
		given putSchemaTaskGroupSchedulingPolicyEnum: Conversion[Schema.TaskGroup.SchedulingPolicyEnum, Option[Schema.TaskGroup.SchedulingPolicyEnum]] = (fun: Schema.TaskGroup.SchedulingPolicyEnum) => Option(fun)
		given putListSchemaEnvironment: Conversion[List[Schema.Environment], Option[List[Schema.Environment]]] = (fun: List[Schema.Environment]) => Option(fun)
		given putListSchemaRunnable: Conversion[List[Schema.Runnable], Option[List[Schema.Runnable]]] = (fun: List[Schema.Runnable]) => Option(fun)
		given putSchemaComputeResource: Conversion[Schema.ComputeResource, Option[Schema.ComputeResource]] = (fun: Schema.ComputeResource) => Option(fun)
		given putListSchemaLifecyclePolicy: Conversion[List[Schema.LifecyclePolicy], Option[List[Schema.LifecyclePolicy]]] = (fun: List[Schema.LifecyclePolicy]) => Option(fun)
		given putListSchemaVolume: Conversion[List[Schema.Volume], Option[List[Schema.Volume]]] = (fun: List[Schema.Volume]) => Option(fun)
		given putSchemaEnvironment: Conversion[Schema.Environment, Option[Schema.Environment]] = (fun: Schema.Environment) => Option(fun)
		given putSchemaContainer: Conversion[Schema.Container, Option[Schema.Container]] = (fun: Schema.Container) => Option(fun)
		given putSchemaScript: Conversion[Schema.Script, Option[Schema.Script]] = (fun: Schema.Script) => Option(fun)
		given putSchemaBarrier: Conversion[Schema.Barrier, Option[Schema.Barrier]] = (fun: Schema.Barrier) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putSchemaKMSEnvMap: Conversion[Schema.KMSEnvMap, Option[Schema.KMSEnvMap]] = (fun: Schema.KMSEnvMap) => Option(fun)
		given putSchemaLifecyclePolicyActionEnum: Conversion[Schema.LifecyclePolicy.ActionEnum, Option[Schema.LifecyclePolicy.ActionEnum]] = (fun: Schema.LifecyclePolicy.ActionEnum) => Option(fun)
		given putSchemaActionCondition: Conversion[Schema.ActionCondition, Option[Schema.ActionCondition]] = (fun: Schema.ActionCondition) => Option(fun)
		given putListInt: Conversion[List[Int], Option[List[Int]]] = (fun: List[Int]) => Option(fun)
		given putSchemaNFS: Conversion[Schema.NFS, Option[Schema.NFS]] = (fun: Schema.NFS) => Option(fun)
		given putSchemaGCS: Conversion[Schema.GCS, Option[Schema.GCS]] = (fun: Schema.GCS) => Option(fun)
		given putSchemaLocationPolicy: Conversion[Schema.LocationPolicy, Option[Schema.LocationPolicy]] = (fun: Schema.LocationPolicy) => Option(fun)
		given putListSchemaInstancePolicyOrTemplate: Conversion[List[Schema.InstancePolicyOrTemplate], Option[List[Schema.InstancePolicyOrTemplate]]] = (fun: List[Schema.InstancePolicyOrTemplate]) => Option(fun)
		given putSchemaServiceAccount: Conversion[Schema.ServiceAccount, Option[Schema.ServiceAccount]] = (fun: Schema.ServiceAccount) => Option(fun)
		given putSchemaNetworkPolicy: Conversion[Schema.NetworkPolicy, Option[Schema.NetworkPolicy]] = (fun: Schema.NetworkPolicy) => Option(fun)
		given putSchemaPlacementPolicy: Conversion[Schema.PlacementPolicy, Option[Schema.PlacementPolicy]] = (fun: Schema.PlacementPolicy) => Option(fun)
		given putSchemaInstancePolicy: Conversion[Schema.InstancePolicy, Option[Schema.InstancePolicy]] = (fun: Schema.InstancePolicy) => Option(fun)
		given putSchemaInstancePolicyProvisioningModelEnum: Conversion[Schema.InstancePolicy.ProvisioningModelEnum, Option[Schema.InstancePolicy.ProvisioningModelEnum]] = (fun: Schema.InstancePolicy.ProvisioningModelEnum) => Option(fun)
		given putListSchemaAccelerator: Conversion[List[Schema.Accelerator], Option[List[Schema.Accelerator]]] = (fun: List[Schema.Accelerator]) => Option(fun)
		given putSchemaDisk: Conversion[Schema.Disk, Option[Schema.Disk]] = (fun: Schema.Disk) => Option(fun)
		given putListSchemaAttachedDisk: Conversion[List[Schema.AttachedDisk], Option[List[Schema.AttachedDisk]]] = (fun: List[Schema.AttachedDisk]) => Option(fun)
		given putListSchemaNetworkInterface: Conversion[List[Schema.NetworkInterface], Option[List[Schema.NetworkInterface]]] = (fun: List[Schema.NetworkInterface]) => Option(fun)
		given putSchemaJobStatusStateEnum: Conversion[Schema.JobStatus.StateEnum, Option[Schema.JobStatus.StateEnum]] = (fun: Schema.JobStatus.StateEnum) => Option(fun)
		given putListSchemaStatusEvent: Conversion[List[Schema.StatusEvent], Option[List[Schema.StatusEvent]]] = (fun: List[Schema.StatusEvent]) => Option(fun)
		given putMapStringSchemaTaskGroupStatus: Conversion[Map[String, Schema.TaskGroupStatus], Option[Map[String, Schema.TaskGroupStatus]]] = (fun: Map[String, Schema.TaskGroupStatus]) => Option(fun)
		given putSchemaTaskExecution: Conversion[Schema.TaskExecution, Option[Schema.TaskExecution]] = (fun: Schema.TaskExecution) => Option(fun)
		given putSchemaStatusEventTaskStateEnum: Conversion[Schema.StatusEvent.TaskStateEnum, Option[Schema.StatusEvent.TaskStateEnum]] = (fun: Schema.StatusEvent.TaskStateEnum) => Option(fun)
		given putListSchemaInstanceStatus: Conversion[List[Schema.InstanceStatus], Option[List[Schema.InstanceStatus]]] = (fun: List[Schema.InstanceStatus]) => Option(fun)
		given putSchemaInstanceStatusProvisioningModelEnum: Conversion[Schema.InstanceStatus.ProvisioningModelEnum, Option[Schema.InstanceStatus.ProvisioningModelEnum]] = (fun: Schema.InstanceStatus.ProvisioningModelEnum) => Option(fun)
		given putSchemaLogsPolicyDestinationEnum: Conversion[Schema.LogsPolicy.DestinationEnum, Option[Schema.LogsPolicy.DestinationEnum]] = (fun: Schema.LogsPolicy.DestinationEnum) => Option(fun)
		given putSchemaCloudLoggingOption: Conversion[Schema.CloudLoggingOption, Option[Schema.CloudLoggingOption]] = (fun: Schema.CloudLoggingOption) => Option(fun)
		given putSchemaMessage: Conversion[Schema.Message, Option[Schema.Message]] = (fun: Schema.Message) => Option(fun)
		given putSchemaMessageTypeEnum: Conversion[Schema.Message.TypeEnum, Option[Schema.Message.TypeEnum]] = (fun: Schema.Message.TypeEnum) => Option(fun)
		given putSchemaMessageNewJobStateEnum: Conversion[Schema.Message.NewJobStateEnum, Option[Schema.Message.NewJobStateEnum]] = (fun: Schema.Message.NewJobStateEnum) => Option(fun)
		given putSchemaMessageNewTaskStateEnum: Conversion[Schema.Message.NewTaskStateEnum, Option[Schema.Message.NewTaskStateEnum]] = (fun: Schema.Message.NewTaskStateEnum) => Option(fun)
		given putListSchemaJob: Conversion[List[Schema.Job], Option[List[Schema.Job]]] = (fun: List[Schema.Job]) => Option(fun)
		given putSchemaTaskStatus: Conversion[Schema.TaskStatus, Option[Schema.TaskStatus]] = (fun: Schema.TaskStatus) => Option(fun)
		given putSchemaTaskStatusStateEnum: Conversion[Schema.TaskStatus.StateEnum, Option[Schema.TaskStatus.StateEnum]] = (fun: Schema.TaskStatus.StateEnum) => Option(fun)
		given putListSchemaTask: Conversion[List[Schema.Task], Option[List[Schema.Task]]] = (fun: List[Schema.Task]) => Option(fun)
		given putSchemaAgentMetadata: Conversion[Schema.AgentMetadata, Option[Schema.AgentMetadata]] = (fun: Schema.AgentMetadata) => Option(fun)
		given putSchemaAgentInfo: Conversion[Schema.AgentInfo, Option[Schema.AgentInfo]] = (fun: Schema.AgentInfo) => Option(fun)
		given putSchemaAgentTimingInfo: Conversion[Schema.AgentTimingInfo, Option[Schema.AgentTimingInfo]] = (fun: Schema.AgentTimingInfo) => Option(fun)
		given putSchemaAgentInfoStateEnum: Conversion[Schema.AgentInfo.StateEnum, Option[Schema.AgentInfo.StateEnum]] = (fun: Schema.AgentInfo.StateEnum) => Option(fun)
		given putListSchemaAgentTaskInfo: Conversion[List[Schema.AgentTaskInfo], Option[List[Schema.AgentTaskInfo]]] = (fun: List[Schema.AgentTaskInfo]) => Option(fun)
		given putListSchemaAgentTask: Conversion[List[Schema.AgentTask], Option[List[Schema.AgentTask]]] = (fun: List[Schema.AgentTask]) => Option(fun)
		given putSchemaAgentTaskSpec: Conversion[Schema.AgentTaskSpec, Option[Schema.AgentTaskSpec]] = (fun: Schema.AgentTaskSpec) => Option(fun)
		given putSchemaAgentTaskIntendedStateEnum: Conversion[Schema.AgentTask.IntendedStateEnum, Option[Schema.AgentTask.IntendedStateEnum]] = (fun: Schema.AgentTask.IntendedStateEnum) => Option(fun)
		given putSchemaAgentTaskTaskSourceEnum: Conversion[Schema.AgentTask.TaskSourceEnum, Option[Schema.AgentTask.TaskSourceEnum]] = (fun: Schema.AgentTask.TaskSourceEnum) => Option(fun)
		given putListSchemaAgentTaskRunnable: Conversion[List[Schema.AgentTaskRunnable], Option[List[Schema.AgentTaskRunnable]]] = (fun: List[Schema.AgentTaskRunnable]) => Option(fun)
		given putSchemaAgentEnvironment: Conversion[Schema.AgentEnvironment, Option[Schema.AgentEnvironment]] = (fun: Schema.AgentEnvironment) => Option(fun)
		given putSchemaAgentTaskUserAccount: Conversion[Schema.AgentTaskUserAccount, Option[Schema.AgentTaskUserAccount]] = (fun: Schema.AgentTaskUserAccount) => Option(fun)
		given putSchemaAgentTaskLoggingOption: Conversion[Schema.AgentTaskLoggingOption, Option[Schema.AgentTaskLoggingOption]] = (fun: Schema.AgentTaskLoggingOption) => Option(fun)
		given putSchemaAgentContainer: Conversion[Schema.AgentContainer, Option[Schema.AgentContainer]] = (fun: Schema.AgentContainer) => Option(fun)
		given putSchemaAgentScript: Conversion[Schema.AgentScript, Option[Schema.AgentScript]] = (fun: Schema.AgentScript) => Option(fun)
		given putSchemaAgentKMSEnvMap: Conversion[Schema.AgentKMSEnvMap, Option[Schema.AgentKMSEnvMap]] = (fun: Schema.AgentKMSEnvMap) => Option(fun)
		given putListSchemaLocation: Conversion[List[Schema.Location], Option[List[Schema.Location]]] = (fun: List[Schema.Location]) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
