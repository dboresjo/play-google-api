package com.boresjo.play.api.google.domains

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, AuthToken, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaOperation: Conversion[List[Schema.Operation], Option[List[Schema.Operation]]] = (fun: List[Schema.Operation]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putMapStringJsValue: Conversion[Map[String, JsValue], Option[Map[String, JsValue]]] = (fun: Map[String, JsValue]) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putListSchemaRegisterParameters: Conversion[List[Schema.RegisterParameters], Option[List[Schema.RegisterParameters]]] = (fun: List[Schema.RegisterParameters]) => Option(fun)
		given putSchemaRegisterParametersAvailabilityEnum: Conversion[Schema.RegisterParameters.AvailabilityEnum, Option[Schema.RegisterParameters.AvailabilityEnum]] = (fun: Schema.RegisterParameters.AvailabilityEnum) => Option(fun)
		given putListSchemaRegisterParametersSupportedPrivacyEnum: Conversion[List[Schema.RegisterParameters.SupportedPrivacyEnum], Option[List[Schema.RegisterParameters.SupportedPrivacyEnum]]] = (fun: List[Schema.RegisterParameters.SupportedPrivacyEnum]) => Option(fun)
		given putListSchemaRegisterParametersDomainNoticesEnum: Conversion[List[Schema.RegisterParameters.DomainNoticesEnum], Option[List[Schema.RegisterParameters.DomainNoticesEnum]]] = (fun: List[Schema.RegisterParameters.DomainNoticesEnum]) => Option(fun)
		given putSchemaMoney: Conversion[Schema.Money, Option[Schema.Money]] = (fun: Schema.Money) => Option(fun)
		given putSchemaRegisterParameters: Conversion[Schema.RegisterParameters, Option[Schema.RegisterParameters]] = (fun: Schema.RegisterParameters) => Option(fun)
		given putSchemaRegistration: Conversion[Schema.Registration, Option[Schema.Registration]] = (fun: Schema.Registration) => Option(fun)
		given putListSchemaRegisterDomainRequestDomainNoticesEnum: Conversion[List[Schema.RegisterDomainRequest.DomainNoticesEnum], Option[List[Schema.RegisterDomainRequest.DomainNoticesEnum]]] = (fun: List[Schema.RegisterDomainRequest.DomainNoticesEnum]) => Option(fun)
		given putListSchemaRegisterDomainRequestContactNoticesEnum: Conversion[List[Schema.RegisterDomainRequest.ContactNoticesEnum], Option[List[Schema.RegisterDomainRequest.ContactNoticesEnum]]] = (fun: List[Schema.RegisterDomainRequest.ContactNoticesEnum]) => Option(fun)
		given putSchemaRegistrationStateEnum: Conversion[Schema.Registration.StateEnum, Option[Schema.Registration.StateEnum]] = (fun: Schema.Registration.StateEnum) => Option(fun)
		given putListSchemaRegistrationIssuesEnum: Conversion[List[Schema.Registration.IssuesEnum], Option[List[Schema.Registration.IssuesEnum]]] = (fun: List[Schema.Registration.IssuesEnum]) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putSchemaManagementSettings: Conversion[Schema.ManagementSettings, Option[Schema.ManagementSettings]] = (fun: Schema.ManagementSettings) => Option(fun)
		given putSchemaDnsSettings: Conversion[Schema.DnsSettings, Option[Schema.DnsSettings]] = (fun: Schema.DnsSettings) => Option(fun)
		given putSchemaContactSettings: Conversion[Schema.ContactSettings, Option[Schema.ContactSettings]] = (fun: Schema.ContactSettings) => Option(fun)
		given putListSchemaRegistrationSupportedPrivacyEnum: Conversion[List[Schema.Registration.SupportedPrivacyEnum], Option[List[Schema.Registration.SupportedPrivacyEnum]]] = (fun: List[Schema.Registration.SupportedPrivacyEnum]) => Option(fun)
		given putSchemaRegistrationRegisterFailureReasonEnum: Conversion[Schema.Registration.RegisterFailureReasonEnum, Option[Schema.Registration.RegisterFailureReasonEnum]] = (fun: Schema.Registration.RegisterFailureReasonEnum) => Option(fun)
		given putSchemaRegistrationTransferFailureReasonEnum: Conversion[Schema.Registration.TransferFailureReasonEnum, Option[Schema.Registration.TransferFailureReasonEnum]] = (fun: Schema.Registration.TransferFailureReasonEnum) => Option(fun)
		given putListSchemaRegistrationDomainPropertiesEnum: Conversion[List[Schema.Registration.DomainPropertiesEnum], Option[List[Schema.Registration.DomainPropertiesEnum]]] = (fun: List[Schema.Registration.DomainPropertiesEnum]) => Option(fun)
		given putSchemaManagementSettingsRenewalMethodEnum: Conversion[Schema.ManagementSettings.RenewalMethodEnum, Option[Schema.ManagementSettings.RenewalMethodEnum]] = (fun: Schema.ManagementSettings.RenewalMethodEnum) => Option(fun)
		given putSchemaManagementSettingsPreferredRenewalMethodEnum: Conversion[Schema.ManagementSettings.PreferredRenewalMethodEnum, Option[Schema.ManagementSettings.PreferredRenewalMethodEnum]] = (fun: Schema.ManagementSettings.PreferredRenewalMethodEnum) => Option(fun)
		given putSchemaManagementSettingsTransferLockStateEnum: Conversion[Schema.ManagementSettings.TransferLockStateEnum, Option[Schema.ManagementSettings.TransferLockStateEnum]] = (fun: Schema.ManagementSettings.TransferLockStateEnum) => Option(fun)
		given putSchemaManagementSettingsEffectiveTransferLockStateEnum: Conversion[Schema.ManagementSettings.EffectiveTransferLockStateEnum, Option[Schema.ManagementSettings.EffectiveTransferLockStateEnum]] = (fun: Schema.ManagementSettings.EffectiveTransferLockStateEnum) => Option(fun)
		given putSchemaCustomDns: Conversion[Schema.CustomDns, Option[Schema.CustomDns]] = (fun: Schema.CustomDns) => Option(fun)
		given putSchemaGoogleDomainsDns: Conversion[Schema.GoogleDomainsDns, Option[Schema.GoogleDomainsDns]] = (fun: Schema.GoogleDomainsDns) => Option(fun)
		given putListSchemaGlueRecord: Conversion[List[Schema.GlueRecord], Option[List[Schema.GlueRecord]]] = (fun: List[Schema.GlueRecord]) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putListSchemaDsRecord: Conversion[List[Schema.DsRecord], Option[List[Schema.DsRecord]]] = (fun: List[Schema.DsRecord]) => Option(fun)
		given putSchemaDsRecordAlgorithmEnum: Conversion[Schema.DsRecord.AlgorithmEnum, Option[Schema.DsRecord.AlgorithmEnum]] = (fun: Schema.DsRecord.AlgorithmEnum) => Option(fun)
		given putSchemaDsRecordDigestTypeEnum: Conversion[Schema.DsRecord.DigestTypeEnum, Option[Schema.DsRecord.DigestTypeEnum]] = (fun: Schema.DsRecord.DigestTypeEnum) => Option(fun)
		given putSchemaGoogleDomainsDnsDsStateEnum: Conversion[Schema.GoogleDomainsDns.DsStateEnum, Option[Schema.GoogleDomainsDns.DsStateEnum]] = (fun: Schema.GoogleDomainsDns.DsStateEnum) => Option(fun)
		given putSchemaContactSettingsPrivacyEnum: Conversion[Schema.ContactSettings.PrivacyEnum, Option[Schema.ContactSettings.PrivacyEnum]] = (fun: Schema.ContactSettings.PrivacyEnum) => Option(fun)
		given putSchemaContact: Conversion[Schema.Contact, Option[Schema.Contact]] = (fun: Schema.Contact) => Option(fun)
		given putSchemaPostalAddress: Conversion[Schema.PostalAddress, Option[Schema.PostalAddress]] = (fun: Schema.PostalAddress) => Option(fun)
		given putSchemaTransferParameters: Conversion[Schema.TransferParameters, Option[Schema.TransferParameters]] = (fun: Schema.TransferParameters) => Option(fun)
		given putSchemaTransferParametersTransferLockStateEnum: Conversion[Schema.TransferParameters.TransferLockStateEnum, Option[Schema.TransferParameters.TransferLockStateEnum]] = (fun: Schema.TransferParameters.TransferLockStateEnum) => Option(fun)
		given putListSchemaTransferParametersSupportedPrivacyEnum: Conversion[List[Schema.TransferParameters.SupportedPrivacyEnum], Option[List[Schema.TransferParameters.SupportedPrivacyEnum]]] = (fun: List[Schema.TransferParameters.SupportedPrivacyEnum]) => Option(fun)
		given putListSchemaTransferDomainRequestContactNoticesEnum: Conversion[List[Schema.TransferDomainRequest.ContactNoticesEnum], Option[List[Schema.TransferDomainRequest.ContactNoticesEnum]]] = (fun: List[Schema.TransferDomainRequest.ContactNoticesEnum]) => Option(fun)
		given putSchemaAuthorizationCode: Conversion[Schema.AuthorizationCode, Option[Schema.AuthorizationCode]] = (fun: Schema.AuthorizationCode) => Option(fun)
		given putListSchemaDomain: Conversion[List[Schema.Domain], Option[List[Schema.Domain]]] = (fun: List[Schema.Domain]) => Option(fun)
		given putSchemaDomainResourceStateEnum: Conversion[Schema.Domain.ResourceStateEnum, Option[Schema.Domain.ResourceStateEnum]] = (fun: Schema.Domain.ResourceStateEnum) => Option(fun)
		given putListSchemaRegistration: Conversion[List[Schema.Registration], Option[List[Schema.Registration]]] = (fun: List[Schema.Registration]) => Option(fun)
		given putListSchemaResourceRecordSet: Conversion[List[Schema.ResourceRecordSet], Option[List[Schema.ResourceRecordSet]]] = (fun: List[Schema.ResourceRecordSet]) => Option(fun)
		given putSchemaRRSetRoutingPolicy: Conversion[Schema.RRSetRoutingPolicy, Option[Schema.RRSetRoutingPolicy]] = (fun: Schema.RRSetRoutingPolicy) => Option(fun)
		given putSchemaGeoPolicy: Conversion[Schema.GeoPolicy, Option[Schema.GeoPolicy]] = (fun: Schema.GeoPolicy) => Option(fun)
		given putSchemaWrrPolicy: Conversion[Schema.WrrPolicy, Option[Schema.WrrPolicy]] = (fun: Schema.WrrPolicy) => Option(fun)
		given putSchemaPrimaryBackupPolicy: Conversion[Schema.PrimaryBackupPolicy, Option[Schema.PrimaryBackupPolicy]] = (fun: Schema.PrimaryBackupPolicy) => Option(fun)
		given putListSchemaGeoPolicyItem: Conversion[List[Schema.GeoPolicyItem], Option[List[Schema.GeoPolicyItem]]] = (fun: List[Schema.GeoPolicyItem]) => Option(fun)
		given putSchemaHealthCheckTargets: Conversion[Schema.HealthCheckTargets, Option[Schema.HealthCheckTargets]] = (fun: Schema.HealthCheckTargets) => Option(fun)
		given putListSchemaLoadBalancerTarget: Conversion[List[Schema.LoadBalancerTarget], Option[List[Schema.LoadBalancerTarget]]] = (fun: List[Schema.LoadBalancerTarget]) => Option(fun)
		given putSchemaLoadBalancerTargetLoadBalancerTypeEnum: Conversion[Schema.LoadBalancerTarget.LoadBalancerTypeEnum, Option[Schema.LoadBalancerTarget.LoadBalancerTypeEnum]] = (fun: Schema.LoadBalancerTarget.LoadBalancerTypeEnum) => Option(fun)
		given putSchemaLoadBalancerTargetIpProtocolEnum: Conversion[Schema.LoadBalancerTarget.IpProtocolEnum, Option[Schema.LoadBalancerTarget.IpProtocolEnum]] = (fun: Schema.LoadBalancerTarget.IpProtocolEnum) => Option(fun)
		given putListSchemaWrrPolicyItem: Conversion[List[Schema.WrrPolicyItem], Option[List[Schema.WrrPolicyItem]]] = (fun: List[Schema.WrrPolicyItem]) => Option(fun)
		given putBigDecimal: Conversion[BigDecimal, Option[BigDecimal]] = (fun: BigDecimal) => Option(fun)
		given putListSchemaDomainForwarding: Conversion[List[Schema.DomainForwarding], Option[List[Schema.DomainForwarding]]] = (fun: List[Schema.DomainForwarding]) => Option(fun)
		given putListSchemaEmailForwarding: Conversion[List[Schema.EmailForwarding], Option[List[Schema.EmailForwarding]]] = (fun: List[Schema.EmailForwarding]) => Option(fun)
		given putSchemaDomainForwardingRedirectTypeEnum: Conversion[Schema.DomainForwarding.RedirectTypeEnum, Option[Schema.DomainForwarding.RedirectTypeEnum]] = (fun: Schema.DomainForwarding.RedirectTypeEnum) => Option(fun)
		given putListSchemaConfigureContactSettingsRequestContactNoticesEnum: Conversion[List[Schema.ConfigureContactSettingsRequest.ContactNoticesEnum], Option[List[Schema.ConfigureContactSettingsRequest.ContactNoticesEnum]]] = (fun: List[Schema.ConfigureContactSettingsRequest.ContactNoticesEnum]) => Option(fun)
		given putSchemaPolicy: Conversion[Schema.Policy, Option[Schema.Policy]] = (fun: Schema.Policy) => Option(fun)
		given putListSchemaBinding: Conversion[List[Schema.Binding], Option[List[Schema.Binding]]] = (fun: List[Schema.Binding]) => Option(fun)
		given putListSchemaAuditConfig: Conversion[List[Schema.AuditConfig], Option[List[Schema.AuditConfig]]] = (fun: List[Schema.AuditConfig]) => Option(fun)
		given putSchemaExpr: Conversion[Schema.Expr, Option[Schema.Expr]] = (fun: Schema.Expr) => Option(fun)
		given putListSchemaAuditLogConfig: Conversion[List[Schema.AuditLogConfig], Option[List[Schema.AuditLogConfig]]] = (fun: List[Schema.AuditLogConfig]) => Option(fun)
		given putSchemaAuditLogConfigLogTypeEnum: Conversion[Schema.AuditLogConfig.LogTypeEnum, Option[Schema.AuditLogConfig.LogTypeEnum]] = (fun: Schema.AuditLogConfig.LogTypeEnum) => Option(fun)
		given putListSchemaLocation: Conversion[List[Schema.Location], Option[List[Schema.Location]]] = (fun: List[Schema.Location]) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
