package com.boresjo.play.api.google.networkservices

import play.api.libs.json.*
import play.api.libs.ws.{WSClient, WSRequest}
import com.boresjo.play.api.{PlayApi, RequestSigner, JsonEnumFormat}

import javax.inject.*
import scala.concurrent.{ExecutionContext, Future}

object Helpers {
	import Schema.*
	object AutoOption {
		given putListSchemaOperation: Conversion[List[Schema.Operation], Option[List[Schema.Operation]]] = (fun: List[Schema.Operation]) => Option(fun)
		given putString: Conversion[String, Option[String]] = (fun: String) => Option(fun)
		given putMapStringJsValue: Conversion[Map[String, JsValue], Option[Map[String, JsValue]]] = (fun: Map[String, JsValue]) => Option(fun)
		given putBoolean: Conversion[Boolean, Option[Boolean]] = (fun: Boolean) => Option(fun)
		given putSchemaStatus: Conversion[Schema.Status, Option[Schema.Status]] = (fun: Schema.Status) => Option(fun)
		given putInt: Conversion[Int, Option[Int]] = (fun: Int) => Option(fun)
		given putListMapStringJsValue: Conversion[List[Map[String, JsValue]], Option[List[Map[String, JsValue]]]] = (fun: List[Map[String, JsValue]]) => Option(fun)
		given putListSchemaLbTrafficExtension: Conversion[List[Schema.LbTrafficExtension], Option[List[Schema.LbTrafficExtension]]] = (fun: List[Schema.LbTrafficExtension]) => Option(fun)
		given putListString: Conversion[List[String], Option[List[String]]] = (fun: List[String]) => Option(fun)
		given putMapStringString: Conversion[Map[String, String], Option[Map[String, String]]] = (fun: Map[String, String]) => Option(fun)
		given putListSchemaExtensionChain: Conversion[List[Schema.ExtensionChain], Option[List[Schema.ExtensionChain]]] = (fun: List[Schema.ExtensionChain]) => Option(fun)
		given putSchemaLbTrafficExtensionLoadBalancingSchemeEnum: Conversion[Schema.LbTrafficExtension.LoadBalancingSchemeEnum, Option[Schema.LbTrafficExtension.LoadBalancingSchemeEnum]] = (fun: Schema.LbTrafficExtension.LoadBalancingSchemeEnum) => Option(fun)
		given putSchemaExtensionChainMatchCondition: Conversion[Schema.ExtensionChainMatchCondition, Option[Schema.ExtensionChainMatchCondition]] = (fun: Schema.ExtensionChainMatchCondition) => Option(fun)
		given putListSchemaExtensionChainExtension: Conversion[List[Schema.ExtensionChainExtension], Option[List[Schema.ExtensionChainExtension]]] = (fun: List[Schema.ExtensionChainExtension]) => Option(fun)
		given putListSchemaExtensionChainExtensionSupportedEventsEnum: Conversion[List[Schema.ExtensionChainExtension.SupportedEventsEnum], Option[List[Schema.ExtensionChainExtension.SupportedEventsEnum]]] = (fun: List[Schema.ExtensionChainExtension.SupportedEventsEnum]) => Option(fun)
		given putListSchemaLbRouteExtension: Conversion[List[Schema.LbRouteExtension], Option[List[Schema.LbRouteExtension]]] = (fun: List[Schema.LbRouteExtension]) => Option(fun)
		given putSchemaLbRouteExtensionLoadBalancingSchemeEnum: Conversion[Schema.LbRouteExtension.LoadBalancingSchemeEnum, Option[Schema.LbRouteExtension.LoadBalancingSchemeEnum]] = (fun: Schema.LbRouteExtension.LoadBalancingSchemeEnum) => Option(fun)
		given putListSchemaAuthzExtension: Conversion[List[Schema.AuthzExtension], Option[List[Schema.AuthzExtension]]] = (fun: List[Schema.AuthzExtension]) => Option(fun)
		given putSchemaAuthzExtensionLoadBalancingSchemeEnum: Conversion[Schema.AuthzExtension.LoadBalancingSchemeEnum, Option[Schema.AuthzExtension.LoadBalancingSchemeEnum]] = (fun: Schema.AuthzExtension.LoadBalancingSchemeEnum) => Option(fun)
		given putSchemaAuthzExtensionWireFormatEnum: Conversion[Schema.AuthzExtension.WireFormatEnum, Option[Schema.AuthzExtension.WireFormatEnum]] = (fun: Schema.AuthzExtension.WireFormatEnum) => Option(fun)
		given putListSchemaEndpointPolicy: Conversion[List[Schema.EndpointPolicy], Option[List[Schema.EndpointPolicy]]] = (fun: List[Schema.EndpointPolicy]) => Option(fun)
		given putSchemaEndpointPolicyTypeEnum: Conversion[Schema.EndpointPolicy.TypeEnum, Option[Schema.EndpointPolicy.TypeEnum]] = (fun: Schema.EndpointPolicy.TypeEnum) => Option(fun)
		given putSchemaEndpointMatcher: Conversion[Schema.EndpointMatcher, Option[Schema.EndpointMatcher]] = (fun: Schema.EndpointMatcher) => Option(fun)
		given putSchemaTrafficPortSelector: Conversion[Schema.TrafficPortSelector, Option[Schema.TrafficPortSelector]] = (fun: Schema.TrafficPortSelector) => Option(fun)
		given putSchemaEndpointMatcherMetadataLabelMatcher: Conversion[Schema.EndpointMatcherMetadataLabelMatcher, Option[Schema.EndpointMatcherMetadataLabelMatcher]] = (fun: Schema.EndpointMatcherMetadataLabelMatcher) => Option(fun)
		given putSchemaEndpointMatcherMetadataLabelMatcherMetadataLabelMatchCriteriaEnum: Conversion[Schema.EndpointMatcherMetadataLabelMatcher.MetadataLabelMatchCriteriaEnum, Option[Schema.EndpointMatcherMetadataLabelMatcher.MetadataLabelMatchCriteriaEnum]] = (fun: Schema.EndpointMatcherMetadataLabelMatcher.MetadataLabelMatchCriteriaEnum) => Option(fun)
		given putListSchemaEndpointMatcherMetadataLabelMatcherMetadataLabels: Conversion[List[Schema.EndpointMatcherMetadataLabelMatcherMetadataLabels], Option[List[Schema.EndpointMatcherMetadataLabelMatcherMetadataLabels]]] = (fun: List[Schema.EndpointMatcherMetadataLabelMatcherMetadataLabels]) => Option(fun)
		given putListSchemaWasmPluginVersion: Conversion[List[Schema.WasmPluginVersion], Option[List[Schema.WasmPluginVersion]]] = (fun: List[Schema.WasmPluginVersion]) => Option(fun)
		given putListSchemaWasmPlugin: Conversion[List[Schema.WasmPlugin], Option[List[Schema.WasmPlugin]]] = (fun: List[Schema.WasmPlugin]) => Option(fun)
		given putSchemaWasmPluginLogConfig: Conversion[Schema.WasmPluginLogConfig, Option[Schema.WasmPluginLogConfig]] = (fun: Schema.WasmPluginLogConfig) => Option(fun)
		given putMapStringSchemaWasmPluginVersionDetails: Conversion[Map[String, Schema.WasmPluginVersionDetails], Option[Map[String, Schema.WasmPluginVersionDetails]]] = (fun: Map[String, Schema.WasmPluginVersionDetails]) => Option(fun)
		given putListSchemaWasmPluginUsedBy: Conversion[List[Schema.WasmPluginUsedBy], Option[List[Schema.WasmPluginUsedBy]]] = (fun: List[Schema.WasmPluginUsedBy]) => Option(fun)
		given putBigDecimal: Conversion[BigDecimal, Option[BigDecimal]] = (fun: BigDecimal) => Option(fun)
		given putSchemaWasmPluginLogConfigMinLogLevelEnum: Conversion[Schema.WasmPluginLogConfig.MinLogLevelEnum, Option[Schema.WasmPluginLogConfig.MinLogLevelEnum]] = (fun: Schema.WasmPluginLogConfig.MinLogLevelEnum) => Option(fun)
		given putListSchemaGateway: Conversion[List[Schema.Gateway], Option[List[Schema.Gateway]]] = (fun: List[Schema.Gateway]) => Option(fun)
		given putSchemaGatewayTypeEnum: Conversion[Schema.Gateway.TypeEnum, Option[Schema.Gateway.TypeEnum]] = (fun: Schema.Gateway.TypeEnum) => Option(fun)
		given putListInt: Conversion[List[Int], Option[List[Int]]] = (fun: List[Int]) => Option(fun)
		given putSchemaGatewayIpVersionEnum: Conversion[Schema.Gateway.IpVersionEnum, Option[Schema.Gateway.IpVersionEnum]] = (fun: Schema.Gateway.IpVersionEnum) => Option(fun)
		given putSchemaGatewayEnvoyHeadersEnum: Conversion[Schema.Gateway.EnvoyHeadersEnum, Option[Schema.Gateway.EnvoyHeadersEnum]] = (fun: Schema.Gateway.EnvoyHeadersEnum) => Option(fun)
		given putSchemaGatewayRoutingModeEnum: Conversion[Schema.Gateway.RoutingModeEnum, Option[Schema.Gateway.RoutingModeEnum]] = (fun: Schema.Gateway.RoutingModeEnum) => Option(fun)
		given putListSchemaGrpcRoute: Conversion[List[Schema.GrpcRoute], Option[List[Schema.GrpcRoute]]] = (fun: List[Schema.GrpcRoute]) => Option(fun)
		given putListSchemaGrpcRouteRouteRule: Conversion[List[Schema.GrpcRouteRouteRule], Option[List[Schema.GrpcRouteRouteRule]]] = (fun: List[Schema.GrpcRouteRouteRule]) => Option(fun)
		given putListSchemaGrpcRouteRouteMatch: Conversion[List[Schema.GrpcRouteRouteMatch], Option[List[Schema.GrpcRouteRouteMatch]]] = (fun: List[Schema.GrpcRouteRouteMatch]) => Option(fun)
		given putSchemaGrpcRouteRouteAction: Conversion[Schema.GrpcRouteRouteAction, Option[Schema.GrpcRouteRouteAction]] = (fun: Schema.GrpcRouteRouteAction) => Option(fun)
		given putSchemaGrpcRouteMethodMatch: Conversion[Schema.GrpcRouteMethodMatch, Option[Schema.GrpcRouteMethodMatch]] = (fun: Schema.GrpcRouteMethodMatch) => Option(fun)
		given putListSchemaGrpcRouteHeaderMatch: Conversion[List[Schema.GrpcRouteHeaderMatch], Option[List[Schema.GrpcRouteHeaderMatch]]] = (fun: List[Schema.GrpcRouteHeaderMatch]) => Option(fun)
		given putSchemaGrpcRouteMethodMatchTypeEnum: Conversion[Schema.GrpcRouteMethodMatch.TypeEnum, Option[Schema.GrpcRouteMethodMatch.TypeEnum]] = (fun: Schema.GrpcRouteMethodMatch.TypeEnum) => Option(fun)
		given putSchemaGrpcRouteHeaderMatchTypeEnum: Conversion[Schema.GrpcRouteHeaderMatch.TypeEnum, Option[Schema.GrpcRouteHeaderMatch.TypeEnum]] = (fun: Schema.GrpcRouteHeaderMatch.TypeEnum) => Option(fun)
		given putListSchemaGrpcRouteDestination: Conversion[List[Schema.GrpcRouteDestination], Option[List[Schema.GrpcRouteDestination]]] = (fun: List[Schema.GrpcRouteDestination]) => Option(fun)
		given putSchemaGrpcRouteFaultInjectionPolicy: Conversion[Schema.GrpcRouteFaultInjectionPolicy, Option[Schema.GrpcRouteFaultInjectionPolicy]] = (fun: Schema.GrpcRouteFaultInjectionPolicy) => Option(fun)
		given putSchemaGrpcRouteRetryPolicy: Conversion[Schema.GrpcRouteRetryPolicy, Option[Schema.GrpcRouteRetryPolicy]] = (fun: Schema.GrpcRouteRetryPolicy) => Option(fun)
		given putSchemaGrpcRouteStatefulSessionAffinityPolicy: Conversion[Schema.GrpcRouteStatefulSessionAffinityPolicy, Option[Schema.GrpcRouteStatefulSessionAffinityPolicy]] = (fun: Schema.GrpcRouteStatefulSessionAffinityPolicy) => Option(fun)
		given putSchemaGrpcRouteFaultInjectionPolicyDelay: Conversion[Schema.GrpcRouteFaultInjectionPolicyDelay, Option[Schema.GrpcRouteFaultInjectionPolicyDelay]] = (fun: Schema.GrpcRouteFaultInjectionPolicyDelay) => Option(fun)
		given putSchemaGrpcRouteFaultInjectionPolicyAbort: Conversion[Schema.GrpcRouteFaultInjectionPolicyAbort, Option[Schema.GrpcRouteFaultInjectionPolicyAbort]] = (fun: Schema.GrpcRouteFaultInjectionPolicyAbort) => Option(fun)
		given putListSchemaHttpRoute: Conversion[List[Schema.HttpRoute], Option[List[Schema.HttpRoute]]] = (fun: List[Schema.HttpRoute]) => Option(fun)
		given putListSchemaHttpRouteRouteRule: Conversion[List[Schema.HttpRouteRouteRule], Option[List[Schema.HttpRouteRouteRule]]] = (fun: List[Schema.HttpRouteRouteRule]) => Option(fun)
		given putListSchemaHttpRouteRouteMatch: Conversion[List[Schema.HttpRouteRouteMatch], Option[List[Schema.HttpRouteRouteMatch]]] = (fun: List[Schema.HttpRouteRouteMatch]) => Option(fun)
		given putSchemaHttpRouteRouteAction: Conversion[Schema.HttpRouteRouteAction, Option[Schema.HttpRouteRouteAction]] = (fun: Schema.HttpRouteRouteAction) => Option(fun)
		given putListSchemaHttpRouteHeaderMatch: Conversion[List[Schema.HttpRouteHeaderMatch], Option[List[Schema.HttpRouteHeaderMatch]]] = (fun: List[Schema.HttpRouteHeaderMatch]) => Option(fun)
		given putListSchemaHttpRouteQueryParameterMatch: Conversion[List[Schema.HttpRouteQueryParameterMatch], Option[List[Schema.HttpRouteQueryParameterMatch]]] = (fun: List[Schema.HttpRouteQueryParameterMatch]) => Option(fun)
		given putSchemaHttpRouteHeaderMatchIntegerRange: Conversion[Schema.HttpRouteHeaderMatchIntegerRange, Option[Schema.HttpRouteHeaderMatchIntegerRange]] = (fun: Schema.HttpRouteHeaderMatchIntegerRange) => Option(fun)
		given putListSchemaHttpRouteDestination: Conversion[List[Schema.HttpRouteDestination], Option[List[Schema.HttpRouteDestination]]] = (fun: List[Schema.HttpRouteDestination]) => Option(fun)
		given putSchemaHttpRouteRedirect: Conversion[Schema.HttpRouteRedirect, Option[Schema.HttpRouteRedirect]] = (fun: Schema.HttpRouteRedirect) => Option(fun)
		given putSchemaHttpRouteFaultInjectionPolicy: Conversion[Schema.HttpRouteFaultInjectionPolicy, Option[Schema.HttpRouteFaultInjectionPolicy]] = (fun: Schema.HttpRouteFaultInjectionPolicy) => Option(fun)
		given putSchemaHttpRouteHeaderModifier: Conversion[Schema.HttpRouteHeaderModifier, Option[Schema.HttpRouteHeaderModifier]] = (fun: Schema.HttpRouteHeaderModifier) => Option(fun)
		given putSchemaHttpRouteURLRewrite: Conversion[Schema.HttpRouteURLRewrite, Option[Schema.HttpRouteURLRewrite]] = (fun: Schema.HttpRouteURLRewrite) => Option(fun)
		given putSchemaHttpRouteRetryPolicy: Conversion[Schema.HttpRouteRetryPolicy, Option[Schema.HttpRouteRetryPolicy]] = (fun: Schema.HttpRouteRetryPolicy) => Option(fun)
		given putSchemaHttpRouteRequestMirrorPolicy: Conversion[Schema.HttpRouteRequestMirrorPolicy, Option[Schema.HttpRouteRequestMirrorPolicy]] = (fun: Schema.HttpRouteRequestMirrorPolicy) => Option(fun)
		given putSchemaHttpRouteCorsPolicy: Conversion[Schema.HttpRouteCorsPolicy, Option[Schema.HttpRouteCorsPolicy]] = (fun: Schema.HttpRouteCorsPolicy) => Option(fun)
		given putSchemaHttpRouteStatefulSessionAffinityPolicy: Conversion[Schema.HttpRouteStatefulSessionAffinityPolicy, Option[Schema.HttpRouteStatefulSessionAffinityPolicy]] = (fun: Schema.HttpRouteStatefulSessionAffinityPolicy) => Option(fun)
		given putSchemaHttpRouteHttpDirectResponse: Conversion[Schema.HttpRouteHttpDirectResponse, Option[Schema.HttpRouteHttpDirectResponse]] = (fun: Schema.HttpRouteHttpDirectResponse) => Option(fun)
		given putSchemaHttpRouteRedirectResponseCodeEnum: Conversion[Schema.HttpRouteRedirect.ResponseCodeEnum, Option[Schema.HttpRouteRedirect.ResponseCodeEnum]] = (fun: Schema.HttpRouteRedirect.ResponseCodeEnum) => Option(fun)
		given putSchemaHttpRouteFaultInjectionPolicyDelay: Conversion[Schema.HttpRouteFaultInjectionPolicyDelay, Option[Schema.HttpRouteFaultInjectionPolicyDelay]] = (fun: Schema.HttpRouteFaultInjectionPolicyDelay) => Option(fun)
		given putSchemaHttpRouteFaultInjectionPolicyAbort: Conversion[Schema.HttpRouteFaultInjectionPolicyAbort, Option[Schema.HttpRouteFaultInjectionPolicyAbort]] = (fun: Schema.HttpRouteFaultInjectionPolicyAbort) => Option(fun)
		given putSchemaHttpRouteDestination: Conversion[Schema.HttpRouteDestination, Option[Schema.HttpRouteDestination]] = (fun: Schema.HttpRouteDestination) => Option(fun)
		given putListSchemaTcpRoute: Conversion[List[Schema.TcpRoute], Option[List[Schema.TcpRoute]]] = (fun: List[Schema.TcpRoute]) => Option(fun)
		given putListSchemaTcpRouteRouteRule: Conversion[List[Schema.TcpRouteRouteRule], Option[List[Schema.TcpRouteRouteRule]]] = (fun: List[Schema.TcpRouteRouteRule]) => Option(fun)
		given putListSchemaTcpRouteRouteMatch: Conversion[List[Schema.TcpRouteRouteMatch], Option[List[Schema.TcpRouteRouteMatch]]] = (fun: List[Schema.TcpRouteRouteMatch]) => Option(fun)
		given putSchemaTcpRouteRouteAction: Conversion[Schema.TcpRouteRouteAction, Option[Schema.TcpRouteRouteAction]] = (fun: Schema.TcpRouteRouteAction) => Option(fun)
		given putListSchemaTcpRouteRouteDestination: Conversion[List[Schema.TcpRouteRouteDestination], Option[List[Schema.TcpRouteRouteDestination]]] = (fun: List[Schema.TcpRouteRouteDestination]) => Option(fun)
		given putListSchemaTlsRoute: Conversion[List[Schema.TlsRoute], Option[List[Schema.TlsRoute]]] = (fun: List[Schema.TlsRoute]) => Option(fun)
		given putListSchemaTlsRouteRouteRule: Conversion[List[Schema.TlsRouteRouteRule], Option[List[Schema.TlsRouteRouteRule]]] = (fun: List[Schema.TlsRouteRouteRule]) => Option(fun)
		given putListSchemaTlsRouteRouteMatch: Conversion[List[Schema.TlsRouteRouteMatch], Option[List[Schema.TlsRouteRouteMatch]]] = (fun: List[Schema.TlsRouteRouteMatch]) => Option(fun)
		given putSchemaTlsRouteRouteAction: Conversion[Schema.TlsRouteRouteAction, Option[Schema.TlsRouteRouteAction]] = (fun: Schema.TlsRouteRouteAction) => Option(fun)
		given putListSchemaTlsRouteRouteDestination: Conversion[List[Schema.TlsRouteRouteDestination], Option[List[Schema.TlsRouteRouteDestination]]] = (fun: List[Schema.TlsRouteRouteDestination]) => Option(fun)
		given putListSchemaServiceBinding: Conversion[List[Schema.ServiceBinding], Option[List[Schema.ServiceBinding]]] = (fun: List[Schema.ServiceBinding]) => Option(fun)
		given putListSchemaMesh: Conversion[List[Schema.Mesh], Option[List[Schema.Mesh]]] = (fun: List[Schema.Mesh]) => Option(fun)
		given putSchemaMeshEnvoyHeadersEnum: Conversion[Schema.Mesh.EnvoyHeadersEnum, Option[Schema.Mesh.EnvoyHeadersEnum]] = (fun: Schema.Mesh.EnvoyHeadersEnum) => Option(fun)
		given putListSchemaServiceLbPolicy: Conversion[List[Schema.ServiceLbPolicy], Option[List[Schema.ServiceLbPolicy]]] = (fun: List[Schema.ServiceLbPolicy]) => Option(fun)
		given putSchemaServiceLbPolicyLoadBalancingAlgorithmEnum: Conversion[Schema.ServiceLbPolicy.LoadBalancingAlgorithmEnum, Option[Schema.ServiceLbPolicy.LoadBalancingAlgorithmEnum]] = (fun: Schema.ServiceLbPolicy.LoadBalancingAlgorithmEnum) => Option(fun)
		given putSchemaServiceLbPolicyAutoCapacityDrain: Conversion[Schema.ServiceLbPolicyAutoCapacityDrain, Option[Schema.ServiceLbPolicyAutoCapacityDrain]] = (fun: Schema.ServiceLbPolicyAutoCapacityDrain) => Option(fun)
		given putSchemaServiceLbPolicyFailoverConfig: Conversion[Schema.ServiceLbPolicyFailoverConfig, Option[Schema.ServiceLbPolicyFailoverConfig]] = (fun: Schema.ServiceLbPolicyFailoverConfig) => Option(fun)
		given putListSchemaGatewayRouteView: Conversion[List[Schema.GatewayRouteView], Option[List[Schema.GatewayRouteView]]] = (fun: List[Schema.GatewayRouteView]) => Option(fun)
		given putListSchemaMeshRouteView: Conversion[List[Schema.MeshRouteView], Option[List[Schema.MeshRouteView]]] = (fun: List[Schema.MeshRouteView]) => Option(fun)
		given putListSchemaLocation: Conversion[List[Schema.Location], Option[List[Schema.Location]]] = (fun: List[Schema.Location]) => Option(fun)
		given putSchemaPolicy: Conversion[Schema.Policy, Option[Schema.Policy]] = (fun: Schema.Policy) => Option(fun)
		given putListSchemaBinding: Conversion[List[Schema.Binding], Option[List[Schema.Binding]]] = (fun: List[Schema.Binding]) => Option(fun)
		given putListSchemaAuditConfig: Conversion[List[Schema.AuditConfig], Option[List[Schema.AuditConfig]]] = (fun: List[Schema.AuditConfig]) => Option(fun)
		given putSchemaExpr: Conversion[Schema.Expr, Option[Schema.Expr]] = (fun: Schema.Expr) => Option(fun)
		given putListSchemaAuditLogConfig: Conversion[List[Schema.AuditLogConfig], Option[List[Schema.AuditLogConfig]]] = (fun: List[Schema.AuditLogConfig]) => Option(fun)
		given putSchemaAuditLogConfigLogTypeEnum: Conversion[Schema.AuditLogConfig.LogTypeEnum, Option[Schema.AuditLogConfig.LogTypeEnum]] = (fun: Schema.AuditLogConfig.LogTypeEnum) => Option(fun)
		given putSchemaLoggingConfigLogSeverityEnum: Conversion[Schema.LoggingConfig.LogSeverityEnum, Option[Schema.LoggingConfig.LogSeverityEnum]] = (fun: Schema.LoggingConfig.LogSeverityEnum) => Option(fun)
	}
	object OptionDefault {
		given getString: Conversion[Option[String], String] = (fun: Option[String]) => fun.getOrElse("")
	}
}
